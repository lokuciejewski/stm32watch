
STM32Watch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065b8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  08006678  08006678  00016678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068bc  080068bc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080068bc  080068bc  000168bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068c4  080068c4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068c4  080068c4  000168c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068c8  080068c8  000168c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080068cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000074  08006940  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  08006940  000201e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e2c3  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028f8  00000000  00000000  0002e35f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec8  00000000  00000000  00030c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00013c0d  00000000  00000000  00031b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00012b26  00000000  00000000  0004572d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0006f314  00000000  00000000  00058253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000c7567  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000d58  00000000  00000000  000c75b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003960  00000000  00000000  000c8310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006660 	.word	0x08006660

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	08006660 	.word	0x08006660

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f84c 	bl	8000300 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4647      	mov	r7, r8
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	4699      	mov	r9, r3
 8000280:	0c3b      	lsrs	r3, r7, #16
 8000282:	469c      	mov	ip, r3
 8000284:	0413      	lsls	r3, r2, #16
 8000286:	0c1b      	lsrs	r3, r3, #16
 8000288:	001d      	movs	r5, r3
 800028a:	000e      	movs	r6, r1
 800028c:	4661      	mov	r1, ip
 800028e:	0400      	lsls	r0, r0, #16
 8000290:	0c14      	lsrs	r4, r2, #16
 8000292:	0c00      	lsrs	r0, r0, #16
 8000294:	4345      	muls	r5, r0
 8000296:	434b      	muls	r3, r1
 8000298:	4360      	muls	r0, r4
 800029a:	4361      	muls	r1, r4
 800029c:	18c0      	adds	r0, r0, r3
 800029e:	0c2c      	lsrs	r4, r5, #16
 80002a0:	1820      	adds	r0, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	4283      	cmp	r3, r0
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	; 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4372      	muls	r2, r6
 80002b6:	0c03      	lsrs	r3, r0, #16
 80002b8:	4463      	add	r3, ip
 80002ba:	042d      	lsls	r5, r5, #16
 80002bc:	0c2d      	lsrs	r5, r5, #16
 80002be:	18c9      	adds	r1, r1, r3
 80002c0:	0400      	lsls	r0, r0, #16
 80002c2:	1940      	adds	r0, r0, r5
 80002c4:	1889      	adds	r1, r1, r2
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)

080002d0 <__aeabi_f2uiz>:
 80002d0:	219e      	movs	r1, #158	; 0x9e
 80002d2:	b510      	push	{r4, lr}
 80002d4:	05c9      	lsls	r1, r1, #23
 80002d6:	1c04      	adds	r4, r0, #0
 80002d8:	f000 ff26 	bl	8001128 <__aeabi_fcmpge>
 80002dc:	2800      	cmp	r0, #0
 80002de:	d103      	bne.n	80002e8 <__aeabi_f2uiz+0x18>
 80002e0:	1c20      	adds	r0, r4, #0
 80002e2:	f000 fbad 	bl	8000a40 <__aeabi_f2iz>
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	219e      	movs	r1, #158	; 0x9e
 80002ea:	1c20      	adds	r0, r4, #0
 80002ec:	05c9      	lsls	r1, r1, #23
 80002ee:	f000 f9f9 	bl	80006e4 <__aeabi_fsub>
 80002f2:	f000 fba5 	bl	8000a40 <__aeabi_f2iz>
 80002f6:	2380      	movs	r3, #128	; 0x80
 80002f8:	061b      	lsls	r3, r3, #24
 80002fa:	469c      	mov	ip, r3
 80002fc:	4460      	add	r0, ip
 80002fe:	e7f2      	b.n	80002e6 <__aeabi_f2uiz+0x16>

08000300 <__udivmoddi4>:
 8000300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000302:	4657      	mov	r7, sl
 8000304:	464e      	mov	r6, r9
 8000306:	4645      	mov	r5, r8
 8000308:	46de      	mov	lr, fp
 800030a:	b5e0      	push	{r5, r6, r7, lr}
 800030c:	0004      	movs	r4, r0
 800030e:	000d      	movs	r5, r1
 8000310:	4692      	mov	sl, r2
 8000312:	4699      	mov	r9, r3
 8000314:	b083      	sub	sp, #12
 8000316:	428b      	cmp	r3, r1
 8000318:	d830      	bhi.n	800037c <__udivmoddi4+0x7c>
 800031a:	d02d      	beq.n	8000378 <__udivmoddi4+0x78>
 800031c:	4649      	mov	r1, r9
 800031e:	4650      	mov	r0, sl
 8000320:	f000 ff2a 	bl	8001178 <__clzdi2>
 8000324:	0029      	movs	r1, r5
 8000326:	0006      	movs	r6, r0
 8000328:	0020      	movs	r0, r4
 800032a:	f000 ff25 	bl	8001178 <__clzdi2>
 800032e:	1a33      	subs	r3, r6, r0
 8000330:	4698      	mov	r8, r3
 8000332:	3b20      	subs	r3, #32
 8000334:	469b      	mov	fp, r3
 8000336:	d433      	bmi.n	80003a0 <__udivmoddi4+0xa0>
 8000338:	465a      	mov	r2, fp
 800033a:	4653      	mov	r3, sl
 800033c:	4093      	lsls	r3, r2
 800033e:	4642      	mov	r2, r8
 8000340:	001f      	movs	r7, r3
 8000342:	4653      	mov	r3, sl
 8000344:	4093      	lsls	r3, r2
 8000346:	001e      	movs	r6, r3
 8000348:	42af      	cmp	r7, r5
 800034a:	d83a      	bhi.n	80003c2 <__udivmoddi4+0xc2>
 800034c:	42af      	cmp	r7, r5
 800034e:	d100      	bne.n	8000352 <__udivmoddi4+0x52>
 8000350:	e078      	b.n	8000444 <__udivmoddi4+0x144>
 8000352:	465b      	mov	r3, fp
 8000354:	1ba4      	subs	r4, r4, r6
 8000356:	41bd      	sbcs	r5, r7
 8000358:	2b00      	cmp	r3, #0
 800035a:	da00      	bge.n	800035e <__udivmoddi4+0x5e>
 800035c:	e075      	b.n	800044a <__udivmoddi4+0x14a>
 800035e:	2200      	movs	r2, #0
 8000360:	2300      	movs	r3, #0
 8000362:	9200      	str	r2, [sp, #0]
 8000364:	9301      	str	r3, [sp, #4]
 8000366:	2301      	movs	r3, #1
 8000368:	465a      	mov	r2, fp
 800036a:	4093      	lsls	r3, r2
 800036c:	9301      	str	r3, [sp, #4]
 800036e:	2301      	movs	r3, #1
 8000370:	4642      	mov	r2, r8
 8000372:	4093      	lsls	r3, r2
 8000374:	9300      	str	r3, [sp, #0]
 8000376:	e028      	b.n	80003ca <__udivmoddi4+0xca>
 8000378:	4282      	cmp	r2, r0
 800037a:	d9cf      	bls.n	800031c <__udivmoddi4+0x1c>
 800037c:	2200      	movs	r2, #0
 800037e:	2300      	movs	r3, #0
 8000380:	9200      	str	r2, [sp, #0]
 8000382:	9301      	str	r3, [sp, #4]
 8000384:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <__udivmoddi4+0x8e>
 800038a:	601c      	str	r4, [r3, #0]
 800038c:	605d      	str	r5, [r3, #4]
 800038e:	9800      	ldr	r0, [sp, #0]
 8000390:	9901      	ldr	r1, [sp, #4]
 8000392:	b003      	add	sp, #12
 8000394:	bcf0      	pop	{r4, r5, r6, r7}
 8000396:	46bb      	mov	fp, r7
 8000398:	46b2      	mov	sl, r6
 800039a:	46a9      	mov	r9, r5
 800039c:	46a0      	mov	r8, r4
 800039e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003a0:	4642      	mov	r2, r8
 80003a2:	2320      	movs	r3, #32
 80003a4:	1a9b      	subs	r3, r3, r2
 80003a6:	4652      	mov	r2, sl
 80003a8:	40da      	lsrs	r2, r3
 80003aa:	4641      	mov	r1, r8
 80003ac:	0013      	movs	r3, r2
 80003ae:	464a      	mov	r2, r9
 80003b0:	408a      	lsls	r2, r1
 80003b2:	0017      	movs	r7, r2
 80003b4:	4642      	mov	r2, r8
 80003b6:	431f      	orrs	r7, r3
 80003b8:	4653      	mov	r3, sl
 80003ba:	4093      	lsls	r3, r2
 80003bc:	001e      	movs	r6, r3
 80003be:	42af      	cmp	r7, r5
 80003c0:	d9c4      	bls.n	800034c <__udivmoddi4+0x4c>
 80003c2:	2200      	movs	r2, #0
 80003c4:	2300      	movs	r3, #0
 80003c6:	9200      	str	r2, [sp, #0]
 80003c8:	9301      	str	r3, [sp, #4]
 80003ca:	4643      	mov	r3, r8
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d0d9      	beq.n	8000384 <__udivmoddi4+0x84>
 80003d0:	07fb      	lsls	r3, r7, #31
 80003d2:	0872      	lsrs	r2, r6, #1
 80003d4:	431a      	orrs	r2, r3
 80003d6:	4646      	mov	r6, r8
 80003d8:	087b      	lsrs	r3, r7, #1
 80003da:	e00e      	b.n	80003fa <__udivmoddi4+0xfa>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	d101      	bne.n	80003e4 <__udivmoddi4+0xe4>
 80003e0:	42a2      	cmp	r2, r4
 80003e2:	d80c      	bhi.n	80003fe <__udivmoddi4+0xfe>
 80003e4:	1aa4      	subs	r4, r4, r2
 80003e6:	419d      	sbcs	r5, r3
 80003e8:	2001      	movs	r0, #1
 80003ea:	1924      	adds	r4, r4, r4
 80003ec:	416d      	adcs	r5, r5
 80003ee:	2100      	movs	r1, #0
 80003f0:	3e01      	subs	r6, #1
 80003f2:	1824      	adds	r4, r4, r0
 80003f4:	414d      	adcs	r5, r1
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	d006      	beq.n	8000408 <__udivmoddi4+0x108>
 80003fa:	42ab      	cmp	r3, r5
 80003fc:	d9ee      	bls.n	80003dc <__udivmoddi4+0xdc>
 80003fe:	3e01      	subs	r6, #1
 8000400:	1924      	adds	r4, r4, r4
 8000402:	416d      	adcs	r5, r5
 8000404:	2e00      	cmp	r6, #0
 8000406:	d1f8      	bne.n	80003fa <__udivmoddi4+0xfa>
 8000408:	9800      	ldr	r0, [sp, #0]
 800040a:	9901      	ldr	r1, [sp, #4]
 800040c:	465b      	mov	r3, fp
 800040e:	1900      	adds	r0, r0, r4
 8000410:	4169      	adcs	r1, r5
 8000412:	2b00      	cmp	r3, #0
 8000414:	db24      	blt.n	8000460 <__udivmoddi4+0x160>
 8000416:	002b      	movs	r3, r5
 8000418:	465a      	mov	r2, fp
 800041a:	4644      	mov	r4, r8
 800041c:	40d3      	lsrs	r3, r2
 800041e:	002a      	movs	r2, r5
 8000420:	40e2      	lsrs	r2, r4
 8000422:	001c      	movs	r4, r3
 8000424:	465b      	mov	r3, fp
 8000426:	0015      	movs	r5, r2
 8000428:	2b00      	cmp	r3, #0
 800042a:	db2a      	blt.n	8000482 <__udivmoddi4+0x182>
 800042c:	0026      	movs	r6, r4
 800042e:	409e      	lsls	r6, r3
 8000430:	0033      	movs	r3, r6
 8000432:	0026      	movs	r6, r4
 8000434:	4647      	mov	r7, r8
 8000436:	40be      	lsls	r6, r7
 8000438:	0032      	movs	r2, r6
 800043a:	1a80      	subs	r0, r0, r2
 800043c:	4199      	sbcs	r1, r3
 800043e:	9000      	str	r0, [sp, #0]
 8000440:	9101      	str	r1, [sp, #4]
 8000442:	e79f      	b.n	8000384 <__udivmoddi4+0x84>
 8000444:	42a3      	cmp	r3, r4
 8000446:	d8bc      	bhi.n	80003c2 <__udivmoddi4+0xc2>
 8000448:	e783      	b.n	8000352 <__udivmoddi4+0x52>
 800044a:	4642      	mov	r2, r8
 800044c:	2320      	movs	r3, #32
 800044e:	2100      	movs	r1, #0
 8000450:	1a9b      	subs	r3, r3, r2
 8000452:	2200      	movs	r2, #0
 8000454:	9100      	str	r1, [sp, #0]
 8000456:	9201      	str	r2, [sp, #4]
 8000458:	2201      	movs	r2, #1
 800045a:	40da      	lsrs	r2, r3
 800045c:	9201      	str	r2, [sp, #4]
 800045e:	e786      	b.n	800036e <__udivmoddi4+0x6e>
 8000460:	4642      	mov	r2, r8
 8000462:	2320      	movs	r3, #32
 8000464:	1a9b      	subs	r3, r3, r2
 8000466:	002a      	movs	r2, r5
 8000468:	4646      	mov	r6, r8
 800046a:	409a      	lsls	r2, r3
 800046c:	0023      	movs	r3, r4
 800046e:	40f3      	lsrs	r3, r6
 8000470:	4644      	mov	r4, r8
 8000472:	4313      	orrs	r3, r2
 8000474:	002a      	movs	r2, r5
 8000476:	40e2      	lsrs	r2, r4
 8000478:	001c      	movs	r4, r3
 800047a:	465b      	mov	r3, fp
 800047c:	0015      	movs	r5, r2
 800047e:	2b00      	cmp	r3, #0
 8000480:	dad4      	bge.n	800042c <__udivmoddi4+0x12c>
 8000482:	4642      	mov	r2, r8
 8000484:	002f      	movs	r7, r5
 8000486:	2320      	movs	r3, #32
 8000488:	0026      	movs	r6, r4
 800048a:	4097      	lsls	r7, r2
 800048c:	1a9b      	subs	r3, r3, r2
 800048e:	40de      	lsrs	r6, r3
 8000490:	003b      	movs	r3, r7
 8000492:	4333      	orrs	r3, r6
 8000494:	e7cd      	b.n	8000432 <__udivmoddi4+0x132>
 8000496:	46c0      	nop			; (mov r8, r8)

08000498 <__aeabi_fmul>:
 8000498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800049a:	464f      	mov	r7, r9
 800049c:	4646      	mov	r6, r8
 800049e:	46d6      	mov	lr, sl
 80004a0:	0244      	lsls	r4, r0, #9
 80004a2:	0045      	lsls	r5, r0, #1
 80004a4:	b5c0      	push	{r6, r7, lr}
 80004a6:	0a64      	lsrs	r4, r4, #9
 80004a8:	1c0f      	adds	r7, r1, #0
 80004aa:	0e2d      	lsrs	r5, r5, #24
 80004ac:	0fc6      	lsrs	r6, r0, #31
 80004ae:	2d00      	cmp	r5, #0
 80004b0:	d100      	bne.n	80004b4 <__aeabi_fmul+0x1c>
 80004b2:	e08d      	b.n	80005d0 <__aeabi_fmul+0x138>
 80004b4:	2dff      	cmp	r5, #255	; 0xff
 80004b6:	d100      	bne.n	80004ba <__aeabi_fmul+0x22>
 80004b8:	e092      	b.n	80005e0 <__aeabi_fmul+0x148>
 80004ba:	2300      	movs	r3, #0
 80004bc:	2080      	movs	r0, #128	; 0x80
 80004be:	4699      	mov	r9, r3
 80004c0:	469a      	mov	sl, r3
 80004c2:	00e4      	lsls	r4, r4, #3
 80004c4:	04c0      	lsls	r0, r0, #19
 80004c6:	4304      	orrs	r4, r0
 80004c8:	3d7f      	subs	r5, #127	; 0x7f
 80004ca:	0278      	lsls	r0, r7, #9
 80004cc:	0a43      	lsrs	r3, r0, #9
 80004ce:	4698      	mov	r8, r3
 80004d0:	007b      	lsls	r3, r7, #1
 80004d2:	0e1b      	lsrs	r3, r3, #24
 80004d4:	0fff      	lsrs	r7, r7, #31
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d100      	bne.n	80004dc <__aeabi_fmul+0x44>
 80004da:	e070      	b.n	80005be <__aeabi_fmul+0x126>
 80004dc:	2bff      	cmp	r3, #255	; 0xff
 80004de:	d100      	bne.n	80004e2 <__aeabi_fmul+0x4a>
 80004e0:	e086      	b.n	80005f0 <__aeabi_fmul+0x158>
 80004e2:	4642      	mov	r2, r8
 80004e4:	00d0      	lsls	r0, r2, #3
 80004e6:	2280      	movs	r2, #128	; 0x80
 80004e8:	3b7f      	subs	r3, #127	; 0x7f
 80004ea:	18ed      	adds	r5, r5, r3
 80004ec:	2300      	movs	r3, #0
 80004ee:	04d2      	lsls	r2, r2, #19
 80004f0:	4302      	orrs	r2, r0
 80004f2:	4690      	mov	r8, r2
 80004f4:	469c      	mov	ip, r3
 80004f6:	0031      	movs	r1, r6
 80004f8:	464b      	mov	r3, r9
 80004fa:	4079      	eors	r1, r7
 80004fc:	1c68      	adds	r0, r5, #1
 80004fe:	2b0f      	cmp	r3, #15
 8000500:	d81c      	bhi.n	800053c <__aeabi_fmul+0xa4>
 8000502:	4a76      	ldr	r2, [pc, #472]	; (80006dc <__aeabi_fmul+0x244>)
 8000504:	009b      	lsls	r3, r3, #2
 8000506:	58d3      	ldr	r3, [r2, r3]
 8000508:	469f      	mov	pc, r3
 800050a:	0039      	movs	r1, r7
 800050c:	4644      	mov	r4, r8
 800050e:	46e2      	mov	sl, ip
 8000510:	4653      	mov	r3, sl
 8000512:	2b02      	cmp	r3, #2
 8000514:	d00f      	beq.n	8000536 <__aeabi_fmul+0x9e>
 8000516:	2b03      	cmp	r3, #3
 8000518:	d100      	bne.n	800051c <__aeabi_fmul+0x84>
 800051a:	e0d7      	b.n	80006cc <__aeabi_fmul+0x234>
 800051c:	2b01      	cmp	r3, #1
 800051e:	d137      	bne.n	8000590 <__aeabi_fmul+0xf8>
 8000520:	2000      	movs	r0, #0
 8000522:	2400      	movs	r4, #0
 8000524:	05c0      	lsls	r0, r0, #23
 8000526:	4320      	orrs	r0, r4
 8000528:	07c9      	lsls	r1, r1, #31
 800052a:	4308      	orrs	r0, r1
 800052c:	bce0      	pop	{r5, r6, r7}
 800052e:	46ba      	mov	sl, r7
 8000530:	46b1      	mov	r9, r6
 8000532:	46a8      	mov	r8, r5
 8000534:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000536:	20ff      	movs	r0, #255	; 0xff
 8000538:	2400      	movs	r4, #0
 800053a:	e7f3      	b.n	8000524 <__aeabi_fmul+0x8c>
 800053c:	0c26      	lsrs	r6, r4, #16
 800053e:	0424      	lsls	r4, r4, #16
 8000540:	0c22      	lsrs	r2, r4, #16
 8000542:	4644      	mov	r4, r8
 8000544:	0424      	lsls	r4, r4, #16
 8000546:	0c24      	lsrs	r4, r4, #16
 8000548:	4643      	mov	r3, r8
 800054a:	0027      	movs	r7, r4
 800054c:	0c1b      	lsrs	r3, r3, #16
 800054e:	4357      	muls	r7, r2
 8000550:	4374      	muls	r4, r6
 8000552:	435a      	muls	r2, r3
 8000554:	435e      	muls	r6, r3
 8000556:	1912      	adds	r2, r2, r4
 8000558:	0c3b      	lsrs	r3, r7, #16
 800055a:	189b      	adds	r3, r3, r2
 800055c:	429c      	cmp	r4, r3
 800055e:	d903      	bls.n	8000568 <__aeabi_fmul+0xd0>
 8000560:	2280      	movs	r2, #128	; 0x80
 8000562:	0252      	lsls	r2, r2, #9
 8000564:	4694      	mov	ip, r2
 8000566:	4466      	add	r6, ip
 8000568:	043f      	lsls	r7, r7, #16
 800056a:	041a      	lsls	r2, r3, #16
 800056c:	0c3f      	lsrs	r7, r7, #16
 800056e:	19d2      	adds	r2, r2, r7
 8000570:	0194      	lsls	r4, r2, #6
 8000572:	1e67      	subs	r7, r4, #1
 8000574:	41bc      	sbcs	r4, r7
 8000576:	0c1b      	lsrs	r3, r3, #16
 8000578:	0e92      	lsrs	r2, r2, #26
 800057a:	199b      	adds	r3, r3, r6
 800057c:	4314      	orrs	r4, r2
 800057e:	019b      	lsls	r3, r3, #6
 8000580:	431c      	orrs	r4, r3
 8000582:	011b      	lsls	r3, r3, #4
 8000584:	d400      	bmi.n	8000588 <__aeabi_fmul+0xf0>
 8000586:	e09b      	b.n	80006c0 <__aeabi_fmul+0x228>
 8000588:	2301      	movs	r3, #1
 800058a:	0862      	lsrs	r2, r4, #1
 800058c:	401c      	ands	r4, r3
 800058e:	4314      	orrs	r4, r2
 8000590:	0002      	movs	r2, r0
 8000592:	327f      	adds	r2, #127	; 0x7f
 8000594:	2a00      	cmp	r2, #0
 8000596:	dd64      	ble.n	8000662 <__aeabi_fmul+0x1ca>
 8000598:	0763      	lsls	r3, r4, #29
 800059a:	d004      	beq.n	80005a6 <__aeabi_fmul+0x10e>
 800059c:	230f      	movs	r3, #15
 800059e:	4023      	ands	r3, r4
 80005a0:	2b04      	cmp	r3, #4
 80005a2:	d000      	beq.n	80005a6 <__aeabi_fmul+0x10e>
 80005a4:	3404      	adds	r4, #4
 80005a6:	0123      	lsls	r3, r4, #4
 80005a8:	d503      	bpl.n	80005b2 <__aeabi_fmul+0x11a>
 80005aa:	0002      	movs	r2, r0
 80005ac:	4b4c      	ldr	r3, [pc, #304]	; (80006e0 <__aeabi_fmul+0x248>)
 80005ae:	3280      	adds	r2, #128	; 0x80
 80005b0:	401c      	ands	r4, r3
 80005b2:	2afe      	cmp	r2, #254	; 0xfe
 80005b4:	dcbf      	bgt.n	8000536 <__aeabi_fmul+0x9e>
 80005b6:	01a4      	lsls	r4, r4, #6
 80005b8:	0a64      	lsrs	r4, r4, #9
 80005ba:	b2d0      	uxtb	r0, r2
 80005bc:	e7b2      	b.n	8000524 <__aeabi_fmul+0x8c>
 80005be:	4643      	mov	r3, r8
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d13d      	bne.n	8000640 <__aeabi_fmul+0x1a8>
 80005c4:	464a      	mov	r2, r9
 80005c6:	3301      	adds	r3, #1
 80005c8:	431a      	orrs	r2, r3
 80005ca:	4691      	mov	r9, r2
 80005cc:	469c      	mov	ip, r3
 80005ce:	e792      	b.n	80004f6 <__aeabi_fmul+0x5e>
 80005d0:	2c00      	cmp	r4, #0
 80005d2:	d129      	bne.n	8000628 <__aeabi_fmul+0x190>
 80005d4:	2304      	movs	r3, #4
 80005d6:	4699      	mov	r9, r3
 80005d8:	3b03      	subs	r3, #3
 80005da:	2500      	movs	r5, #0
 80005dc:	469a      	mov	sl, r3
 80005de:	e774      	b.n	80004ca <__aeabi_fmul+0x32>
 80005e0:	2c00      	cmp	r4, #0
 80005e2:	d11b      	bne.n	800061c <__aeabi_fmul+0x184>
 80005e4:	2308      	movs	r3, #8
 80005e6:	4699      	mov	r9, r3
 80005e8:	3b06      	subs	r3, #6
 80005ea:	25ff      	movs	r5, #255	; 0xff
 80005ec:	469a      	mov	sl, r3
 80005ee:	e76c      	b.n	80004ca <__aeabi_fmul+0x32>
 80005f0:	4643      	mov	r3, r8
 80005f2:	35ff      	adds	r5, #255	; 0xff
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d10b      	bne.n	8000610 <__aeabi_fmul+0x178>
 80005f8:	2302      	movs	r3, #2
 80005fa:	464a      	mov	r2, r9
 80005fc:	431a      	orrs	r2, r3
 80005fe:	4691      	mov	r9, r2
 8000600:	469c      	mov	ip, r3
 8000602:	e778      	b.n	80004f6 <__aeabi_fmul+0x5e>
 8000604:	4653      	mov	r3, sl
 8000606:	0031      	movs	r1, r6
 8000608:	2b02      	cmp	r3, #2
 800060a:	d000      	beq.n	800060e <__aeabi_fmul+0x176>
 800060c:	e783      	b.n	8000516 <__aeabi_fmul+0x7e>
 800060e:	e792      	b.n	8000536 <__aeabi_fmul+0x9e>
 8000610:	2303      	movs	r3, #3
 8000612:	464a      	mov	r2, r9
 8000614:	431a      	orrs	r2, r3
 8000616:	4691      	mov	r9, r2
 8000618:	469c      	mov	ip, r3
 800061a:	e76c      	b.n	80004f6 <__aeabi_fmul+0x5e>
 800061c:	230c      	movs	r3, #12
 800061e:	4699      	mov	r9, r3
 8000620:	3b09      	subs	r3, #9
 8000622:	25ff      	movs	r5, #255	; 0xff
 8000624:	469a      	mov	sl, r3
 8000626:	e750      	b.n	80004ca <__aeabi_fmul+0x32>
 8000628:	0020      	movs	r0, r4
 800062a:	f000 fd87 	bl	800113c <__clzsi2>
 800062e:	2576      	movs	r5, #118	; 0x76
 8000630:	1f43      	subs	r3, r0, #5
 8000632:	409c      	lsls	r4, r3
 8000634:	2300      	movs	r3, #0
 8000636:	426d      	negs	r5, r5
 8000638:	4699      	mov	r9, r3
 800063a:	469a      	mov	sl, r3
 800063c:	1a2d      	subs	r5, r5, r0
 800063e:	e744      	b.n	80004ca <__aeabi_fmul+0x32>
 8000640:	4640      	mov	r0, r8
 8000642:	f000 fd7b 	bl	800113c <__clzsi2>
 8000646:	4642      	mov	r2, r8
 8000648:	1f43      	subs	r3, r0, #5
 800064a:	409a      	lsls	r2, r3
 800064c:	2300      	movs	r3, #0
 800064e:	1a2d      	subs	r5, r5, r0
 8000650:	4690      	mov	r8, r2
 8000652:	469c      	mov	ip, r3
 8000654:	3d76      	subs	r5, #118	; 0x76
 8000656:	e74e      	b.n	80004f6 <__aeabi_fmul+0x5e>
 8000658:	2480      	movs	r4, #128	; 0x80
 800065a:	2100      	movs	r1, #0
 800065c:	20ff      	movs	r0, #255	; 0xff
 800065e:	03e4      	lsls	r4, r4, #15
 8000660:	e760      	b.n	8000524 <__aeabi_fmul+0x8c>
 8000662:	2301      	movs	r3, #1
 8000664:	1a9b      	subs	r3, r3, r2
 8000666:	2b1b      	cmp	r3, #27
 8000668:	dd00      	ble.n	800066c <__aeabi_fmul+0x1d4>
 800066a:	e759      	b.n	8000520 <__aeabi_fmul+0x88>
 800066c:	0022      	movs	r2, r4
 800066e:	309e      	adds	r0, #158	; 0x9e
 8000670:	40da      	lsrs	r2, r3
 8000672:	4084      	lsls	r4, r0
 8000674:	0013      	movs	r3, r2
 8000676:	1e62      	subs	r2, r4, #1
 8000678:	4194      	sbcs	r4, r2
 800067a:	431c      	orrs	r4, r3
 800067c:	0763      	lsls	r3, r4, #29
 800067e:	d004      	beq.n	800068a <__aeabi_fmul+0x1f2>
 8000680:	230f      	movs	r3, #15
 8000682:	4023      	ands	r3, r4
 8000684:	2b04      	cmp	r3, #4
 8000686:	d000      	beq.n	800068a <__aeabi_fmul+0x1f2>
 8000688:	3404      	adds	r4, #4
 800068a:	0163      	lsls	r3, r4, #5
 800068c:	d51a      	bpl.n	80006c4 <__aeabi_fmul+0x22c>
 800068e:	2001      	movs	r0, #1
 8000690:	2400      	movs	r4, #0
 8000692:	e747      	b.n	8000524 <__aeabi_fmul+0x8c>
 8000694:	2080      	movs	r0, #128	; 0x80
 8000696:	03c0      	lsls	r0, r0, #15
 8000698:	4204      	tst	r4, r0
 800069a:	d009      	beq.n	80006b0 <__aeabi_fmul+0x218>
 800069c:	4643      	mov	r3, r8
 800069e:	4203      	tst	r3, r0
 80006a0:	d106      	bne.n	80006b0 <__aeabi_fmul+0x218>
 80006a2:	4644      	mov	r4, r8
 80006a4:	4304      	orrs	r4, r0
 80006a6:	0264      	lsls	r4, r4, #9
 80006a8:	0039      	movs	r1, r7
 80006aa:	20ff      	movs	r0, #255	; 0xff
 80006ac:	0a64      	lsrs	r4, r4, #9
 80006ae:	e739      	b.n	8000524 <__aeabi_fmul+0x8c>
 80006b0:	2080      	movs	r0, #128	; 0x80
 80006b2:	03c0      	lsls	r0, r0, #15
 80006b4:	4304      	orrs	r4, r0
 80006b6:	0264      	lsls	r4, r4, #9
 80006b8:	0031      	movs	r1, r6
 80006ba:	20ff      	movs	r0, #255	; 0xff
 80006bc:	0a64      	lsrs	r4, r4, #9
 80006be:	e731      	b.n	8000524 <__aeabi_fmul+0x8c>
 80006c0:	0028      	movs	r0, r5
 80006c2:	e765      	b.n	8000590 <__aeabi_fmul+0xf8>
 80006c4:	01a4      	lsls	r4, r4, #6
 80006c6:	2000      	movs	r0, #0
 80006c8:	0a64      	lsrs	r4, r4, #9
 80006ca:	e72b      	b.n	8000524 <__aeabi_fmul+0x8c>
 80006cc:	2080      	movs	r0, #128	; 0x80
 80006ce:	03c0      	lsls	r0, r0, #15
 80006d0:	4304      	orrs	r4, r0
 80006d2:	0264      	lsls	r4, r4, #9
 80006d4:	20ff      	movs	r0, #255	; 0xff
 80006d6:	0a64      	lsrs	r4, r4, #9
 80006d8:	e724      	b.n	8000524 <__aeabi_fmul+0x8c>
 80006da:	46c0      	nop			; (mov r8, r8)
 80006dc:	080067c0 	.word	0x080067c0
 80006e0:	f7ffffff 	.word	0xf7ffffff

080006e4 <__aeabi_fsub>:
 80006e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006e6:	46ce      	mov	lr, r9
 80006e8:	4647      	mov	r7, r8
 80006ea:	0243      	lsls	r3, r0, #9
 80006ec:	0a5b      	lsrs	r3, r3, #9
 80006ee:	024e      	lsls	r6, r1, #9
 80006f0:	00da      	lsls	r2, r3, #3
 80006f2:	4694      	mov	ip, r2
 80006f4:	0a72      	lsrs	r2, r6, #9
 80006f6:	4691      	mov	r9, r2
 80006f8:	0045      	lsls	r5, r0, #1
 80006fa:	004a      	lsls	r2, r1, #1
 80006fc:	b580      	push	{r7, lr}
 80006fe:	0e2d      	lsrs	r5, r5, #24
 8000700:	001f      	movs	r7, r3
 8000702:	0fc4      	lsrs	r4, r0, #31
 8000704:	0e12      	lsrs	r2, r2, #24
 8000706:	0fc9      	lsrs	r1, r1, #31
 8000708:	09b6      	lsrs	r6, r6, #6
 800070a:	2aff      	cmp	r2, #255	; 0xff
 800070c:	d05b      	beq.n	80007c6 <__aeabi_fsub+0xe2>
 800070e:	2001      	movs	r0, #1
 8000710:	4041      	eors	r1, r0
 8000712:	428c      	cmp	r4, r1
 8000714:	d039      	beq.n	800078a <__aeabi_fsub+0xa6>
 8000716:	1aa8      	subs	r0, r5, r2
 8000718:	2800      	cmp	r0, #0
 800071a:	dd5a      	ble.n	80007d2 <__aeabi_fsub+0xee>
 800071c:	2a00      	cmp	r2, #0
 800071e:	d06a      	beq.n	80007f6 <__aeabi_fsub+0x112>
 8000720:	2dff      	cmp	r5, #255	; 0xff
 8000722:	d100      	bne.n	8000726 <__aeabi_fsub+0x42>
 8000724:	e0d9      	b.n	80008da <__aeabi_fsub+0x1f6>
 8000726:	2280      	movs	r2, #128	; 0x80
 8000728:	04d2      	lsls	r2, r2, #19
 800072a:	4316      	orrs	r6, r2
 800072c:	281b      	cmp	r0, #27
 800072e:	dc00      	bgt.n	8000732 <__aeabi_fsub+0x4e>
 8000730:	e0e9      	b.n	8000906 <__aeabi_fsub+0x222>
 8000732:	2001      	movs	r0, #1
 8000734:	4663      	mov	r3, ip
 8000736:	1a18      	subs	r0, r3, r0
 8000738:	0143      	lsls	r3, r0, #5
 800073a:	d400      	bmi.n	800073e <__aeabi_fsub+0x5a>
 800073c:	e0b4      	b.n	80008a8 <__aeabi_fsub+0x1c4>
 800073e:	0180      	lsls	r0, r0, #6
 8000740:	0987      	lsrs	r7, r0, #6
 8000742:	0038      	movs	r0, r7
 8000744:	f000 fcfa 	bl	800113c <__clzsi2>
 8000748:	3805      	subs	r0, #5
 800074a:	4087      	lsls	r7, r0
 800074c:	4285      	cmp	r5, r0
 800074e:	dc00      	bgt.n	8000752 <__aeabi_fsub+0x6e>
 8000750:	e0cc      	b.n	80008ec <__aeabi_fsub+0x208>
 8000752:	1a2d      	subs	r5, r5, r0
 8000754:	48b5      	ldr	r0, [pc, #724]	; (8000a2c <__aeabi_fsub+0x348>)
 8000756:	4038      	ands	r0, r7
 8000758:	0743      	lsls	r3, r0, #29
 800075a:	d004      	beq.n	8000766 <__aeabi_fsub+0x82>
 800075c:	230f      	movs	r3, #15
 800075e:	4003      	ands	r3, r0
 8000760:	2b04      	cmp	r3, #4
 8000762:	d000      	beq.n	8000766 <__aeabi_fsub+0x82>
 8000764:	3004      	adds	r0, #4
 8000766:	0143      	lsls	r3, r0, #5
 8000768:	d400      	bmi.n	800076c <__aeabi_fsub+0x88>
 800076a:	e0a0      	b.n	80008ae <__aeabi_fsub+0x1ca>
 800076c:	1c6a      	adds	r2, r5, #1
 800076e:	2dfe      	cmp	r5, #254	; 0xfe
 8000770:	d100      	bne.n	8000774 <__aeabi_fsub+0x90>
 8000772:	e08d      	b.n	8000890 <__aeabi_fsub+0x1ac>
 8000774:	0180      	lsls	r0, r0, #6
 8000776:	0a47      	lsrs	r7, r0, #9
 8000778:	b2d2      	uxtb	r2, r2
 800077a:	05d0      	lsls	r0, r2, #23
 800077c:	4338      	orrs	r0, r7
 800077e:	07e4      	lsls	r4, r4, #31
 8000780:	4320      	orrs	r0, r4
 8000782:	bcc0      	pop	{r6, r7}
 8000784:	46b9      	mov	r9, r7
 8000786:	46b0      	mov	r8, r6
 8000788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800078a:	1aa8      	subs	r0, r5, r2
 800078c:	4680      	mov	r8, r0
 800078e:	2800      	cmp	r0, #0
 8000790:	dd45      	ble.n	800081e <__aeabi_fsub+0x13a>
 8000792:	2a00      	cmp	r2, #0
 8000794:	d070      	beq.n	8000878 <__aeabi_fsub+0x194>
 8000796:	2dff      	cmp	r5, #255	; 0xff
 8000798:	d100      	bne.n	800079c <__aeabi_fsub+0xb8>
 800079a:	e09e      	b.n	80008da <__aeabi_fsub+0x1f6>
 800079c:	2380      	movs	r3, #128	; 0x80
 800079e:	04db      	lsls	r3, r3, #19
 80007a0:	431e      	orrs	r6, r3
 80007a2:	4643      	mov	r3, r8
 80007a4:	2b1b      	cmp	r3, #27
 80007a6:	dc00      	bgt.n	80007aa <__aeabi_fsub+0xc6>
 80007a8:	e0d2      	b.n	8000950 <__aeabi_fsub+0x26c>
 80007aa:	2001      	movs	r0, #1
 80007ac:	4460      	add	r0, ip
 80007ae:	0143      	lsls	r3, r0, #5
 80007b0:	d57a      	bpl.n	80008a8 <__aeabi_fsub+0x1c4>
 80007b2:	3501      	adds	r5, #1
 80007b4:	2dff      	cmp	r5, #255	; 0xff
 80007b6:	d06b      	beq.n	8000890 <__aeabi_fsub+0x1ac>
 80007b8:	2301      	movs	r3, #1
 80007ba:	4a9d      	ldr	r2, [pc, #628]	; (8000a30 <__aeabi_fsub+0x34c>)
 80007bc:	4003      	ands	r3, r0
 80007be:	0840      	lsrs	r0, r0, #1
 80007c0:	4010      	ands	r0, r2
 80007c2:	4318      	orrs	r0, r3
 80007c4:	e7c8      	b.n	8000758 <__aeabi_fsub+0x74>
 80007c6:	2e00      	cmp	r6, #0
 80007c8:	d020      	beq.n	800080c <__aeabi_fsub+0x128>
 80007ca:	428c      	cmp	r4, r1
 80007cc:	d023      	beq.n	8000816 <__aeabi_fsub+0x132>
 80007ce:	0028      	movs	r0, r5
 80007d0:	38ff      	subs	r0, #255	; 0xff
 80007d2:	2800      	cmp	r0, #0
 80007d4:	d039      	beq.n	800084a <__aeabi_fsub+0x166>
 80007d6:	1b57      	subs	r7, r2, r5
 80007d8:	2d00      	cmp	r5, #0
 80007da:	d000      	beq.n	80007de <__aeabi_fsub+0xfa>
 80007dc:	e09d      	b.n	800091a <__aeabi_fsub+0x236>
 80007de:	4663      	mov	r3, ip
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d100      	bne.n	80007e6 <__aeabi_fsub+0x102>
 80007e4:	e0db      	b.n	800099e <__aeabi_fsub+0x2ba>
 80007e6:	1e7b      	subs	r3, r7, #1
 80007e8:	2f01      	cmp	r7, #1
 80007ea:	d100      	bne.n	80007ee <__aeabi_fsub+0x10a>
 80007ec:	e10d      	b.n	8000a0a <__aeabi_fsub+0x326>
 80007ee:	2fff      	cmp	r7, #255	; 0xff
 80007f0:	d071      	beq.n	80008d6 <__aeabi_fsub+0x1f2>
 80007f2:	001f      	movs	r7, r3
 80007f4:	e098      	b.n	8000928 <__aeabi_fsub+0x244>
 80007f6:	2e00      	cmp	r6, #0
 80007f8:	d100      	bne.n	80007fc <__aeabi_fsub+0x118>
 80007fa:	e0a7      	b.n	800094c <__aeabi_fsub+0x268>
 80007fc:	1e42      	subs	r2, r0, #1
 80007fe:	2801      	cmp	r0, #1
 8000800:	d100      	bne.n	8000804 <__aeabi_fsub+0x120>
 8000802:	e0e6      	b.n	80009d2 <__aeabi_fsub+0x2ee>
 8000804:	28ff      	cmp	r0, #255	; 0xff
 8000806:	d068      	beq.n	80008da <__aeabi_fsub+0x1f6>
 8000808:	0010      	movs	r0, r2
 800080a:	e78f      	b.n	800072c <__aeabi_fsub+0x48>
 800080c:	2001      	movs	r0, #1
 800080e:	4041      	eors	r1, r0
 8000810:	42a1      	cmp	r1, r4
 8000812:	d000      	beq.n	8000816 <__aeabi_fsub+0x132>
 8000814:	e77f      	b.n	8000716 <__aeabi_fsub+0x32>
 8000816:	20ff      	movs	r0, #255	; 0xff
 8000818:	4240      	negs	r0, r0
 800081a:	4680      	mov	r8, r0
 800081c:	44a8      	add	r8, r5
 800081e:	4640      	mov	r0, r8
 8000820:	2800      	cmp	r0, #0
 8000822:	d038      	beq.n	8000896 <__aeabi_fsub+0x1b2>
 8000824:	1b51      	subs	r1, r2, r5
 8000826:	2d00      	cmp	r5, #0
 8000828:	d100      	bne.n	800082c <__aeabi_fsub+0x148>
 800082a:	e0ae      	b.n	800098a <__aeabi_fsub+0x2a6>
 800082c:	2aff      	cmp	r2, #255	; 0xff
 800082e:	d100      	bne.n	8000832 <__aeabi_fsub+0x14e>
 8000830:	e0df      	b.n	80009f2 <__aeabi_fsub+0x30e>
 8000832:	2380      	movs	r3, #128	; 0x80
 8000834:	4660      	mov	r0, ip
 8000836:	04db      	lsls	r3, r3, #19
 8000838:	4318      	orrs	r0, r3
 800083a:	4684      	mov	ip, r0
 800083c:	291b      	cmp	r1, #27
 800083e:	dc00      	bgt.n	8000842 <__aeabi_fsub+0x15e>
 8000840:	e0d9      	b.n	80009f6 <__aeabi_fsub+0x312>
 8000842:	2001      	movs	r0, #1
 8000844:	0015      	movs	r5, r2
 8000846:	1980      	adds	r0, r0, r6
 8000848:	e7b1      	b.n	80007ae <__aeabi_fsub+0xca>
 800084a:	20fe      	movs	r0, #254	; 0xfe
 800084c:	1c6a      	adds	r2, r5, #1
 800084e:	4210      	tst	r0, r2
 8000850:	d171      	bne.n	8000936 <__aeabi_fsub+0x252>
 8000852:	2d00      	cmp	r5, #0
 8000854:	d000      	beq.n	8000858 <__aeabi_fsub+0x174>
 8000856:	e0a6      	b.n	80009a6 <__aeabi_fsub+0x2c2>
 8000858:	4663      	mov	r3, ip
 800085a:	2b00      	cmp	r3, #0
 800085c:	d100      	bne.n	8000860 <__aeabi_fsub+0x17c>
 800085e:	e0d9      	b.n	8000a14 <__aeabi_fsub+0x330>
 8000860:	2200      	movs	r2, #0
 8000862:	2e00      	cmp	r6, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_fsub+0x184>
 8000866:	e788      	b.n	800077a <__aeabi_fsub+0x96>
 8000868:	1b98      	subs	r0, r3, r6
 800086a:	0143      	lsls	r3, r0, #5
 800086c:	d400      	bmi.n	8000870 <__aeabi_fsub+0x18c>
 800086e:	e0e1      	b.n	8000a34 <__aeabi_fsub+0x350>
 8000870:	4663      	mov	r3, ip
 8000872:	000c      	movs	r4, r1
 8000874:	1af0      	subs	r0, r6, r3
 8000876:	e76f      	b.n	8000758 <__aeabi_fsub+0x74>
 8000878:	2e00      	cmp	r6, #0
 800087a:	d100      	bne.n	800087e <__aeabi_fsub+0x19a>
 800087c:	e0b7      	b.n	80009ee <__aeabi_fsub+0x30a>
 800087e:	0002      	movs	r2, r0
 8000880:	3a01      	subs	r2, #1
 8000882:	2801      	cmp	r0, #1
 8000884:	d100      	bne.n	8000888 <__aeabi_fsub+0x1a4>
 8000886:	e09c      	b.n	80009c2 <__aeabi_fsub+0x2de>
 8000888:	28ff      	cmp	r0, #255	; 0xff
 800088a:	d026      	beq.n	80008da <__aeabi_fsub+0x1f6>
 800088c:	4690      	mov	r8, r2
 800088e:	e788      	b.n	80007a2 <__aeabi_fsub+0xbe>
 8000890:	22ff      	movs	r2, #255	; 0xff
 8000892:	2700      	movs	r7, #0
 8000894:	e771      	b.n	800077a <__aeabi_fsub+0x96>
 8000896:	20fe      	movs	r0, #254	; 0xfe
 8000898:	1c6a      	adds	r2, r5, #1
 800089a:	4210      	tst	r0, r2
 800089c:	d064      	beq.n	8000968 <__aeabi_fsub+0x284>
 800089e:	2aff      	cmp	r2, #255	; 0xff
 80008a0:	d0f6      	beq.n	8000890 <__aeabi_fsub+0x1ac>
 80008a2:	0015      	movs	r5, r2
 80008a4:	4466      	add	r6, ip
 80008a6:	0870      	lsrs	r0, r6, #1
 80008a8:	0743      	lsls	r3, r0, #29
 80008aa:	d000      	beq.n	80008ae <__aeabi_fsub+0x1ca>
 80008ac:	e756      	b.n	800075c <__aeabi_fsub+0x78>
 80008ae:	08c3      	lsrs	r3, r0, #3
 80008b0:	2dff      	cmp	r5, #255	; 0xff
 80008b2:	d012      	beq.n	80008da <__aeabi_fsub+0x1f6>
 80008b4:	025b      	lsls	r3, r3, #9
 80008b6:	0a5f      	lsrs	r7, r3, #9
 80008b8:	b2ea      	uxtb	r2, r5
 80008ba:	e75e      	b.n	800077a <__aeabi_fsub+0x96>
 80008bc:	4662      	mov	r2, ip
 80008be:	2a00      	cmp	r2, #0
 80008c0:	d100      	bne.n	80008c4 <__aeabi_fsub+0x1e0>
 80008c2:	e096      	b.n	80009f2 <__aeabi_fsub+0x30e>
 80008c4:	2e00      	cmp	r6, #0
 80008c6:	d008      	beq.n	80008da <__aeabi_fsub+0x1f6>
 80008c8:	2280      	movs	r2, #128	; 0x80
 80008ca:	03d2      	lsls	r2, r2, #15
 80008cc:	4213      	tst	r3, r2
 80008ce:	d004      	beq.n	80008da <__aeabi_fsub+0x1f6>
 80008d0:	4648      	mov	r0, r9
 80008d2:	4210      	tst	r0, r2
 80008d4:	d101      	bne.n	80008da <__aeabi_fsub+0x1f6>
 80008d6:	000c      	movs	r4, r1
 80008d8:	464b      	mov	r3, r9
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d0d8      	beq.n	8000890 <__aeabi_fsub+0x1ac>
 80008de:	2780      	movs	r7, #128	; 0x80
 80008e0:	03ff      	lsls	r7, r7, #15
 80008e2:	431f      	orrs	r7, r3
 80008e4:	027f      	lsls	r7, r7, #9
 80008e6:	22ff      	movs	r2, #255	; 0xff
 80008e8:	0a7f      	lsrs	r7, r7, #9
 80008ea:	e746      	b.n	800077a <__aeabi_fsub+0x96>
 80008ec:	2320      	movs	r3, #32
 80008ee:	003a      	movs	r2, r7
 80008f0:	1b45      	subs	r5, r0, r5
 80008f2:	0038      	movs	r0, r7
 80008f4:	3501      	adds	r5, #1
 80008f6:	40ea      	lsrs	r2, r5
 80008f8:	1b5d      	subs	r5, r3, r5
 80008fa:	40a8      	lsls	r0, r5
 80008fc:	1e43      	subs	r3, r0, #1
 80008fe:	4198      	sbcs	r0, r3
 8000900:	2500      	movs	r5, #0
 8000902:	4310      	orrs	r0, r2
 8000904:	e728      	b.n	8000758 <__aeabi_fsub+0x74>
 8000906:	2320      	movs	r3, #32
 8000908:	1a1b      	subs	r3, r3, r0
 800090a:	0032      	movs	r2, r6
 800090c:	409e      	lsls	r6, r3
 800090e:	40c2      	lsrs	r2, r0
 8000910:	0030      	movs	r0, r6
 8000912:	1e43      	subs	r3, r0, #1
 8000914:	4198      	sbcs	r0, r3
 8000916:	4310      	orrs	r0, r2
 8000918:	e70c      	b.n	8000734 <__aeabi_fsub+0x50>
 800091a:	2aff      	cmp	r2, #255	; 0xff
 800091c:	d0db      	beq.n	80008d6 <__aeabi_fsub+0x1f2>
 800091e:	2380      	movs	r3, #128	; 0x80
 8000920:	4660      	mov	r0, ip
 8000922:	04db      	lsls	r3, r3, #19
 8000924:	4318      	orrs	r0, r3
 8000926:	4684      	mov	ip, r0
 8000928:	2f1b      	cmp	r7, #27
 800092a:	dd56      	ble.n	80009da <__aeabi_fsub+0x2f6>
 800092c:	2001      	movs	r0, #1
 800092e:	000c      	movs	r4, r1
 8000930:	0015      	movs	r5, r2
 8000932:	1a30      	subs	r0, r6, r0
 8000934:	e700      	b.n	8000738 <__aeabi_fsub+0x54>
 8000936:	4663      	mov	r3, ip
 8000938:	1b9f      	subs	r7, r3, r6
 800093a:	017b      	lsls	r3, r7, #5
 800093c:	d43d      	bmi.n	80009ba <__aeabi_fsub+0x2d6>
 800093e:	2f00      	cmp	r7, #0
 8000940:	d000      	beq.n	8000944 <__aeabi_fsub+0x260>
 8000942:	e6fe      	b.n	8000742 <__aeabi_fsub+0x5e>
 8000944:	2400      	movs	r4, #0
 8000946:	2200      	movs	r2, #0
 8000948:	2700      	movs	r7, #0
 800094a:	e716      	b.n	800077a <__aeabi_fsub+0x96>
 800094c:	0005      	movs	r5, r0
 800094e:	e7af      	b.n	80008b0 <__aeabi_fsub+0x1cc>
 8000950:	0032      	movs	r2, r6
 8000952:	4643      	mov	r3, r8
 8000954:	4641      	mov	r1, r8
 8000956:	40da      	lsrs	r2, r3
 8000958:	2320      	movs	r3, #32
 800095a:	1a5b      	subs	r3, r3, r1
 800095c:	409e      	lsls	r6, r3
 800095e:	0030      	movs	r0, r6
 8000960:	1e43      	subs	r3, r0, #1
 8000962:	4198      	sbcs	r0, r3
 8000964:	4310      	orrs	r0, r2
 8000966:	e721      	b.n	80007ac <__aeabi_fsub+0xc8>
 8000968:	2d00      	cmp	r5, #0
 800096a:	d1a7      	bne.n	80008bc <__aeabi_fsub+0x1d8>
 800096c:	4663      	mov	r3, ip
 800096e:	2b00      	cmp	r3, #0
 8000970:	d059      	beq.n	8000a26 <__aeabi_fsub+0x342>
 8000972:	2200      	movs	r2, #0
 8000974:	2e00      	cmp	r6, #0
 8000976:	d100      	bne.n	800097a <__aeabi_fsub+0x296>
 8000978:	e6ff      	b.n	800077a <__aeabi_fsub+0x96>
 800097a:	0030      	movs	r0, r6
 800097c:	4460      	add	r0, ip
 800097e:	0143      	lsls	r3, r0, #5
 8000980:	d592      	bpl.n	80008a8 <__aeabi_fsub+0x1c4>
 8000982:	4b2a      	ldr	r3, [pc, #168]	; (8000a2c <__aeabi_fsub+0x348>)
 8000984:	3501      	adds	r5, #1
 8000986:	4018      	ands	r0, r3
 8000988:	e78e      	b.n	80008a8 <__aeabi_fsub+0x1c4>
 800098a:	4663      	mov	r3, ip
 800098c:	2b00      	cmp	r3, #0
 800098e:	d047      	beq.n	8000a20 <__aeabi_fsub+0x33c>
 8000990:	1e4b      	subs	r3, r1, #1
 8000992:	2901      	cmp	r1, #1
 8000994:	d015      	beq.n	80009c2 <__aeabi_fsub+0x2de>
 8000996:	29ff      	cmp	r1, #255	; 0xff
 8000998:	d02b      	beq.n	80009f2 <__aeabi_fsub+0x30e>
 800099a:	0019      	movs	r1, r3
 800099c:	e74e      	b.n	800083c <__aeabi_fsub+0x158>
 800099e:	000c      	movs	r4, r1
 80009a0:	464b      	mov	r3, r9
 80009a2:	003d      	movs	r5, r7
 80009a4:	e784      	b.n	80008b0 <__aeabi_fsub+0x1cc>
 80009a6:	4662      	mov	r2, ip
 80009a8:	2a00      	cmp	r2, #0
 80009aa:	d18b      	bne.n	80008c4 <__aeabi_fsub+0x1e0>
 80009ac:	2e00      	cmp	r6, #0
 80009ae:	d192      	bne.n	80008d6 <__aeabi_fsub+0x1f2>
 80009b0:	2780      	movs	r7, #128	; 0x80
 80009b2:	2400      	movs	r4, #0
 80009b4:	22ff      	movs	r2, #255	; 0xff
 80009b6:	03ff      	lsls	r7, r7, #15
 80009b8:	e6df      	b.n	800077a <__aeabi_fsub+0x96>
 80009ba:	4663      	mov	r3, ip
 80009bc:	000c      	movs	r4, r1
 80009be:	1af7      	subs	r7, r6, r3
 80009c0:	e6bf      	b.n	8000742 <__aeabi_fsub+0x5e>
 80009c2:	0030      	movs	r0, r6
 80009c4:	4460      	add	r0, ip
 80009c6:	2501      	movs	r5, #1
 80009c8:	0143      	lsls	r3, r0, #5
 80009ca:	d400      	bmi.n	80009ce <__aeabi_fsub+0x2ea>
 80009cc:	e76c      	b.n	80008a8 <__aeabi_fsub+0x1c4>
 80009ce:	2502      	movs	r5, #2
 80009d0:	e6f2      	b.n	80007b8 <__aeabi_fsub+0xd4>
 80009d2:	4663      	mov	r3, ip
 80009d4:	2501      	movs	r5, #1
 80009d6:	1b98      	subs	r0, r3, r6
 80009d8:	e6ae      	b.n	8000738 <__aeabi_fsub+0x54>
 80009da:	2320      	movs	r3, #32
 80009dc:	4664      	mov	r4, ip
 80009de:	4660      	mov	r0, ip
 80009e0:	40fc      	lsrs	r4, r7
 80009e2:	1bdf      	subs	r7, r3, r7
 80009e4:	40b8      	lsls	r0, r7
 80009e6:	1e43      	subs	r3, r0, #1
 80009e8:	4198      	sbcs	r0, r3
 80009ea:	4320      	orrs	r0, r4
 80009ec:	e79f      	b.n	800092e <__aeabi_fsub+0x24a>
 80009ee:	0005      	movs	r5, r0
 80009f0:	e75e      	b.n	80008b0 <__aeabi_fsub+0x1cc>
 80009f2:	464b      	mov	r3, r9
 80009f4:	e771      	b.n	80008da <__aeabi_fsub+0x1f6>
 80009f6:	2320      	movs	r3, #32
 80009f8:	4665      	mov	r5, ip
 80009fa:	4660      	mov	r0, ip
 80009fc:	40cd      	lsrs	r5, r1
 80009fe:	1a59      	subs	r1, r3, r1
 8000a00:	4088      	lsls	r0, r1
 8000a02:	1e43      	subs	r3, r0, #1
 8000a04:	4198      	sbcs	r0, r3
 8000a06:	4328      	orrs	r0, r5
 8000a08:	e71c      	b.n	8000844 <__aeabi_fsub+0x160>
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	000c      	movs	r4, r1
 8000a0e:	2501      	movs	r5, #1
 8000a10:	1af0      	subs	r0, r6, r3
 8000a12:	e691      	b.n	8000738 <__aeabi_fsub+0x54>
 8000a14:	2e00      	cmp	r6, #0
 8000a16:	d095      	beq.n	8000944 <__aeabi_fsub+0x260>
 8000a18:	000c      	movs	r4, r1
 8000a1a:	464f      	mov	r7, r9
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	e6ac      	b.n	800077a <__aeabi_fsub+0x96>
 8000a20:	464b      	mov	r3, r9
 8000a22:	000d      	movs	r5, r1
 8000a24:	e744      	b.n	80008b0 <__aeabi_fsub+0x1cc>
 8000a26:	464f      	mov	r7, r9
 8000a28:	2200      	movs	r2, #0
 8000a2a:	e6a6      	b.n	800077a <__aeabi_fsub+0x96>
 8000a2c:	fbffffff 	.word	0xfbffffff
 8000a30:	7dffffff 	.word	0x7dffffff
 8000a34:	2800      	cmp	r0, #0
 8000a36:	d000      	beq.n	8000a3a <__aeabi_fsub+0x356>
 8000a38:	e736      	b.n	80008a8 <__aeabi_fsub+0x1c4>
 8000a3a:	2400      	movs	r4, #0
 8000a3c:	2700      	movs	r7, #0
 8000a3e:	e69c      	b.n	800077a <__aeabi_fsub+0x96>

08000a40 <__aeabi_f2iz>:
 8000a40:	0241      	lsls	r1, r0, #9
 8000a42:	0042      	lsls	r2, r0, #1
 8000a44:	0fc3      	lsrs	r3, r0, #31
 8000a46:	0a49      	lsrs	r1, r1, #9
 8000a48:	2000      	movs	r0, #0
 8000a4a:	0e12      	lsrs	r2, r2, #24
 8000a4c:	2a7e      	cmp	r2, #126	; 0x7e
 8000a4e:	dd03      	ble.n	8000a58 <__aeabi_f2iz+0x18>
 8000a50:	2a9d      	cmp	r2, #157	; 0x9d
 8000a52:	dd02      	ble.n	8000a5a <__aeabi_f2iz+0x1a>
 8000a54:	4a09      	ldr	r2, [pc, #36]	; (8000a7c <__aeabi_f2iz+0x3c>)
 8000a56:	1898      	adds	r0, r3, r2
 8000a58:	4770      	bx	lr
 8000a5a:	2080      	movs	r0, #128	; 0x80
 8000a5c:	0400      	lsls	r0, r0, #16
 8000a5e:	4301      	orrs	r1, r0
 8000a60:	2a95      	cmp	r2, #149	; 0x95
 8000a62:	dc07      	bgt.n	8000a74 <__aeabi_f2iz+0x34>
 8000a64:	2096      	movs	r0, #150	; 0x96
 8000a66:	1a82      	subs	r2, r0, r2
 8000a68:	40d1      	lsrs	r1, r2
 8000a6a:	4248      	negs	r0, r1
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d1f3      	bne.n	8000a58 <__aeabi_f2iz+0x18>
 8000a70:	0008      	movs	r0, r1
 8000a72:	e7f1      	b.n	8000a58 <__aeabi_f2iz+0x18>
 8000a74:	3a96      	subs	r2, #150	; 0x96
 8000a76:	4091      	lsls	r1, r2
 8000a78:	e7f7      	b.n	8000a6a <__aeabi_f2iz+0x2a>
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	7fffffff 	.word	0x7fffffff

08000a80 <__aeabi_dmul>:
 8000a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a82:	4657      	mov	r7, sl
 8000a84:	464e      	mov	r6, r9
 8000a86:	4645      	mov	r5, r8
 8000a88:	46de      	mov	lr, fp
 8000a8a:	b5e0      	push	{r5, r6, r7, lr}
 8000a8c:	4698      	mov	r8, r3
 8000a8e:	030c      	lsls	r4, r1, #12
 8000a90:	004b      	lsls	r3, r1, #1
 8000a92:	0006      	movs	r6, r0
 8000a94:	4692      	mov	sl, r2
 8000a96:	b087      	sub	sp, #28
 8000a98:	0b24      	lsrs	r4, r4, #12
 8000a9a:	0d5b      	lsrs	r3, r3, #21
 8000a9c:	0fcf      	lsrs	r7, r1, #31
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d100      	bne.n	8000aa4 <__aeabi_dmul+0x24>
 8000aa2:	e15c      	b.n	8000d5e <__aeabi_dmul+0x2de>
 8000aa4:	4ad9      	ldr	r2, [pc, #868]	; (8000e0c <__aeabi_dmul+0x38c>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d100      	bne.n	8000aac <__aeabi_dmul+0x2c>
 8000aaa:	e175      	b.n	8000d98 <__aeabi_dmul+0x318>
 8000aac:	0f42      	lsrs	r2, r0, #29
 8000aae:	00e4      	lsls	r4, r4, #3
 8000ab0:	4314      	orrs	r4, r2
 8000ab2:	2280      	movs	r2, #128	; 0x80
 8000ab4:	0412      	lsls	r2, r2, #16
 8000ab6:	4314      	orrs	r4, r2
 8000ab8:	4ad5      	ldr	r2, [pc, #852]	; (8000e10 <__aeabi_dmul+0x390>)
 8000aba:	00c5      	lsls	r5, r0, #3
 8000abc:	4694      	mov	ip, r2
 8000abe:	4463      	add	r3, ip
 8000ac0:	9300      	str	r3, [sp, #0]
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	4699      	mov	r9, r3
 8000ac6:	469b      	mov	fp, r3
 8000ac8:	4643      	mov	r3, r8
 8000aca:	4642      	mov	r2, r8
 8000acc:	031e      	lsls	r6, r3, #12
 8000ace:	0fd2      	lsrs	r2, r2, #31
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	4650      	mov	r0, sl
 8000ad4:	4690      	mov	r8, r2
 8000ad6:	0b36      	lsrs	r6, r6, #12
 8000ad8:	0d5b      	lsrs	r3, r3, #21
 8000ada:	d100      	bne.n	8000ade <__aeabi_dmul+0x5e>
 8000adc:	e120      	b.n	8000d20 <__aeabi_dmul+0x2a0>
 8000ade:	4acb      	ldr	r2, [pc, #812]	; (8000e0c <__aeabi_dmul+0x38c>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d100      	bne.n	8000ae6 <__aeabi_dmul+0x66>
 8000ae4:	e162      	b.n	8000dac <__aeabi_dmul+0x32c>
 8000ae6:	49ca      	ldr	r1, [pc, #808]	; (8000e10 <__aeabi_dmul+0x390>)
 8000ae8:	0f42      	lsrs	r2, r0, #29
 8000aea:	468c      	mov	ip, r1
 8000aec:	9900      	ldr	r1, [sp, #0]
 8000aee:	4463      	add	r3, ip
 8000af0:	00f6      	lsls	r6, r6, #3
 8000af2:	468c      	mov	ip, r1
 8000af4:	4316      	orrs	r6, r2
 8000af6:	2280      	movs	r2, #128	; 0x80
 8000af8:	449c      	add	ip, r3
 8000afa:	0412      	lsls	r2, r2, #16
 8000afc:	4663      	mov	r3, ip
 8000afe:	4316      	orrs	r6, r2
 8000b00:	00c2      	lsls	r2, r0, #3
 8000b02:	2000      	movs	r0, #0
 8000b04:	9300      	str	r3, [sp, #0]
 8000b06:	9900      	ldr	r1, [sp, #0]
 8000b08:	4643      	mov	r3, r8
 8000b0a:	3101      	adds	r1, #1
 8000b0c:	468c      	mov	ip, r1
 8000b0e:	4649      	mov	r1, r9
 8000b10:	407b      	eors	r3, r7
 8000b12:	9301      	str	r3, [sp, #4]
 8000b14:	290f      	cmp	r1, #15
 8000b16:	d826      	bhi.n	8000b66 <__aeabi_dmul+0xe6>
 8000b18:	4bbe      	ldr	r3, [pc, #760]	; (8000e14 <__aeabi_dmul+0x394>)
 8000b1a:	0089      	lsls	r1, r1, #2
 8000b1c:	5859      	ldr	r1, [r3, r1]
 8000b1e:	468f      	mov	pc, r1
 8000b20:	4643      	mov	r3, r8
 8000b22:	9301      	str	r3, [sp, #4]
 8000b24:	0034      	movs	r4, r6
 8000b26:	0015      	movs	r5, r2
 8000b28:	4683      	mov	fp, r0
 8000b2a:	465b      	mov	r3, fp
 8000b2c:	2b02      	cmp	r3, #2
 8000b2e:	d016      	beq.n	8000b5e <__aeabi_dmul+0xde>
 8000b30:	2b03      	cmp	r3, #3
 8000b32:	d100      	bne.n	8000b36 <__aeabi_dmul+0xb6>
 8000b34:	e203      	b.n	8000f3e <__aeabi_dmul+0x4be>
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d000      	beq.n	8000b3c <__aeabi_dmul+0xbc>
 8000b3a:	e0cd      	b.n	8000cd8 <__aeabi_dmul+0x258>
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2400      	movs	r4, #0
 8000b40:	2500      	movs	r5, #0
 8000b42:	9b01      	ldr	r3, [sp, #4]
 8000b44:	0512      	lsls	r2, r2, #20
 8000b46:	4322      	orrs	r2, r4
 8000b48:	07db      	lsls	r3, r3, #31
 8000b4a:	431a      	orrs	r2, r3
 8000b4c:	0028      	movs	r0, r5
 8000b4e:	0011      	movs	r1, r2
 8000b50:	b007      	add	sp, #28
 8000b52:	bcf0      	pop	{r4, r5, r6, r7}
 8000b54:	46bb      	mov	fp, r7
 8000b56:	46b2      	mov	sl, r6
 8000b58:	46a9      	mov	r9, r5
 8000b5a:	46a0      	mov	r8, r4
 8000b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b5e:	2400      	movs	r4, #0
 8000b60:	2500      	movs	r5, #0
 8000b62:	4aaa      	ldr	r2, [pc, #680]	; (8000e0c <__aeabi_dmul+0x38c>)
 8000b64:	e7ed      	b.n	8000b42 <__aeabi_dmul+0xc2>
 8000b66:	0c28      	lsrs	r0, r5, #16
 8000b68:	042d      	lsls	r5, r5, #16
 8000b6a:	0c2d      	lsrs	r5, r5, #16
 8000b6c:	002b      	movs	r3, r5
 8000b6e:	0c11      	lsrs	r1, r2, #16
 8000b70:	0412      	lsls	r2, r2, #16
 8000b72:	0c12      	lsrs	r2, r2, #16
 8000b74:	4353      	muls	r3, r2
 8000b76:	4698      	mov	r8, r3
 8000b78:	0013      	movs	r3, r2
 8000b7a:	002f      	movs	r7, r5
 8000b7c:	4343      	muls	r3, r0
 8000b7e:	4699      	mov	r9, r3
 8000b80:	434f      	muls	r7, r1
 8000b82:	444f      	add	r7, r9
 8000b84:	46bb      	mov	fp, r7
 8000b86:	4647      	mov	r7, r8
 8000b88:	000b      	movs	r3, r1
 8000b8a:	0c3f      	lsrs	r7, r7, #16
 8000b8c:	46ba      	mov	sl, r7
 8000b8e:	4343      	muls	r3, r0
 8000b90:	44da      	add	sl, fp
 8000b92:	9302      	str	r3, [sp, #8]
 8000b94:	45d1      	cmp	r9, sl
 8000b96:	d904      	bls.n	8000ba2 <__aeabi_dmul+0x122>
 8000b98:	2780      	movs	r7, #128	; 0x80
 8000b9a:	027f      	lsls	r7, r7, #9
 8000b9c:	46b9      	mov	r9, r7
 8000b9e:	444b      	add	r3, r9
 8000ba0:	9302      	str	r3, [sp, #8]
 8000ba2:	4653      	mov	r3, sl
 8000ba4:	0c1b      	lsrs	r3, r3, #16
 8000ba6:	469b      	mov	fp, r3
 8000ba8:	4653      	mov	r3, sl
 8000baa:	041f      	lsls	r7, r3, #16
 8000bac:	4643      	mov	r3, r8
 8000bae:	041b      	lsls	r3, r3, #16
 8000bb0:	0c1b      	lsrs	r3, r3, #16
 8000bb2:	4698      	mov	r8, r3
 8000bb4:	003b      	movs	r3, r7
 8000bb6:	4443      	add	r3, r8
 8000bb8:	9304      	str	r3, [sp, #16]
 8000bba:	0c33      	lsrs	r3, r6, #16
 8000bbc:	0436      	lsls	r6, r6, #16
 8000bbe:	0c36      	lsrs	r6, r6, #16
 8000bc0:	4698      	mov	r8, r3
 8000bc2:	0033      	movs	r3, r6
 8000bc4:	4343      	muls	r3, r0
 8000bc6:	4699      	mov	r9, r3
 8000bc8:	4643      	mov	r3, r8
 8000bca:	4343      	muls	r3, r0
 8000bcc:	002f      	movs	r7, r5
 8000bce:	469a      	mov	sl, r3
 8000bd0:	4643      	mov	r3, r8
 8000bd2:	4377      	muls	r7, r6
 8000bd4:	435d      	muls	r5, r3
 8000bd6:	0c38      	lsrs	r0, r7, #16
 8000bd8:	444d      	add	r5, r9
 8000bda:	1945      	adds	r5, r0, r5
 8000bdc:	45a9      	cmp	r9, r5
 8000bde:	d903      	bls.n	8000be8 <__aeabi_dmul+0x168>
 8000be0:	2380      	movs	r3, #128	; 0x80
 8000be2:	025b      	lsls	r3, r3, #9
 8000be4:	4699      	mov	r9, r3
 8000be6:	44ca      	add	sl, r9
 8000be8:	043f      	lsls	r7, r7, #16
 8000bea:	0c28      	lsrs	r0, r5, #16
 8000bec:	0c3f      	lsrs	r7, r7, #16
 8000bee:	042d      	lsls	r5, r5, #16
 8000bf0:	19ed      	adds	r5, r5, r7
 8000bf2:	0c27      	lsrs	r7, r4, #16
 8000bf4:	0424      	lsls	r4, r4, #16
 8000bf6:	0c24      	lsrs	r4, r4, #16
 8000bf8:	0003      	movs	r3, r0
 8000bfa:	0020      	movs	r0, r4
 8000bfc:	4350      	muls	r0, r2
 8000bfe:	437a      	muls	r2, r7
 8000c00:	4691      	mov	r9, r2
 8000c02:	003a      	movs	r2, r7
 8000c04:	4453      	add	r3, sl
 8000c06:	9305      	str	r3, [sp, #20]
 8000c08:	0c03      	lsrs	r3, r0, #16
 8000c0a:	469a      	mov	sl, r3
 8000c0c:	434a      	muls	r2, r1
 8000c0e:	4361      	muls	r1, r4
 8000c10:	4449      	add	r1, r9
 8000c12:	4451      	add	r1, sl
 8000c14:	44ab      	add	fp, r5
 8000c16:	4589      	cmp	r9, r1
 8000c18:	d903      	bls.n	8000c22 <__aeabi_dmul+0x1a2>
 8000c1a:	2380      	movs	r3, #128	; 0x80
 8000c1c:	025b      	lsls	r3, r3, #9
 8000c1e:	4699      	mov	r9, r3
 8000c20:	444a      	add	r2, r9
 8000c22:	0400      	lsls	r0, r0, #16
 8000c24:	0c0b      	lsrs	r3, r1, #16
 8000c26:	0c00      	lsrs	r0, r0, #16
 8000c28:	0409      	lsls	r1, r1, #16
 8000c2a:	1809      	adds	r1, r1, r0
 8000c2c:	0020      	movs	r0, r4
 8000c2e:	4699      	mov	r9, r3
 8000c30:	4643      	mov	r3, r8
 8000c32:	4370      	muls	r0, r6
 8000c34:	435c      	muls	r4, r3
 8000c36:	437e      	muls	r6, r7
 8000c38:	435f      	muls	r7, r3
 8000c3a:	0c03      	lsrs	r3, r0, #16
 8000c3c:	4698      	mov	r8, r3
 8000c3e:	19a4      	adds	r4, r4, r6
 8000c40:	4444      	add	r4, r8
 8000c42:	444a      	add	r2, r9
 8000c44:	9703      	str	r7, [sp, #12]
 8000c46:	42a6      	cmp	r6, r4
 8000c48:	d904      	bls.n	8000c54 <__aeabi_dmul+0x1d4>
 8000c4a:	2380      	movs	r3, #128	; 0x80
 8000c4c:	025b      	lsls	r3, r3, #9
 8000c4e:	4698      	mov	r8, r3
 8000c50:	4447      	add	r7, r8
 8000c52:	9703      	str	r7, [sp, #12]
 8000c54:	0423      	lsls	r3, r4, #16
 8000c56:	9e02      	ldr	r6, [sp, #8]
 8000c58:	469a      	mov	sl, r3
 8000c5a:	9b05      	ldr	r3, [sp, #20]
 8000c5c:	445e      	add	r6, fp
 8000c5e:	4698      	mov	r8, r3
 8000c60:	42ae      	cmp	r6, r5
 8000c62:	41ad      	sbcs	r5, r5
 8000c64:	1876      	adds	r6, r6, r1
 8000c66:	428e      	cmp	r6, r1
 8000c68:	4189      	sbcs	r1, r1
 8000c6a:	0400      	lsls	r0, r0, #16
 8000c6c:	0c00      	lsrs	r0, r0, #16
 8000c6e:	4450      	add	r0, sl
 8000c70:	4440      	add	r0, r8
 8000c72:	426d      	negs	r5, r5
 8000c74:	1947      	adds	r7, r0, r5
 8000c76:	46b8      	mov	r8, r7
 8000c78:	4693      	mov	fp, r2
 8000c7a:	4249      	negs	r1, r1
 8000c7c:	4689      	mov	r9, r1
 8000c7e:	44c3      	add	fp, r8
 8000c80:	44d9      	add	r9, fp
 8000c82:	4298      	cmp	r0, r3
 8000c84:	4180      	sbcs	r0, r0
 8000c86:	45a8      	cmp	r8, r5
 8000c88:	41ad      	sbcs	r5, r5
 8000c8a:	4593      	cmp	fp, r2
 8000c8c:	4192      	sbcs	r2, r2
 8000c8e:	4589      	cmp	r9, r1
 8000c90:	4189      	sbcs	r1, r1
 8000c92:	426d      	negs	r5, r5
 8000c94:	4240      	negs	r0, r0
 8000c96:	4328      	orrs	r0, r5
 8000c98:	0c24      	lsrs	r4, r4, #16
 8000c9a:	4252      	negs	r2, r2
 8000c9c:	4249      	negs	r1, r1
 8000c9e:	430a      	orrs	r2, r1
 8000ca0:	9b03      	ldr	r3, [sp, #12]
 8000ca2:	1900      	adds	r0, r0, r4
 8000ca4:	1880      	adds	r0, r0, r2
 8000ca6:	18c7      	adds	r7, r0, r3
 8000ca8:	464b      	mov	r3, r9
 8000caa:	0ddc      	lsrs	r4, r3, #23
 8000cac:	9b04      	ldr	r3, [sp, #16]
 8000cae:	0275      	lsls	r5, r6, #9
 8000cb0:	431d      	orrs	r5, r3
 8000cb2:	1e6a      	subs	r2, r5, #1
 8000cb4:	4195      	sbcs	r5, r2
 8000cb6:	464b      	mov	r3, r9
 8000cb8:	0df6      	lsrs	r6, r6, #23
 8000cba:	027f      	lsls	r7, r7, #9
 8000cbc:	4335      	orrs	r5, r6
 8000cbe:	025a      	lsls	r2, r3, #9
 8000cc0:	433c      	orrs	r4, r7
 8000cc2:	4315      	orrs	r5, r2
 8000cc4:	01fb      	lsls	r3, r7, #7
 8000cc6:	d400      	bmi.n	8000cca <__aeabi_dmul+0x24a>
 8000cc8:	e11c      	b.n	8000f04 <__aeabi_dmul+0x484>
 8000cca:	2101      	movs	r1, #1
 8000ccc:	086a      	lsrs	r2, r5, #1
 8000cce:	400d      	ands	r5, r1
 8000cd0:	4315      	orrs	r5, r2
 8000cd2:	07e2      	lsls	r2, r4, #31
 8000cd4:	4315      	orrs	r5, r2
 8000cd6:	0864      	lsrs	r4, r4, #1
 8000cd8:	494f      	ldr	r1, [pc, #316]	; (8000e18 <__aeabi_dmul+0x398>)
 8000cda:	4461      	add	r1, ip
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	dc00      	bgt.n	8000ce2 <__aeabi_dmul+0x262>
 8000ce0:	e0b0      	b.n	8000e44 <__aeabi_dmul+0x3c4>
 8000ce2:	076b      	lsls	r3, r5, #29
 8000ce4:	d009      	beq.n	8000cfa <__aeabi_dmul+0x27a>
 8000ce6:	220f      	movs	r2, #15
 8000ce8:	402a      	ands	r2, r5
 8000cea:	2a04      	cmp	r2, #4
 8000cec:	d005      	beq.n	8000cfa <__aeabi_dmul+0x27a>
 8000cee:	1d2a      	adds	r2, r5, #4
 8000cf0:	42aa      	cmp	r2, r5
 8000cf2:	41ad      	sbcs	r5, r5
 8000cf4:	426d      	negs	r5, r5
 8000cf6:	1964      	adds	r4, r4, r5
 8000cf8:	0015      	movs	r5, r2
 8000cfa:	01e3      	lsls	r3, r4, #7
 8000cfc:	d504      	bpl.n	8000d08 <__aeabi_dmul+0x288>
 8000cfe:	2180      	movs	r1, #128	; 0x80
 8000d00:	4a46      	ldr	r2, [pc, #280]	; (8000e1c <__aeabi_dmul+0x39c>)
 8000d02:	00c9      	lsls	r1, r1, #3
 8000d04:	4014      	ands	r4, r2
 8000d06:	4461      	add	r1, ip
 8000d08:	4a45      	ldr	r2, [pc, #276]	; (8000e20 <__aeabi_dmul+0x3a0>)
 8000d0a:	4291      	cmp	r1, r2
 8000d0c:	dd00      	ble.n	8000d10 <__aeabi_dmul+0x290>
 8000d0e:	e726      	b.n	8000b5e <__aeabi_dmul+0xde>
 8000d10:	0762      	lsls	r2, r4, #29
 8000d12:	08ed      	lsrs	r5, r5, #3
 8000d14:	0264      	lsls	r4, r4, #9
 8000d16:	0549      	lsls	r1, r1, #21
 8000d18:	4315      	orrs	r5, r2
 8000d1a:	0b24      	lsrs	r4, r4, #12
 8000d1c:	0d4a      	lsrs	r2, r1, #21
 8000d1e:	e710      	b.n	8000b42 <__aeabi_dmul+0xc2>
 8000d20:	4652      	mov	r2, sl
 8000d22:	4332      	orrs	r2, r6
 8000d24:	d100      	bne.n	8000d28 <__aeabi_dmul+0x2a8>
 8000d26:	e07f      	b.n	8000e28 <__aeabi_dmul+0x3a8>
 8000d28:	2e00      	cmp	r6, #0
 8000d2a:	d100      	bne.n	8000d2e <__aeabi_dmul+0x2ae>
 8000d2c:	e0dc      	b.n	8000ee8 <__aeabi_dmul+0x468>
 8000d2e:	0030      	movs	r0, r6
 8000d30:	f000 fa04 	bl	800113c <__clzsi2>
 8000d34:	0002      	movs	r2, r0
 8000d36:	3a0b      	subs	r2, #11
 8000d38:	231d      	movs	r3, #29
 8000d3a:	0001      	movs	r1, r0
 8000d3c:	1a9b      	subs	r3, r3, r2
 8000d3e:	4652      	mov	r2, sl
 8000d40:	3908      	subs	r1, #8
 8000d42:	40da      	lsrs	r2, r3
 8000d44:	408e      	lsls	r6, r1
 8000d46:	4316      	orrs	r6, r2
 8000d48:	4652      	mov	r2, sl
 8000d4a:	408a      	lsls	r2, r1
 8000d4c:	9b00      	ldr	r3, [sp, #0]
 8000d4e:	4935      	ldr	r1, [pc, #212]	; (8000e24 <__aeabi_dmul+0x3a4>)
 8000d50:	1a18      	subs	r0, r3, r0
 8000d52:	0003      	movs	r3, r0
 8000d54:	468c      	mov	ip, r1
 8000d56:	4463      	add	r3, ip
 8000d58:	2000      	movs	r0, #0
 8000d5a:	9300      	str	r3, [sp, #0]
 8000d5c:	e6d3      	b.n	8000b06 <__aeabi_dmul+0x86>
 8000d5e:	0025      	movs	r5, r4
 8000d60:	4305      	orrs	r5, r0
 8000d62:	d04a      	beq.n	8000dfa <__aeabi_dmul+0x37a>
 8000d64:	2c00      	cmp	r4, #0
 8000d66:	d100      	bne.n	8000d6a <__aeabi_dmul+0x2ea>
 8000d68:	e0b0      	b.n	8000ecc <__aeabi_dmul+0x44c>
 8000d6a:	0020      	movs	r0, r4
 8000d6c:	f000 f9e6 	bl	800113c <__clzsi2>
 8000d70:	0001      	movs	r1, r0
 8000d72:	0002      	movs	r2, r0
 8000d74:	390b      	subs	r1, #11
 8000d76:	231d      	movs	r3, #29
 8000d78:	0010      	movs	r0, r2
 8000d7a:	1a5b      	subs	r3, r3, r1
 8000d7c:	0031      	movs	r1, r6
 8000d7e:	0035      	movs	r5, r6
 8000d80:	3808      	subs	r0, #8
 8000d82:	4084      	lsls	r4, r0
 8000d84:	40d9      	lsrs	r1, r3
 8000d86:	4085      	lsls	r5, r0
 8000d88:	430c      	orrs	r4, r1
 8000d8a:	4826      	ldr	r0, [pc, #152]	; (8000e24 <__aeabi_dmul+0x3a4>)
 8000d8c:	1a83      	subs	r3, r0, r2
 8000d8e:	9300      	str	r3, [sp, #0]
 8000d90:	2300      	movs	r3, #0
 8000d92:	4699      	mov	r9, r3
 8000d94:	469b      	mov	fp, r3
 8000d96:	e697      	b.n	8000ac8 <__aeabi_dmul+0x48>
 8000d98:	0005      	movs	r5, r0
 8000d9a:	4325      	orrs	r5, r4
 8000d9c:	d126      	bne.n	8000dec <__aeabi_dmul+0x36c>
 8000d9e:	2208      	movs	r2, #8
 8000da0:	9300      	str	r3, [sp, #0]
 8000da2:	2302      	movs	r3, #2
 8000da4:	2400      	movs	r4, #0
 8000da6:	4691      	mov	r9, r2
 8000da8:	469b      	mov	fp, r3
 8000daa:	e68d      	b.n	8000ac8 <__aeabi_dmul+0x48>
 8000dac:	4652      	mov	r2, sl
 8000dae:	9b00      	ldr	r3, [sp, #0]
 8000db0:	4332      	orrs	r2, r6
 8000db2:	d110      	bne.n	8000dd6 <__aeabi_dmul+0x356>
 8000db4:	4915      	ldr	r1, [pc, #84]	; (8000e0c <__aeabi_dmul+0x38c>)
 8000db6:	2600      	movs	r6, #0
 8000db8:	468c      	mov	ip, r1
 8000dba:	4463      	add	r3, ip
 8000dbc:	4649      	mov	r1, r9
 8000dbe:	9300      	str	r3, [sp, #0]
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	4319      	orrs	r1, r3
 8000dc4:	4689      	mov	r9, r1
 8000dc6:	2002      	movs	r0, #2
 8000dc8:	e69d      	b.n	8000b06 <__aeabi_dmul+0x86>
 8000dca:	465b      	mov	r3, fp
 8000dcc:	9701      	str	r7, [sp, #4]
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d000      	beq.n	8000dd4 <__aeabi_dmul+0x354>
 8000dd2:	e6ad      	b.n	8000b30 <__aeabi_dmul+0xb0>
 8000dd4:	e6c3      	b.n	8000b5e <__aeabi_dmul+0xde>
 8000dd6:	4a0d      	ldr	r2, [pc, #52]	; (8000e0c <__aeabi_dmul+0x38c>)
 8000dd8:	2003      	movs	r0, #3
 8000dda:	4694      	mov	ip, r2
 8000ddc:	4463      	add	r3, ip
 8000dde:	464a      	mov	r2, r9
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	2303      	movs	r3, #3
 8000de4:	431a      	orrs	r2, r3
 8000de6:	4691      	mov	r9, r2
 8000de8:	4652      	mov	r2, sl
 8000dea:	e68c      	b.n	8000b06 <__aeabi_dmul+0x86>
 8000dec:	220c      	movs	r2, #12
 8000dee:	9300      	str	r3, [sp, #0]
 8000df0:	2303      	movs	r3, #3
 8000df2:	0005      	movs	r5, r0
 8000df4:	4691      	mov	r9, r2
 8000df6:	469b      	mov	fp, r3
 8000df8:	e666      	b.n	8000ac8 <__aeabi_dmul+0x48>
 8000dfa:	2304      	movs	r3, #4
 8000dfc:	4699      	mov	r9, r3
 8000dfe:	2300      	movs	r3, #0
 8000e00:	9300      	str	r3, [sp, #0]
 8000e02:	3301      	adds	r3, #1
 8000e04:	2400      	movs	r4, #0
 8000e06:	469b      	mov	fp, r3
 8000e08:	e65e      	b.n	8000ac8 <__aeabi_dmul+0x48>
 8000e0a:	46c0      	nop			; (mov r8, r8)
 8000e0c:	000007ff 	.word	0x000007ff
 8000e10:	fffffc01 	.word	0xfffffc01
 8000e14:	08006800 	.word	0x08006800
 8000e18:	000003ff 	.word	0x000003ff
 8000e1c:	feffffff 	.word	0xfeffffff
 8000e20:	000007fe 	.word	0x000007fe
 8000e24:	fffffc0d 	.word	0xfffffc0d
 8000e28:	4649      	mov	r1, r9
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	4319      	orrs	r1, r3
 8000e2e:	4689      	mov	r9, r1
 8000e30:	2600      	movs	r6, #0
 8000e32:	2001      	movs	r0, #1
 8000e34:	e667      	b.n	8000b06 <__aeabi_dmul+0x86>
 8000e36:	2300      	movs	r3, #0
 8000e38:	2480      	movs	r4, #128	; 0x80
 8000e3a:	2500      	movs	r5, #0
 8000e3c:	4a43      	ldr	r2, [pc, #268]	; (8000f4c <__aeabi_dmul+0x4cc>)
 8000e3e:	9301      	str	r3, [sp, #4]
 8000e40:	0324      	lsls	r4, r4, #12
 8000e42:	e67e      	b.n	8000b42 <__aeabi_dmul+0xc2>
 8000e44:	2001      	movs	r0, #1
 8000e46:	1a40      	subs	r0, r0, r1
 8000e48:	2838      	cmp	r0, #56	; 0x38
 8000e4a:	dd00      	ble.n	8000e4e <__aeabi_dmul+0x3ce>
 8000e4c:	e676      	b.n	8000b3c <__aeabi_dmul+0xbc>
 8000e4e:	281f      	cmp	r0, #31
 8000e50:	dd5b      	ble.n	8000f0a <__aeabi_dmul+0x48a>
 8000e52:	221f      	movs	r2, #31
 8000e54:	0023      	movs	r3, r4
 8000e56:	4252      	negs	r2, r2
 8000e58:	1a51      	subs	r1, r2, r1
 8000e5a:	40cb      	lsrs	r3, r1
 8000e5c:	0019      	movs	r1, r3
 8000e5e:	2820      	cmp	r0, #32
 8000e60:	d003      	beq.n	8000e6a <__aeabi_dmul+0x3ea>
 8000e62:	4a3b      	ldr	r2, [pc, #236]	; (8000f50 <__aeabi_dmul+0x4d0>)
 8000e64:	4462      	add	r2, ip
 8000e66:	4094      	lsls	r4, r2
 8000e68:	4325      	orrs	r5, r4
 8000e6a:	1e6a      	subs	r2, r5, #1
 8000e6c:	4195      	sbcs	r5, r2
 8000e6e:	002a      	movs	r2, r5
 8000e70:	430a      	orrs	r2, r1
 8000e72:	2107      	movs	r1, #7
 8000e74:	000d      	movs	r5, r1
 8000e76:	2400      	movs	r4, #0
 8000e78:	4015      	ands	r5, r2
 8000e7a:	4211      	tst	r1, r2
 8000e7c:	d05b      	beq.n	8000f36 <__aeabi_dmul+0x4b6>
 8000e7e:	210f      	movs	r1, #15
 8000e80:	2400      	movs	r4, #0
 8000e82:	4011      	ands	r1, r2
 8000e84:	2904      	cmp	r1, #4
 8000e86:	d053      	beq.n	8000f30 <__aeabi_dmul+0x4b0>
 8000e88:	1d11      	adds	r1, r2, #4
 8000e8a:	4291      	cmp	r1, r2
 8000e8c:	4192      	sbcs	r2, r2
 8000e8e:	4252      	negs	r2, r2
 8000e90:	18a4      	adds	r4, r4, r2
 8000e92:	000a      	movs	r2, r1
 8000e94:	0223      	lsls	r3, r4, #8
 8000e96:	d54b      	bpl.n	8000f30 <__aeabi_dmul+0x4b0>
 8000e98:	2201      	movs	r2, #1
 8000e9a:	2400      	movs	r4, #0
 8000e9c:	2500      	movs	r5, #0
 8000e9e:	e650      	b.n	8000b42 <__aeabi_dmul+0xc2>
 8000ea0:	2380      	movs	r3, #128	; 0x80
 8000ea2:	031b      	lsls	r3, r3, #12
 8000ea4:	421c      	tst	r4, r3
 8000ea6:	d009      	beq.n	8000ebc <__aeabi_dmul+0x43c>
 8000ea8:	421e      	tst	r6, r3
 8000eaa:	d107      	bne.n	8000ebc <__aeabi_dmul+0x43c>
 8000eac:	4333      	orrs	r3, r6
 8000eae:	031c      	lsls	r4, r3, #12
 8000eb0:	4643      	mov	r3, r8
 8000eb2:	0015      	movs	r5, r2
 8000eb4:	0b24      	lsrs	r4, r4, #12
 8000eb6:	4a25      	ldr	r2, [pc, #148]	; (8000f4c <__aeabi_dmul+0x4cc>)
 8000eb8:	9301      	str	r3, [sp, #4]
 8000eba:	e642      	b.n	8000b42 <__aeabi_dmul+0xc2>
 8000ebc:	2280      	movs	r2, #128	; 0x80
 8000ebe:	0312      	lsls	r2, r2, #12
 8000ec0:	4314      	orrs	r4, r2
 8000ec2:	0324      	lsls	r4, r4, #12
 8000ec4:	4a21      	ldr	r2, [pc, #132]	; (8000f4c <__aeabi_dmul+0x4cc>)
 8000ec6:	0b24      	lsrs	r4, r4, #12
 8000ec8:	9701      	str	r7, [sp, #4]
 8000eca:	e63a      	b.n	8000b42 <__aeabi_dmul+0xc2>
 8000ecc:	f000 f936 	bl	800113c <__clzsi2>
 8000ed0:	0001      	movs	r1, r0
 8000ed2:	0002      	movs	r2, r0
 8000ed4:	3115      	adds	r1, #21
 8000ed6:	3220      	adds	r2, #32
 8000ed8:	291c      	cmp	r1, #28
 8000eda:	dc00      	bgt.n	8000ede <__aeabi_dmul+0x45e>
 8000edc:	e74b      	b.n	8000d76 <__aeabi_dmul+0x2f6>
 8000ede:	0034      	movs	r4, r6
 8000ee0:	3808      	subs	r0, #8
 8000ee2:	2500      	movs	r5, #0
 8000ee4:	4084      	lsls	r4, r0
 8000ee6:	e750      	b.n	8000d8a <__aeabi_dmul+0x30a>
 8000ee8:	f000 f928 	bl	800113c <__clzsi2>
 8000eec:	0003      	movs	r3, r0
 8000eee:	001a      	movs	r2, r3
 8000ef0:	3215      	adds	r2, #21
 8000ef2:	3020      	adds	r0, #32
 8000ef4:	2a1c      	cmp	r2, #28
 8000ef6:	dc00      	bgt.n	8000efa <__aeabi_dmul+0x47a>
 8000ef8:	e71e      	b.n	8000d38 <__aeabi_dmul+0x2b8>
 8000efa:	4656      	mov	r6, sl
 8000efc:	3b08      	subs	r3, #8
 8000efe:	2200      	movs	r2, #0
 8000f00:	409e      	lsls	r6, r3
 8000f02:	e723      	b.n	8000d4c <__aeabi_dmul+0x2cc>
 8000f04:	9b00      	ldr	r3, [sp, #0]
 8000f06:	469c      	mov	ip, r3
 8000f08:	e6e6      	b.n	8000cd8 <__aeabi_dmul+0x258>
 8000f0a:	4912      	ldr	r1, [pc, #72]	; (8000f54 <__aeabi_dmul+0x4d4>)
 8000f0c:	0022      	movs	r2, r4
 8000f0e:	4461      	add	r1, ip
 8000f10:	002e      	movs	r6, r5
 8000f12:	408d      	lsls	r5, r1
 8000f14:	408a      	lsls	r2, r1
 8000f16:	40c6      	lsrs	r6, r0
 8000f18:	1e69      	subs	r1, r5, #1
 8000f1a:	418d      	sbcs	r5, r1
 8000f1c:	4332      	orrs	r2, r6
 8000f1e:	432a      	orrs	r2, r5
 8000f20:	40c4      	lsrs	r4, r0
 8000f22:	0753      	lsls	r3, r2, #29
 8000f24:	d0b6      	beq.n	8000e94 <__aeabi_dmul+0x414>
 8000f26:	210f      	movs	r1, #15
 8000f28:	4011      	ands	r1, r2
 8000f2a:	2904      	cmp	r1, #4
 8000f2c:	d1ac      	bne.n	8000e88 <__aeabi_dmul+0x408>
 8000f2e:	e7b1      	b.n	8000e94 <__aeabi_dmul+0x414>
 8000f30:	0765      	lsls	r5, r4, #29
 8000f32:	0264      	lsls	r4, r4, #9
 8000f34:	0b24      	lsrs	r4, r4, #12
 8000f36:	08d2      	lsrs	r2, r2, #3
 8000f38:	4315      	orrs	r5, r2
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	e601      	b.n	8000b42 <__aeabi_dmul+0xc2>
 8000f3e:	2280      	movs	r2, #128	; 0x80
 8000f40:	0312      	lsls	r2, r2, #12
 8000f42:	4314      	orrs	r4, r2
 8000f44:	0324      	lsls	r4, r4, #12
 8000f46:	4a01      	ldr	r2, [pc, #4]	; (8000f4c <__aeabi_dmul+0x4cc>)
 8000f48:	0b24      	lsrs	r4, r4, #12
 8000f4a:	e5fa      	b.n	8000b42 <__aeabi_dmul+0xc2>
 8000f4c:	000007ff 	.word	0x000007ff
 8000f50:	0000043e 	.word	0x0000043e
 8000f54:	0000041e 	.word	0x0000041e

08000f58 <__aeabi_i2d>:
 8000f58:	b570      	push	{r4, r5, r6, lr}
 8000f5a:	2800      	cmp	r0, #0
 8000f5c:	d016      	beq.n	8000f8c <__aeabi_i2d+0x34>
 8000f5e:	17c3      	asrs	r3, r0, #31
 8000f60:	18c5      	adds	r5, r0, r3
 8000f62:	405d      	eors	r5, r3
 8000f64:	0fc4      	lsrs	r4, r0, #31
 8000f66:	0028      	movs	r0, r5
 8000f68:	f000 f8e8 	bl	800113c <__clzsi2>
 8000f6c:	4a11      	ldr	r2, [pc, #68]	; (8000fb4 <__aeabi_i2d+0x5c>)
 8000f6e:	1a12      	subs	r2, r2, r0
 8000f70:	280a      	cmp	r0, #10
 8000f72:	dc16      	bgt.n	8000fa2 <__aeabi_i2d+0x4a>
 8000f74:	0003      	movs	r3, r0
 8000f76:	002e      	movs	r6, r5
 8000f78:	3315      	adds	r3, #21
 8000f7a:	409e      	lsls	r6, r3
 8000f7c:	230b      	movs	r3, #11
 8000f7e:	1a18      	subs	r0, r3, r0
 8000f80:	40c5      	lsrs	r5, r0
 8000f82:	0552      	lsls	r2, r2, #21
 8000f84:	032d      	lsls	r5, r5, #12
 8000f86:	0b2d      	lsrs	r5, r5, #12
 8000f88:	0d53      	lsrs	r3, r2, #21
 8000f8a:	e003      	b.n	8000f94 <__aeabi_i2d+0x3c>
 8000f8c:	2400      	movs	r4, #0
 8000f8e:	2300      	movs	r3, #0
 8000f90:	2500      	movs	r5, #0
 8000f92:	2600      	movs	r6, #0
 8000f94:	051b      	lsls	r3, r3, #20
 8000f96:	432b      	orrs	r3, r5
 8000f98:	07e4      	lsls	r4, r4, #31
 8000f9a:	4323      	orrs	r3, r4
 8000f9c:	0030      	movs	r0, r6
 8000f9e:	0019      	movs	r1, r3
 8000fa0:	bd70      	pop	{r4, r5, r6, pc}
 8000fa2:	380b      	subs	r0, #11
 8000fa4:	4085      	lsls	r5, r0
 8000fa6:	0552      	lsls	r2, r2, #21
 8000fa8:	032d      	lsls	r5, r5, #12
 8000faa:	2600      	movs	r6, #0
 8000fac:	0b2d      	lsrs	r5, r5, #12
 8000fae:	0d53      	lsrs	r3, r2, #21
 8000fb0:	e7f0      	b.n	8000f94 <__aeabi_i2d+0x3c>
 8000fb2:	46c0      	nop			; (mov r8, r8)
 8000fb4:	0000041e 	.word	0x0000041e

08000fb8 <__aeabi_d2f>:
 8000fb8:	0002      	movs	r2, r0
 8000fba:	004b      	lsls	r3, r1, #1
 8000fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fbe:	0d5b      	lsrs	r3, r3, #21
 8000fc0:	030c      	lsls	r4, r1, #12
 8000fc2:	4e3d      	ldr	r6, [pc, #244]	; (80010b8 <__aeabi_d2f+0x100>)
 8000fc4:	0a64      	lsrs	r4, r4, #9
 8000fc6:	0f40      	lsrs	r0, r0, #29
 8000fc8:	1c5f      	adds	r7, r3, #1
 8000fca:	0fc9      	lsrs	r1, r1, #31
 8000fcc:	4304      	orrs	r4, r0
 8000fce:	00d5      	lsls	r5, r2, #3
 8000fd0:	4237      	tst	r7, r6
 8000fd2:	d00a      	beq.n	8000fea <__aeabi_d2f+0x32>
 8000fd4:	4839      	ldr	r0, [pc, #228]	; (80010bc <__aeabi_d2f+0x104>)
 8000fd6:	181e      	adds	r6, r3, r0
 8000fd8:	2efe      	cmp	r6, #254	; 0xfe
 8000fda:	dd16      	ble.n	800100a <__aeabi_d2f+0x52>
 8000fdc:	20ff      	movs	r0, #255	; 0xff
 8000fde:	2400      	movs	r4, #0
 8000fe0:	05c0      	lsls	r0, r0, #23
 8000fe2:	4320      	orrs	r0, r4
 8000fe4:	07c9      	lsls	r1, r1, #31
 8000fe6:	4308      	orrs	r0, r1
 8000fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d106      	bne.n	8000ffc <__aeabi_d2f+0x44>
 8000fee:	432c      	orrs	r4, r5
 8000ff0:	d026      	beq.n	8001040 <__aeabi_d2f+0x88>
 8000ff2:	2205      	movs	r2, #5
 8000ff4:	0192      	lsls	r2, r2, #6
 8000ff6:	0a54      	lsrs	r4, r2, #9
 8000ff8:	b2d8      	uxtb	r0, r3
 8000ffa:	e7f1      	b.n	8000fe0 <__aeabi_d2f+0x28>
 8000ffc:	4325      	orrs	r5, r4
 8000ffe:	d0ed      	beq.n	8000fdc <__aeabi_d2f+0x24>
 8001000:	2080      	movs	r0, #128	; 0x80
 8001002:	03c0      	lsls	r0, r0, #15
 8001004:	4304      	orrs	r4, r0
 8001006:	20ff      	movs	r0, #255	; 0xff
 8001008:	e7ea      	b.n	8000fe0 <__aeabi_d2f+0x28>
 800100a:	2e00      	cmp	r6, #0
 800100c:	dd1b      	ble.n	8001046 <__aeabi_d2f+0x8e>
 800100e:	0192      	lsls	r2, r2, #6
 8001010:	1e53      	subs	r3, r2, #1
 8001012:	419a      	sbcs	r2, r3
 8001014:	00e4      	lsls	r4, r4, #3
 8001016:	0f6d      	lsrs	r5, r5, #29
 8001018:	4322      	orrs	r2, r4
 800101a:	432a      	orrs	r2, r5
 800101c:	0753      	lsls	r3, r2, #29
 800101e:	d048      	beq.n	80010b2 <__aeabi_d2f+0xfa>
 8001020:	230f      	movs	r3, #15
 8001022:	4013      	ands	r3, r2
 8001024:	2b04      	cmp	r3, #4
 8001026:	d000      	beq.n	800102a <__aeabi_d2f+0x72>
 8001028:	3204      	adds	r2, #4
 800102a:	2380      	movs	r3, #128	; 0x80
 800102c:	04db      	lsls	r3, r3, #19
 800102e:	4013      	ands	r3, r2
 8001030:	d03f      	beq.n	80010b2 <__aeabi_d2f+0xfa>
 8001032:	1c70      	adds	r0, r6, #1
 8001034:	2efe      	cmp	r6, #254	; 0xfe
 8001036:	d0d1      	beq.n	8000fdc <__aeabi_d2f+0x24>
 8001038:	0192      	lsls	r2, r2, #6
 800103a:	0a54      	lsrs	r4, r2, #9
 800103c:	b2c0      	uxtb	r0, r0
 800103e:	e7cf      	b.n	8000fe0 <__aeabi_d2f+0x28>
 8001040:	2000      	movs	r0, #0
 8001042:	2400      	movs	r4, #0
 8001044:	e7cc      	b.n	8000fe0 <__aeabi_d2f+0x28>
 8001046:	0032      	movs	r2, r6
 8001048:	3217      	adds	r2, #23
 800104a:	db22      	blt.n	8001092 <__aeabi_d2f+0xda>
 800104c:	2080      	movs	r0, #128	; 0x80
 800104e:	0400      	lsls	r0, r0, #16
 8001050:	4320      	orrs	r0, r4
 8001052:	241e      	movs	r4, #30
 8001054:	1ba4      	subs	r4, r4, r6
 8001056:	2c1f      	cmp	r4, #31
 8001058:	dd1d      	ble.n	8001096 <__aeabi_d2f+0xde>
 800105a:	2202      	movs	r2, #2
 800105c:	4252      	negs	r2, r2
 800105e:	1b96      	subs	r6, r2, r6
 8001060:	0002      	movs	r2, r0
 8001062:	40f2      	lsrs	r2, r6
 8001064:	0016      	movs	r6, r2
 8001066:	2c20      	cmp	r4, #32
 8001068:	d004      	beq.n	8001074 <__aeabi_d2f+0xbc>
 800106a:	4a15      	ldr	r2, [pc, #84]	; (80010c0 <__aeabi_d2f+0x108>)
 800106c:	4694      	mov	ip, r2
 800106e:	4463      	add	r3, ip
 8001070:	4098      	lsls	r0, r3
 8001072:	4305      	orrs	r5, r0
 8001074:	002a      	movs	r2, r5
 8001076:	1e53      	subs	r3, r2, #1
 8001078:	419a      	sbcs	r2, r3
 800107a:	4332      	orrs	r2, r6
 800107c:	2600      	movs	r6, #0
 800107e:	0753      	lsls	r3, r2, #29
 8001080:	d1ce      	bne.n	8001020 <__aeabi_d2f+0x68>
 8001082:	2480      	movs	r4, #128	; 0x80
 8001084:	0013      	movs	r3, r2
 8001086:	04e4      	lsls	r4, r4, #19
 8001088:	2001      	movs	r0, #1
 800108a:	4023      	ands	r3, r4
 800108c:	4222      	tst	r2, r4
 800108e:	d1d3      	bne.n	8001038 <__aeabi_d2f+0x80>
 8001090:	e7b0      	b.n	8000ff4 <__aeabi_d2f+0x3c>
 8001092:	2300      	movs	r3, #0
 8001094:	e7ad      	b.n	8000ff2 <__aeabi_d2f+0x3a>
 8001096:	4a0b      	ldr	r2, [pc, #44]	; (80010c4 <__aeabi_d2f+0x10c>)
 8001098:	4694      	mov	ip, r2
 800109a:	002a      	movs	r2, r5
 800109c:	40e2      	lsrs	r2, r4
 800109e:	0014      	movs	r4, r2
 80010a0:	002a      	movs	r2, r5
 80010a2:	4463      	add	r3, ip
 80010a4:	409a      	lsls	r2, r3
 80010a6:	4098      	lsls	r0, r3
 80010a8:	1e55      	subs	r5, r2, #1
 80010aa:	41aa      	sbcs	r2, r5
 80010ac:	4302      	orrs	r2, r0
 80010ae:	4322      	orrs	r2, r4
 80010b0:	e7e4      	b.n	800107c <__aeabi_d2f+0xc4>
 80010b2:	0033      	movs	r3, r6
 80010b4:	e79e      	b.n	8000ff4 <__aeabi_d2f+0x3c>
 80010b6:	46c0      	nop			; (mov r8, r8)
 80010b8:	000007fe 	.word	0x000007fe
 80010bc:	fffffc80 	.word	0xfffffc80
 80010c0:	fffffca2 	.word	0xfffffca2
 80010c4:	fffffc82 	.word	0xfffffc82

080010c8 <__aeabi_cfrcmple>:
 80010c8:	4684      	mov	ip, r0
 80010ca:	0008      	movs	r0, r1
 80010cc:	4661      	mov	r1, ip
 80010ce:	e7ff      	b.n	80010d0 <__aeabi_cfcmpeq>

080010d0 <__aeabi_cfcmpeq>:
 80010d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80010d2:	f000 f8c9 	bl	8001268 <__lesf2>
 80010d6:	2800      	cmp	r0, #0
 80010d8:	d401      	bmi.n	80010de <__aeabi_cfcmpeq+0xe>
 80010da:	2100      	movs	r1, #0
 80010dc:	42c8      	cmn	r0, r1
 80010de:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080010e0 <__aeabi_fcmpeq>:
 80010e0:	b510      	push	{r4, lr}
 80010e2:	f000 f855 	bl	8001190 <__eqsf2>
 80010e6:	4240      	negs	r0, r0
 80010e8:	3001      	adds	r0, #1
 80010ea:	bd10      	pop	{r4, pc}

080010ec <__aeabi_fcmplt>:
 80010ec:	b510      	push	{r4, lr}
 80010ee:	f000 f8bb 	bl	8001268 <__lesf2>
 80010f2:	2800      	cmp	r0, #0
 80010f4:	db01      	blt.n	80010fa <__aeabi_fcmplt+0xe>
 80010f6:	2000      	movs	r0, #0
 80010f8:	bd10      	pop	{r4, pc}
 80010fa:	2001      	movs	r0, #1
 80010fc:	bd10      	pop	{r4, pc}
 80010fe:	46c0      	nop			; (mov r8, r8)

08001100 <__aeabi_fcmple>:
 8001100:	b510      	push	{r4, lr}
 8001102:	f000 f8b1 	bl	8001268 <__lesf2>
 8001106:	2800      	cmp	r0, #0
 8001108:	dd01      	ble.n	800110e <__aeabi_fcmple+0xe>
 800110a:	2000      	movs	r0, #0
 800110c:	bd10      	pop	{r4, pc}
 800110e:	2001      	movs	r0, #1
 8001110:	bd10      	pop	{r4, pc}
 8001112:	46c0      	nop			; (mov r8, r8)

08001114 <__aeabi_fcmpgt>:
 8001114:	b510      	push	{r4, lr}
 8001116:	f000 f861 	bl	80011dc <__gesf2>
 800111a:	2800      	cmp	r0, #0
 800111c:	dc01      	bgt.n	8001122 <__aeabi_fcmpgt+0xe>
 800111e:	2000      	movs	r0, #0
 8001120:	bd10      	pop	{r4, pc}
 8001122:	2001      	movs	r0, #1
 8001124:	bd10      	pop	{r4, pc}
 8001126:	46c0      	nop			; (mov r8, r8)

08001128 <__aeabi_fcmpge>:
 8001128:	b510      	push	{r4, lr}
 800112a:	f000 f857 	bl	80011dc <__gesf2>
 800112e:	2800      	cmp	r0, #0
 8001130:	da01      	bge.n	8001136 <__aeabi_fcmpge+0xe>
 8001132:	2000      	movs	r0, #0
 8001134:	bd10      	pop	{r4, pc}
 8001136:	2001      	movs	r0, #1
 8001138:	bd10      	pop	{r4, pc}
 800113a:	46c0      	nop			; (mov r8, r8)

0800113c <__clzsi2>:
 800113c:	211c      	movs	r1, #28
 800113e:	2301      	movs	r3, #1
 8001140:	041b      	lsls	r3, r3, #16
 8001142:	4298      	cmp	r0, r3
 8001144:	d301      	bcc.n	800114a <__clzsi2+0xe>
 8001146:	0c00      	lsrs	r0, r0, #16
 8001148:	3910      	subs	r1, #16
 800114a:	0a1b      	lsrs	r3, r3, #8
 800114c:	4298      	cmp	r0, r3
 800114e:	d301      	bcc.n	8001154 <__clzsi2+0x18>
 8001150:	0a00      	lsrs	r0, r0, #8
 8001152:	3908      	subs	r1, #8
 8001154:	091b      	lsrs	r3, r3, #4
 8001156:	4298      	cmp	r0, r3
 8001158:	d301      	bcc.n	800115e <__clzsi2+0x22>
 800115a:	0900      	lsrs	r0, r0, #4
 800115c:	3904      	subs	r1, #4
 800115e:	a202      	add	r2, pc, #8	; (adr r2, 8001168 <__clzsi2+0x2c>)
 8001160:	5c10      	ldrb	r0, [r2, r0]
 8001162:	1840      	adds	r0, r0, r1
 8001164:	4770      	bx	lr
 8001166:	46c0      	nop			; (mov r8, r8)
 8001168:	02020304 	.word	0x02020304
 800116c:	01010101 	.word	0x01010101
	...

08001178 <__clzdi2>:
 8001178:	b510      	push	{r4, lr}
 800117a:	2900      	cmp	r1, #0
 800117c:	d103      	bne.n	8001186 <__clzdi2+0xe>
 800117e:	f7ff ffdd 	bl	800113c <__clzsi2>
 8001182:	3020      	adds	r0, #32
 8001184:	e002      	b.n	800118c <__clzdi2+0x14>
 8001186:	0008      	movs	r0, r1
 8001188:	f7ff ffd8 	bl	800113c <__clzsi2>
 800118c:	bd10      	pop	{r4, pc}
 800118e:	46c0      	nop			; (mov r8, r8)

08001190 <__eqsf2>:
 8001190:	b570      	push	{r4, r5, r6, lr}
 8001192:	0042      	lsls	r2, r0, #1
 8001194:	0245      	lsls	r5, r0, #9
 8001196:	024e      	lsls	r6, r1, #9
 8001198:	004c      	lsls	r4, r1, #1
 800119a:	0fc3      	lsrs	r3, r0, #31
 800119c:	0a6d      	lsrs	r5, r5, #9
 800119e:	2001      	movs	r0, #1
 80011a0:	0e12      	lsrs	r2, r2, #24
 80011a2:	0a76      	lsrs	r6, r6, #9
 80011a4:	0e24      	lsrs	r4, r4, #24
 80011a6:	0fc9      	lsrs	r1, r1, #31
 80011a8:	2aff      	cmp	r2, #255	; 0xff
 80011aa:	d006      	beq.n	80011ba <__eqsf2+0x2a>
 80011ac:	2cff      	cmp	r4, #255	; 0xff
 80011ae:	d003      	beq.n	80011b8 <__eqsf2+0x28>
 80011b0:	42a2      	cmp	r2, r4
 80011b2:	d101      	bne.n	80011b8 <__eqsf2+0x28>
 80011b4:	42b5      	cmp	r5, r6
 80011b6:	d006      	beq.n	80011c6 <__eqsf2+0x36>
 80011b8:	bd70      	pop	{r4, r5, r6, pc}
 80011ba:	2d00      	cmp	r5, #0
 80011bc:	d1fc      	bne.n	80011b8 <__eqsf2+0x28>
 80011be:	2cff      	cmp	r4, #255	; 0xff
 80011c0:	d1fa      	bne.n	80011b8 <__eqsf2+0x28>
 80011c2:	2e00      	cmp	r6, #0
 80011c4:	d1f8      	bne.n	80011b8 <__eqsf2+0x28>
 80011c6:	428b      	cmp	r3, r1
 80011c8:	d006      	beq.n	80011d8 <__eqsf2+0x48>
 80011ca:	2001      	movs	r0, #1
 80011cc:	2a00      	cmp	r2, #0
 80011ce:	d1f3      	bne.n	80011b8 <__eqsf2+0x28>
 80011d0:	0028      	movs	r0, r5
 80011d2:	1e43      	subs	r3, r0, #1
 80011d4:	4198      	sbcs	r0, r3
 80011d6:	e7ef      	b.n	80011b8 <__eqsf2+0x28>
 80011d8:	2000      	movs	r0, #0
 80011da:	e7ed      	b.n	80011b8 <__eqsf2+0x28>

080011dc <__gesf2>:
 80011dc:	b570      	push	{r4, r5, r6, lr}
 80011de:	0042      	lsls	r2, r0, #1
 80011e0:	0245      	lsls	r5, r0, #9
 80011e2:	024e      	lsls	r6, r1, #9
 80011e4:	004c      	lsls	r4, r1, #1
 80011e6:	0fc3      	lsrs	r3, r0, #31
 80011e8:	0a6d      	lsrs	r5, r5, #9
 80011ea:	0e12      	lsrs	r2, r2, #24
 80011ec:	0a76      	lsrs	r6, r6, #9
 80011ee:	0e24      	lsrs	r4, r4, #24
 80011f0:	0fc8      	lsrs	r0, r1, #31
 80011f2:	2aff      	cmp	r2, #255	; 0xff
 80011f4:	d01b      	beq.n	800122e <__gesf2+0x52>
 80011f6:	2cff      	cmp	r4, #255	; 0xff
 80011f8:	d00e      	beq.n	8001218 <__gesf2+0x3c>
 80011fa:	2a00      	cmp	r2, #0
 80011fc:	d11b      	bne.n	8001236 <__gesf2+0x5a>
 80011fe:	2c00      	cmp	r4, #0
 8001200:	d101      	bne.n	8001206 <__gesf2+0x2a>
 8001202:	2e00      	cmp	r6, #0
 8001204:	d01c      	beq.n	8001240 <__gesf2+0x64>
 8001206:	2d00      	cmp	r5, #0
 8001208:	d00c      	beq.n	8001224 <__gesf2+0x48>
 800120a:	4283      	cmp	r3, r0
 800120c:	d01c      	beq.n	8001248 <__gesf2+0x6c>
 800120e:	2102      	movs	r1, #2
 8001210:	1e58      	subs	r0, r3, #1
 8001212:	4008      	ands	r0, r1
 8001214:	3801      	subs	r0, #1
 8001216:	bd70      	pop	{r4, r5, r6, pc}
 8001218:	2e00      	cmp	r6, #0
 800121a:	d122      	bne.n	8001262 <__gesf2+0x86>
 800121c:	2a00      	cmp	r2, #0
 800121e:	d1f4      	bne.n	800120a <__gesf2+0x2e>
 8001220:	2d00      	cmp	r5, #0
 8001222:	d1f2      	bne.n	800120a <__gesf2+0x2e>
 8001224:	2800      	cmp	r0, #0
 8001226:	d1f6      	bne.n	8001216 <__gesf2+0x3a>
 8001228:	2001      	movs	r0, #1
 800122a:	4240      	negs	r0, r0
 800122c:	e7f3      	b.n	8001216 <__gesf2+0x3a>
 800122e:	2d00      	cmp	r5, #0
 8001230:	d117      	bne.n	8001262 <__gesf2+0x86>
 8001232:	2cff      	cmp	r4, #255	; 0xff
 8001234:	d0f0      	beq.n	8001218 <__gesf2+0x3c>
 8001236:	2c00      	cmp	r4, #0
 8001238:	d1e7      	bne.n	800120a <__gesf2+0x2e>
 800123a:	2e00      	cmp	r6, #0
 800123c:	d1e5      	bne.n	800120a <__gesf2+0x2e>
 800123e:	e7e6      	b.n	800120e <__gesf2+0x32>
 8001240:	2000      	movs	r0, #0
 8001242:	2d00      	cmp	r5, #0
 8001244:	d0e7      	beq.n	8001216 <__gesf2+0x3a>
 8001246:	e7e2      	b.n	800120e <__gesf2+0x32>
 8001248:	42a2      	cmp	r2, r4
 800124a:	dc05      	bgt.n	8001258 <__gesf2+0x7c>
 800124c:	dbea      	blt.n	8001224 <__gesf2+0x48>
 800124e:	42b5      	cmp	r5, r6
 8001250:	d802      	bhi.n	8001258 <__gesf2+0x7c>
 8001252:	d3e7      	bcc.n	8001224 <__gesf2+0x48>
 8001254:	2000      	movs	r0, #0
 8001256:	e7de      	b.n	8001216 <__gesf2+0x3a>
 8001258:	4243      	negs	r3, r0
 800125a:	4158      	adcs	r0, r3
 800125c:	0040      	lsls	r0, r0, #1
 800125e:	3801      	subs	r0, #1
 8001260:	e7d9      	b.n	8001216 <__gesf2+0x3a>
 8001262:	2002      	movs	r0, #2
 8001264:	4240      	negs	r0, r0
 8001266:	e7d6      	b.n	8001216 <__gesf2+0x3a>

08001268 <__lesf2>:
 8001268:	b570      	push	{r4, r5, r6, lr}
 800126a:	0042      	lsls	r2, r0, #1
 800126c:	0245      	lsls	r5, r0, #9
 800126e:	024e      	lsls	r6, r1, #9
 8001270:	004c      	lsls	r4, r1, #1
 8001272:	0fc3      	lsrs	r3, r0, #31
 8001274:	0a6d      	lsrs	r5, r5, #9
 8001276:	0e12      	lsrs	r2, r2, #24
 8001278:	0a76      	lsrs	r6, r6, #9
 800127a:	0e24      	lsrs	r4, r4, #24
 800127c:	0fc8      	lsrs	r0, r1, #31
 800127e:	2aff      	cmp	r2, #255	; 0xff
 8001280:	d00b      	beq.n	800129a <__lesf2+0x32>
 8001282:	2cff      	cmp	r4, #255	; 0xff
 8001284:	d00d      	beq.n	80012a2 <__lesf2+0x3a>
 8001286:	2a00      	cmp	r2, #0
 8001288:	d11f      	bne.n	80012ca <__lesf2+0x62>
 800128a:	2c00      	cmp	r4, #0
 800128c:	d116      	bne.n	80012bc <__lesf2+0x54>
 800128e:	2e00      	cmp	r6, #0
 8001290:	d114      	bne.n	80012bc <__lesf2+0x54>
 8001292:	2000      	movs	r0, #0
 8001294:	2d00      	cmp	r5, #0
 8001296:	d010      	beq.n	80012ba <__lesf2+0x52>
 8001298:	e009      	b.n	80012ae <__lesf2+0x46>
 800129a:	2d00      	cmp	r5, #0
 800129c:	d10c      	bne.n	80012b8 <__lesf2+0x50>
 800129e:	2cff      	cmp	r4, #255	; 0xff
 80012a0:	d113      	bne.n	80012ca <__lesf2+0x62>
 80012a2:	2e00      	cmp	r6, #0
 80012a4:	d108      	bne.n	80012b8 <__lesf2+0x50>
 80012a6:	2a00      	cmp	r2, #0
 80012a8:	d008      	beq.n	80012bc <__lesf2+0x54>
 80012aa:	4283      	cmp	r3, r0
 80012ac:	d012      	beq.n	80012d4 <__lesf2+0x6c>
 80012ae:	2102      	movs	r1, #2
 80012b0:	1e58      	subs	r0, r3, #1
 80012b2:	4008      	ands	r0, r1
 80012b4:	3801      	subs	r0, #1
 80012b6:	e000      	b.n	80012ba <__lesf2+0x52>
 80012b8:	2002      	movs	r0, #2
 80012ba:	bd70      	pop	{r4, r5, r6, pc}
 80012bc:	2d00      	cmp	r5, #0
 80012be:	d1f4      	bne.n	80012aa <__lesf2+0x42>
 80012c0:	2800      	cmp	r0, #0
 80012c2:	d1fa      	bne.n	80012ba <__lesf2+0x52>
 80012c4:	2001      	movs	r0, #1
 80012c6:	4240      	negs	r0, r0
 80012c8:	e7f7      	b.n	80012ba <__lesf2+0x52>
 80012ca:	2c00      	cmp	r4, #0
 80012cc:	d1ed      	bne.n	80012aa <__lesf2+0x42>
 80012ce:	2e00      	cmp	r6, #0
 80012d0:	d1eb      	bne.n	80012aa <__lesf2+0x42>
 80012d2:	e7ec      	b.n	80012ae <__lesf2+0x46>
 80012d4:	42a2      	cmp	r2, r4
 80012d6:	dc05      	bgt.n	80012e4 <__lesf2+0x7c>
 80012d8:	dbf2      	blt.n	80012c0 <__lesf2+0x58>
 80012da:	42b5      	cmp	r5, r6
 80012dc:	d802      	bhi.n	80012e4 <__lesf2+0x7c>
 80012de:	d3ef      	bcc.n	80012c0 <__lesf2+0x58>
 80012e0:	2000      	movs	r0, #0
 80012e2:	e7ea      	b.n	80012ba <__lesf2+0x52>
 80012e4:	4243      	negs	r3, r0
 80012e6:	4158      	adcs	r0, r3
 80012e8:	0040      	lsls	r0, r0, #1
 80012ea:	3801      	subs	r0, #1
 80012ec:	e7e5      	b.n	80012ba <__lesf2+0x52>
 80012ee:	46c0      	nop			; (mov r8, r8)

080012f0 <enable_displays>:
 */

#include "display.h"


void enable_displays(void) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
//	DISP_EN_GPIO_Port->ODR |= DISP_EN_Pin;
}
 80012f4:	46c0      	nop			; (mov r8, r8)
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <disable_displays>:

void disable_displays(void) {
 80012fa:	b580      	push	{r7, lr}
 80012fc:	af00      	add	r7, sp, #0
//	DISP_EN_GPIO_Port->ODR &= ~DISP_EN_Pin;
}
 80012fe:	46c0      	nop			; (mov r8, r8)
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <set_data>:

void set_data(const uint8_t data) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	0002      	movs	r2, r0
 800130c:	1dfb      	adds	r3, r7, #7
 800130e:	701a      	strb	r2, [r3, #0]
	SEG_DATA = (SEG_DATA & 0b1111111110000000) | data;
 8001310:	23a0      	movs	r3, #160	; 0xa0
 8001312:	05db      	lsls	r3, r3, #23
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	4a06      	ldr	r2, [pc, #24]	; (8001330 <set_data+0x2c>)
 8001318:	4013      	ands	r3, r2
 800131a:	0019      	movs	r1, r3
 800131c:	1dfb      	adds	r3, r7, #7
 800131e:	781a      	ldrb	r2, [r3, #0]
 8001320:	23a0      	movs	r3, #160	; 0xa0
 8001322:	05db      	lsls	r3, r3, #23
 8001324:	430a      	orrs	r2, r1
 8001326:	615a      	str	r2, [r3, #20]
}
 8001328:	46c0      	nop			; (mov r8, r8)
 800132a:	46bd      	mov	sp, r7
 800132c:	b002      	add	sp, #8
 800132e:	bd80      	pop	{r7, pc}
 8001330:	0000ff80 	.word	0x0000ff80

08001334 <print_char>:

void print_char(const uint8_t field, const char c) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	0002      	movs	r2, r0
 800133c:	1dfb      	adds	r3, r7, #7
 800133e:	701a      	strb	r2, [r3, #0]
 8001340:	1dbb      	adds	r3, r7, #6
 8001342:	1c0a      	adds	r2, r1, #0
 8001344:	701a      	strb	r2, [r3, #0]
	if (~field & 0b1) {
 8001346:	1dfb      	adds	r3, r7, #7
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2201      	movs	r2, #1
 800134c:	4013      	ands	r3, r2
 800134e:	d106      	bne.n	800135e <print_char+0x2a>
		ADD_REG |= A0;
 8001350:	4b28      	ldr	r3, [pc, #160]	; (80013f4 <print_char+0xc0>)
 8001352:	695a      	ldr	r2, [r3, #20]
 8001354:	4b27      	ldr	r3, [pc, #156]	; (80013f4 <print_char+0xc0>)
 8001356:	2101      	movs	r1, #1
 8001358:	430a      	orrs	r2, r1
 800135a:	615a      	str	r2, [r3, #20]
 800135c:	e005      	b.n	800136a <print_char+0x36>
	} else {
		ADD_REG &= ~A0;
 800135e:	4b25      	ldr	r3, [pc, #148]	; (80013f4 <print_char+0xc0>)
 8001360:	695a      	ldr	r2, [r3, #20]
 8001362:	4b24      	ldr	r3, [pc, #144]	; (80013f4 <print_char+0xc0>)
 8001364:	2101      	movs	r1, #1
 8001366:	438a      	bics	r2, r1
 8001368:	615a      	str	r2, [r3, #20]
	}
	if ((~field >> 1) & 0b1) {
 800136a:	1dfb      	adds	r3, r7, #7
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2202      	movs	r2, #2
 8001370:	4013      	ands	r3, r2
 8001372:	d106      	bne.n	8001382 <print_char+0x4e>
		ADD_REG |= A1;
 8001374:	4b1f      	ldr	r3, [pc, #124]	; (80013f4 <print_char+0xc0>)
 8001376:	695a      	ldr	r2, [r3, #20]
 8001378:	4b1e      	ldr	r3, [pc, #120]	; (80013f4 <print_char+0xc0>)
 800137a:	2102      	movs	r1, #2
 800137c:	430a      	orrs	r2, r1
 800137e:	615a      	str	r2, [r3, #20]
 8001380:	e005      	b.n	800138e <print_char+0x5a>
	} else {
		ADD_REG &= ~A1;
 8001382:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <print_char+0xc0>)
 8001384:	695a      	ldr	r2, [r3, #20]
 8001386:	4b1b      	ldr	r3, [pc, #108]	; (80013f4 <print_char+0xc0>)
 8001388:	2102      	movs	r1, #2
 800138a:	438a      	bics	r2, r1
 800138c:	615a      	str	r2, [r3, #20]
	}
	set_data(c);
 800138e:	1dbb      	adds	r3, r7, #6
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	0018      	movs	r0, r3
 8001394:	f7ff ffb6 	bl	8001304 <set_data>
	if ((field >> 2) & 0b1) {
 8001398:	1dfb      	adds	r3, r7, #7
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	089b      	lsrs	r3, r3, #2
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	001a      	movs	r2, r3
 80013a2:	2301      	movs	r3, #1
 80013a4:	4013      	ands	r3, r2
 80013a6:	d00c      	beq.n	80013c2 <print_char+0x8e>
		WE_REG |= W1;
 80013a8:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <print_char+0xc0>)
 80013aa:	695a      	ldr	r2, [r3, #20]
 80013ac:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <print_char+0xc0>)
 80013ae:	2180      	movs	r1, #128	; 0x80
 80013b0:	430a      	orrs	r2, r1
 80013b2:	615a      	str	r2, [r3, #20]
		WE_REG &= ~W0;
 80013b4:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <print_char+0xc0>)
 80013b6:	695a      	ldr	r2, [r3, #20]
 80013b8:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <print_char+0xc0>)
 80013ba:	2140      	movs	r1, #64	; 0x40
 80013bc:	438a      	bics	r2, r1
 80013be:	615a      	str	r2, [r3, #20]
 80013c0:	e00b      	b.n	80013da <print_char+0xa6>
	} else {
		WE_REG |= W0;
 80013c2:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <print_char+0xc0>)
 80013c4:	695a      	ldr	r2, [r3, #20]
 80013c6:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <print_char+0xc0>)
 80013c8:	2140      	movs	r1, #64	; 0x40
 80013ca:	430a      	orrs	r2, r1
 80013cc:	615a      	str	r2, [r3, #20]
		WE_REG &= ~W1;
 80013ce:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <print_char+0xc0>)
 80013d0:	695a      	ldr	r2, [r3, #20]
 80013d2:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <print_char+0xc0>)
 80013d4:	2180      	movs	r1, #128	; 0x80
 80013d6:	438a      	bics	r2, r1
 80013d8:	615a      	str	r2, [r3, #20]
	}
	WE_REG |= W0 | W1;
 80013da:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <print_char+0xc0>)
 80013dc:	695a      	ldr	r2, [r3, #20]
 80013de:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <print_char+0xc0>)
 80013e0:	21c0      	movs	r1, #192	; 0xc0
 80013e2:	430a      	orrs	r2, r1
 80013e4:	615a      	str	r2, [r3, #20]
	set_data(0);
 80013e6:	2000      	movs	r0, #0
 80013e8:	f7ff ff8c 	bl	8001304 <set_data>
}
 80013ec:	46c0      	nop			; (mov r8, r8)
 80013ee:	46bd      	mov	sp, r7
 80013f0:	b002      	add	sp, #8
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	50000400 	.word	0x50000400

080013f8 <print_string>:

void print_string(const char *str) {
 80013f8:	b590      	push	{r4, r7, lr}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < 8; i++) {
 8001400:	230f      	movs	r3, #15
 8001402:	18fb      	adds	r3, r7, r3
 8001404:	2200      	movs	r2, #0
 8001406:	701a      	strb	r2, [r3, #0]
 8001408:	e012      	b.n	8001430 <print_string+0x38>
		print_char(i, str[i]);
 800140a:	210f      	movs	r1, #15
 800140c:	187b      	adds	r3, r7, r1
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	18d3      	adds	r3, r2, r3
 8001414:	781a      	ldrb	r2, [r3, #0]
 8001416:	000c      	movs	r4, r1
 8001418:	187b      	adds	r3, r7, r1
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	0011      	movs	r1, r2
 800141e:	0018      	movs	r0, r3
 8001420:	f7ff ff88 	bl	8001334 <print_char>
	for (uint8_t i = 0; i < 8; i++) {
 8001424:	0021      	movs	r1, r4
 8001426:	187b      	adds	r3, r7, r1
 8001428:	781a      	ldrb	r2, [r3, #0]
 800142a:	187b      	adds	r3, r7, r1
 800142c:	3201      	adds	r2, #1
 800142e:	701a      	strb	r2, [r3, #0]
 8001430:	230f      	movs	r3, #15
 8001432:	18fb      	adds	r3, r7, r3
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b07      	cmp	r3, #7
 8001438:	d9e7      	bls.n	800140a <print_string+0x12>
	}
}
 800143a:	46c0      	nop			; (mov r8, r8)
 800143c:	46c0      	nop			; (mov r8, r8)
 800143e:	46bd      	mov	sp, r7
 8001440:	b005      	add	sp, #20
 8001442:	bd90      	pop	{r4, r7, pc}

08001444 <print_time>:
		HAL_Delay(delay_ms);
	}
	print_string(--str);
}

void print_time(const uint8_t mode) {
 8001444:	b590      	push	{r4, r7, lr}
 8001446:	b089      	sub	sp, #36	; 0x24
 8001448:	af02      	add	r7, sp, #8
 800144a:	0002      	movs	r2, r0
 800144c:	1dfb      	adds	r3, r7, #7
 800144e:	701a      	strb	r2, [r3, #0]
	char buffer[9] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
 8001450:	230c      	movs	r3, #12
 8001452:	18fb      	adds	r3, r7, r3
 8001454:	4a25      	ldr	r2, [pc, #148]	; (80014ec <print_time+0xa8>)
 8001456:	ca03      	ldmia	r2!, {r0, r1}
 8001458:	c303      	stmia	r3!, {r0, r1}
 800145a:	7812      	ldrb	r2, [r2, #0]
 800145c:	701a      	strb	r2, [r3, #0]
	char sec_dot = ' ';
 800145e:	2117      	movs	r1, #23
 8001460:	187b      	adds	r3, r7, r1
 8001462:	2220      	movs	r2, #32
 8001464:	701a      	strb	r2, [r3, #0]
	switch (mode) {
 8001466:	1dfb      	adds	r3, r7, #7
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b02      	cmp	r3, #2
 800146c:	d021      	beq.n	80014b2 <print_time+0x6e>
 800146e:	dc33      	bgt.n	80014d8 <print_time+0x94>
 8001470:	2b00      	cmp	r3, #0
 8001472:	d030      	beq.n	80014d6 <print_time+0x92>
 8001474:	2b01      	cmp	r3, #1
 8001476:	d12f      	bne.n	80014d8 <print_time+0x94>
	case DISPLAY_MODE_PARTIAL:
		if (seconds % 2) {
 8001478:	4b1d      	ldr	r3, [pc, #116]	; (80014f0 <print_time+0xac>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2201      	movs	r2, #1
 800147e:	4013      	ands	r3, r2
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b00      	cmp	r3, #0
 8001484:	d002      	beq.n	800148c <print_time+0x48>
			sec_dot = '.';
 8001486:	187b      	adds	r3, r7, r1
 8001488:	222e      	movs	r2, #46	; 0x2e
 800148a:	701a      	strb	r2, [r3, #0]
		}
		snprintf(buffer, 9, "  %02d%c%02d ", hours, sec_dot, minutes);
 800148c:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <print_time+0xb0>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	001c      	movs	r4, r3
 8001492:	2317      	movs	r3, #23
 8001494:	18fb      	adds	r3, r7, r3
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	4a17      	ldr	r2, [pc, #92]	; (80014f8 <print_time+0xb4>)
 800149a:	7812      	ldrb	r2, [r2, #0]
 800149c:	0011      	movs	r1, r2
 800149e:	4a17      	ldr	r2, [pc, #92]	; (80014fc <print_time+0xb8>)
 80014a0:	200c      	movs	r0, #12
 80014a2:	1838      	adds	r0, r7, r0
 80014a4:	9101      	str	r1, [sp, #4]
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	0023      	movs	r3, r4
 80014aa:	2109      	movs	r1, #9
 80014ac:	f004 fc64 	bl	8005d78 <sniprintf>
		break;
 80014b0:	e012      	b.n	80014d8 <print_time+0x94>
	case DISPLAY_MODE_FULL:
		snprintf(buffer, 9, "%02d.%02d.%02d", hours, minutes, seconds);
 80014b2:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <print_time+0xb0>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	001c      	movs	r4, r3
 80014b8:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <print_time+0xb4>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	0019      	movs	r1, r3
 80014be:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <print_time+0xac>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	4a0f      	ldr	r2, [pc, #60]	; (8001500 <print_time+0xbc>)
 80014c4:	200c      	movs	r0, #12
 80014c6:	1838      	adds	r0, r7, r0
 80014c8:	9301      	str	r3, [sp, #4]
 80014ca:	9100      	str	r1, [sp, #0]
 80014cc:	0023      	movs	r3, r4
 80014ce:	2109      	movs	r1, #9
 80014d0:	f004 fc52 	bl	8005d78 <sniprintf>
		break;
 80014d4:	e000      	b.n	80014d8 <print_time+0x94>
	case DISPLAY_MODE_OFF:
		break;
 80014d6:	46c0      	nop			; (mov r8, r8)
	}
	print_string(buffer);
 80014d8:	230c      	movs	r3, #12
 80014da:	18fb      	adds	r3, r7, r3
 80014dc:	0018      	movs	r0, r3
 80014de:	f7ff ff8b 	bl	80013f8 <print_string>
}
 80014e2:	46c0      	nop			; (mov r8, r8)
 80014e4:	46bd      	mov	sp, r7
 80014e6:	b007      	add	sp, #28
 80014e8:	bd90      	pop	{r4, r7, pc}
 80014ea:	46c0      	nop			; (mov r8, r8)
 80014ec:	08006698 	.word	0x08006698
 80014f0:	20000098 	.word	0x20000098
 80014f4:	20000001 	.word	0x20000001
 80014f8:	20000097 	.word	0x20000097
 80014fc:	08006678 	.word	0x08006678
 8001500:	08006688 	.word	0x08006688

08001504 <print_new_time>:

void print_new_time(void) {
 8001504:	b590      	push	{r4, r7, lr}
 8001506:	b087      	sub	sp, #28
 8001508:	af02      	add	r7, sp, #8
	char buffer[9];
	snprintf(buffer, 9, "%02d.%02d.%02d", new_hours, new_minutes, new_seconds);
 800150a:	4b0d      	ldr	r3, [pc, #52]	; (8001540 <print_new_time+0x3c>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	b2db      	uxtb	r3, r3
 8001510:	001c      	movs	r4, r3
 8001512:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <print_new_time+0x40>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	b2db      	uxtb	r3, r3
 8001518:	0019      	movs	r1, r3
 800151a:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <print_new_time+0x44>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	b2db      	uxtb	r3, r3
 8001520:	4a0a      	ldr	r2, [pc, #40]	; (800154c <print_new_time+0x48>)
 8001522:	1d38      	adds	r0, r7, #4
 8001524:	9301      	str	r3, [sp, #4]
 8001526:	9100      	str	r1, [sp, #0]
 8001528:	0023      	movs	r3, r4
 800152a:	2109      	movs	r1, #9
 800152c:	f004 fc24 	bl	8005d78 <sniprintf>
	print_string(buffer);
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	0018      	movs	r0, r3
 8001534:	f7ff ff60 	bl	80013f8 <print_string>
}
 8001538:	46c0      	nop			; (mov r8, r8)
 800153a:	46bd      	mov	sp, r7
 800153c:	b005      	add	sp, #20
 800153e:	bd90      	pop	{r4, r7, pc}
 8001540:	2000009a 	.word	0x2000009a
 8001544:	2000009b 	.word	0x2000009b
 8001548:	2000009c 	.word	0x2000009c
 800154c:	08006688 	.word	0x08006688

08001550 <print_time_partial>:

void print_time_partial(void) {
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
	print_time(DISPLAY_MODE_PARTIAL);
 8001554:	2001      	movs	r0, #1
 8001556:	f7ff ff75 	bl	8001444 <print_time>
}
 800155a:	46c0      	nop			; (mov r8, r8)
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <print_time_full>:

void print_time_full(void) {
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
	print_time(DISPLAY_MODE_FULL);
 8001564:	2002      	movs	r0, #2
 8001566:	f7ff ff6d 	bl	8001444 <print_time>
}
 800156a:	46c0      	nop			; (mov r8, r8)
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <print_time_off>:

void print_time_off(void) {
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
	print_time(DISPLAY_MODE_OFF);
 8001574:	2000      	movs	r0, #0
 8001576:	f7ff ff65 	bl	8001444 <print_time>
}
 800157a:	46c0      	nop			; (mov r8, r8)
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <print_time_blink_hours>:

void print_time_blink_hours(void) {
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af02      	add	r7, sp, #8
	if (new_time_blink) {
 8001586:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <print_time_blink_hours+0x44>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	b2db      	uxtb	r3, r3
 800158c:	2b00      	cmp	r3, #0
 800158e:	d002      	beq.n	8001596 <print_time_blink_hours+0x16>
		print_new_time();
 8001590:	f7ff ffb8 	bl	8001504 <print_new_time>
	} else {
		char buffer[9];
		snprintf(buffer, 9, "  .%02d.%02d", new_minutes, new_seconds);
		print_string(buffer);
	}
}
 8001594:	e011      	b.n	80015ba <print_time_blink_hours+0x3a>
		snprintf(buffer, 9, "  .%02d.%02d", new_minutes, new_seconds);
 8001596:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <print_time_blink_hours+0x48>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	b2db      	uxtb	r3, r3
 800159c:	0019      	movs	r1, r3
 800159e:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <print_time_blink_hours+0x4c>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	4a0a      	ldr	r2, [pc, #40]	; (80015d0 <print_time_blink_hours+0x50>)
 80015a6:	1d38      	adds	r0, r7, #4
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	000b      	movs	r3, r1
 80015ac:	2109      	movs	r1, #9
 80015ae:	f004 fbe3 	bl	8005d78 <sniprintf>
		print_string(buffer);
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	0018      	movs	r0, r3
 80015b6:	f7ff ff1f 	bl	80013f8 <print_string>
}
 80015ba:	46c0      	nop			; (mov r8, r8)
 80015bc:	46bd      	mov	sp, r7
 80015be:	b004      	add	sp, #16
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	46c0      	nop			; (mov r8, r8)
 80015c4:	20000099 	.word	0x20000099
 80015c8:	2000009b 	.word	0x2000009b
 80015cc:	2000009c 	.word	0x2000009c
 80015d0:	080066a4 	.word	0x080066a4

080015d4 <print_time_blink_minutes>:

void print_time_blink_minutes(void) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af02      	add	r7, sp, #8
	if (new_time_blink) {
 80015da:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <print_time_blink_minutes+0x44>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d002      	beq.n	80015ea <print_time_blink_minutes+0x16>
		print_new_time();
 80015e4:	f7ff ff8e 	bl	8001504 <print_new_time>
	} else {
		char buffer[9];
		snprintf(buffer, 9, "%02d.  .%02d", new_hours, new_seconds);
		print_string(buffer);
	}
}
 80015e8:	e011      	b.n	800160e <print_time_blink_minutes+0x3a>
		snprintf(buffer, 9, "%02d.  .%02d", new_hours, new_seconds);
 80015ea:	4b0c      	ldr	r3, [pc, #48]	; (800161c <print_time_blink_minutes+0x48>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	0019      	movs	r1, r3
 80015f2:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <print_time_blink_minutes+0x4c>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	4a0a      	ldr	r2, [pc, #40]	; (8001624 <print_time_blink_minutes+0x50>)
 80015fa:	1d38      	adds	r0, r7, #4
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	000b      	movs	r3, r1
 8001600:	2109      	movs	r1, #9
 8001602:	f004 fbb9 	bl	8005d78 <sniprintf>
		print_string(buffer);
 8001606:	1d3b      	adds	r3, r7, #4
 8001608:	0018      	movs	r0, r3
 800160a:	f7ff fef5 	bl	80013f8 <print_string>
}
 800160e:	46c0      	nop			; (mov r8, r8)
 8001610:	46bd      	mov	sp, r7
 8001612:	b004      	add	sp, #16
 8001614:	bd80      	pop	{r7, pc}
 8001616:	46c0      	nop			; (mov r8, r8)
 8001618:	20000099 	.word	0x20000099
 800161c:	2000009a 	.word	0x2000009a
 8001620:	2000009c 	.word	0x2000009c
 8001624:	080066b4 	.word	0x080066b4

08001628 <print_time_blink_seconds>:

void print_time_blink_seconds(void) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af02      	add	r7, sp, #8
	if (new_time_blink) {
 800162e:	4b0f      	ldr	r3, [pc, #60]	; (800166c <print_time_blink_seconds+0x44>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b00      	cmp	r3, #0
 8001636:	d002      	beq.n	800163e <print_time_blink_seconds+0x16>
		print_new_time();
 8001638:	f7ff ff64 	bl	8001504 <print_new_time>
	} else {
		char buffer[9];
		snprintf(buffer, 9, "%02d.%02d.  ", new_hours, new_minutes);
		print_string(buffer);
	}
}
 800163c:	e011      	b.n	8001662 <print_time_blink_seconds+0x3a>
		snprintf(buffer, 9, "%02d.%02d.  ", new_hours, new_minutes);
 800163e:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <print_time_blink_seconds+0x48>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	b2db      	uxtb	r3, r3
 8001644:	0019      	movs	r1, r3
 8001646:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <print_time_blink_seconds+0x4c>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	b2db      	uxtb	r3, r3
 800164c:	4a0a      	ldr	r2, [pc, #40]	; (8001678 <print_time_blink_seconds+0x50>)
 800164e:	1d38      	adds	r0, r7, #4
 8001650:	9300      	str	r3, [sp, #0]
 8001652:	000b      	movs	r3, r1
 8001654:	2109      	movs	r1, #9
 8001656:	f004 fb8f 	bl	8005d78 <sniprintf>
		print_string(buffer);
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	0018      	movs	r0, r3
 800165e:	f7ff fecb 	bl	80013f8 <print_string>
}
 8001662:	46c0      	nop			; (mov r8, r8)
 8001664:	46bd      	mov	sp, r7
 8001666:	b004      	add	sp, #16
 8001668:	bd80      	pop	{r7, pc}
 800166a:	46c0      	nop			; (mov r8, r8)
 800166c:	20000099 	.word	0x20000099
 8001670:	2000009a 	.word	0x2000009a
 8001674:	2000009b 	.word	0x2000009b
 8001678:	080066c4 	.word	0x080066c4

0800167c <byte_to_bcd>:
 *      Author: Anemiq
 */

#include "helpers.h"

uint8_t byte_to_bcd(uint8_t data) {
 800167c:	b590      	push	{r4, r7, lr}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	0002      	movs	r2, r0
 8001684:	1dfb      	adds	r3, r7, #7
 8001686:	701a      	strb	r2, [r3, #0]
	return ((data / 10) << 4) | (data % 10);
 8001688:	1dfb      	adds	r3, r7, #7
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	210a      	movs	r1, #10
 800168e:	0018      	movs	r0, r3
 8001690:	f7fe fd44 	bl	800011c <__udivsi3>
 8001694:	0003      	movs	r3, r0
 8001696:	b2db      	uxtb	r3, r3
 8001698:	011b      	lsls	r3, r3, #4
 800169a:	b25c      	sxtb	r4, r3
 800169c:	1dfb      	adds	r3, r7, #7
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	210a      	movs	r1, #10
 80016a2:	0018      	movs	r0, r3
 80016a4:	f7fe fdc0 	bl	8000228 <__aeabi_uidivmod>
 80016a8:	000b      	movs	r3, r1
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	b25b      	sxtb	r3, r3
 80016ae:	4323      	orrs	r3, r4
 80016b0:	b25b      	sxtb	r3, r3
 80016b2:	b2db      	uxtb	r3, r3
}
 80016b4:	0018      	movs	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	b003      	add	sp, #12
 80016ba:	bd90      	pop	{r4, r7, pc}

080016bc <bcd_to_byte>:

uint8_t bcd_to_byte(uint8_t data) {
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	0002      	movs	r2, r0
 80016c4:	1dfb      	adds	r3, r7, #7
 80016c6:	701a      	strb	r2, [r3, #0]
	return ((data >> 4) * 10) + (data % 16);
 80016c8:	1dfb      	adds	r3, r7, #7
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	091b      	lsrs	r3, r3, #4
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	1c1a      	adds	r2, r3, #0
 80016d2:	0092      	lsls	r2, r2, #2
 80016d4:	18d3      	adds	r3, r2, r3
 80016d6:	18db      	adds	r3, r3, r3
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	1dfb      	adds	r3, r7, #7
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	210f      	movs	r1, #15
 80016e0:	400b      	ands	r3, r1
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	18d3      	adds	r3, r2, r3
 80016e6:	b2db      	uxtb	r3, r3
}
 80016e8:	0018      	movs	r0, r3
 80016ea:	46bd      	mov	sp, r7
 80016ec:	b002      	add	sp, #8
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <led_red_on>:

void led_red_on(void) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
	LED_R_PORT->ODR |= LED_R;
 80016f4:	23a0      	movs	r3, #160	; 0xa0
 80016f6:	05db      	lsls	r3, r3, #23
 80016f8:	695a      	ldr	r2, [r3, #20]
 80016fa:	23a0      	movs	r3, #160	; 0xa0
 80016fc:	05db      	lsls	r3, r3, #23
 80016fe:	2180      	movs	r1, #128	; 0x80
 8001700:	0109      	lsls	r1, r1, #4
 8001702:	430a      	orrs	r2, r1
 8001704:	615a      	str	r2, [r3, #20]
}
 8001706:	46c0      	nop			; (mov r8, r8)
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <led_red_off>:
void led_red_off(void) {
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
	LED_R_PORT->ODR &= ~LED_R;
 8001710:	23a0      	movs	r3, #160	; 0xa0
 8001712:	05db      	lsls	r3, r3, #23
 8001714:	695a      	ldr	r2, [r3, #20]
 8001716:	23a0      	movs	r3, #160	; 0xa0
 8001718:	05db      	lsls	r3, r3, #23
 800171a:	4903      	ldr	r1, [pc, #12]	; (8001728 <led_red_off+0x1c>)
 800171c:	400a      	ands	r2, r1
 800171e:	615a      	str	r2, [r3, #20]
}
 8001720:	46c0      	nop			; (mov r8, r8)
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	46c0      	nop			; (mov r8, r8)
 8001728:	fffff7ff 	.word	0xfffff7ff

0800172c <led_green_on>:

void led_green_on(void) {
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
	LED_G_PORT->ODR |= LED_G;
 8001730:	4b04      	ldr	r3, [pc, #16]	; (8001744 <led_green_on+0x18>)
 8001732:	695a      	ldr	r2, [r3, #20]
 8001734:	4b03      	ldr	r3, [pc, #12]	; (8001744 <led_green_on+0x18>)
 8001736:	2108      	movs	r1, #8
 8001738:	430a      	orrs	r2, r1
 800173a:	615a      	str	r2, [r3, #20]
}
 800173c:	46c0      	nop			; (mov r8, r8)
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	46c0      	nop			; (mov r8, r8)
 8001744:	50000400 	.word	0x50000400

08001748 <led_green_off>:
void led_green_off(void) {
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
	LED_G_PORT->ODR &= ~LED_G;
 800174c:	4b04      	ldr	r3, [pc, #16]	; (8001760 <led_green_off+0x18>)
 800174e:	695a      	ldr	r2, [r3, #20]
 8001750:	4b03      	ldr	r3, [pc, #12]	; (8001760 <led_green_off+0x18>)
 8001752:	2108      	movs	r1, #8
 8001754:	438a      	bics	r2, r1
 8001756:	615a      	str	r2, [r3, #20]
}
 8001758:	46c0      	nop			; (mov r8, r8)
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	46c0      	nop			; (mov r8, r8)
 8001760:	50000400 	.word	0x50000400

08001764 <read_time>:

void read_time(void) {
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, (DS3231_I2C_ADDRESS << 1), 0x0, 1, &seconds, 1,
 800176a:	4822      	ldr	r0, [pc, #136]	; (80017f4 <read_time+0x90>)
 800176c:	23fa      	movs	r3, #250	; 0xfa
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	9302      	str	r3, [sp, #8]
 8001772:	2301      	movs	r3, #1
 8001774:	9301      	str	r3, [sp, #4]
 8001776:	4b20      	ldr	r3, [pc, #128]	; (80017f8 <read_time+0x94>)
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	2301      	movs	r3, #1
 800177c:	2200      	movs	r2, #0
 800177e:	21d0      	movs	r1, #208	; 0xd0
 8001780:	f002 fbf4 	bl	8003f6c <HAL_I2C_Mem_Read>
			1000);
	HAL_I2C_Mem_Read(&hi2c1, (DS3231_I2C_ADDRESS << 1), 0x1, 1, &minutes, 1,
 8001784:	481b      	ldr	r0, [pc, #108]	; (80017f4 <read_time+0x90>)
 8001786:	23fa      	movs	r3, #250	; 0xfa
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	9302      	str	r3, [sp, #8]
 800178c:	2301      	movs	r3, #1
 800178e:	9301      	str	r3, [sp, #4]
 8001790:	4b1a      	ldr	r3, [pc, #104]	; (80017fc <read_time+0x98>)
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	2301      	movs	r3, #1
 8001796:	2201      	movs	r2, #1
 8001798:	21d0      	movs	r1, #208	; 0xd0
 800179a:	f002 fbe7 	bl	8003f6c <HAL_I2C_Mem_Read>
			1000);
	HAL_I2C_Mem_Read(&hi2c1, (DS3231_I2C_ADDRESS << 1), 0x2, 1, &hours, 1,
 800179e:	4815      	ldr	r0, [pc, #84]	; (80017f4 <read_time+0x90>)
 80017a0:	23fa      	movs	r3, #250	; 0xfa
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	9302      	str	r3, [sp, #8]
 80017a6:	2301      	movs	r3, #1
 80017a8:	9301      	str	r3, [sp, #4]
 80017aa:	4b15      	ldr	r3, [pc, #84]	; (8001800 <read_time+0x9c>)
 80017ac:	9300      	str	r3, [sp, #0]
 80017ae:	2301      	movs	r3, #1
 80017b0:	2202      	movs	r2, #2
 80017b2:	21d0      	movs	r1, #208	; 0xd0
 80017b4:	f002 fbda 	bl	8003f6c <HAL_I2C_Mem_Read>
			1000);
	seconds = bcd_to_byte(seconds);
 80017b8:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <read_time+0x94>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	0018      	movs	r0, r3
 80017be:	f7ff ff7d 	bl	80016bc <bcd_to_byte>
 80017c2:	0003      	movs	r3, r0
 80017c4:	001a      	movs	r2, r3
 80017c6:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <read_time+0x94>)
 80017c8:	701a      	strb	r2, [r3, #0]
	minutes = bcd_to_byte(minutes);
 80017ca:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <read_time+0x98>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	0018      	movs	r0, r3
 80017d0:	f7ff ff74 	bl	80016bc <bcd_to_byte>
 80017d4:	0003      	movs	r3, r0
 80017d6:	001a      	movs	r2, r3
 80017d8:	4b08      	ldr	r3, [pc, #32]	; (80017fc <read_time+0x98>)
 80017da:	701a      	strb	r2, [r3, #0]
	hours = bcd_to_byte(hours);
 80017dc:	4b08      	ldr	r3, [pc, #32]	; (8001800 <read_time+0x9c>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	0018      	movs	r0, r3
 80017e2:	f7ff ff6b 	bl	80016bc <bcd_to_byte>
 80017e6:	0003      	movs	r3, r0
 80017e8:	001a      	movs	r2, r3
 80017ea:	4b05      	ldr	r3, [pc, #20]	; (8001800 <read_time+0x9c>)
 80017ec:	701a      	strb	r2, [r3, #0]
}
 80017ee:	46c0      	nop			; (mov r8, r8)
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000144 	.word	0x20000144
 80017f8:	20000098 	.word	0x20000098
 80017fc:	20000097 	.word	0x20000097
 8001800:	20000001 	.word	0x20000001

08001804 <write_time>:

void write_time(void) {
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af04      	add	r7, sp, #16
	uint8_t bcd_seconds = byte_to_bcd(seconds);
 800180a:	4b23      	ldr	r3, [pc, #140]	; (8001898 <write_time+0x94>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	0018      	movs	r0, r3
 8001810:	f7ff ff34 	bl	800167c <byte_to_bcd>
 8001814:	0003      	movs	r3, r0
 8001816:	001a      	movs	r2, r3
 8001818:	1dfb      	adds	r3, r7, #7
 800181a:	701a      	strb	r2, [r3, #0]
	uint8_t bcd_minutes = byte_to_bcd(minutes);
 800181c:	4b1f      	ldr	r3, [pc, #124]	; (800189c <write_time+0x98>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	0018      	movs	r0, r3
 8001822:	f7ff ff2b 	bl	800167c <byte_to_bcd>
 8001826:	0003      	movs	r3, r0
 8001828:	001a      	movs	r2, r3
 800182a:	1dbb      	adds	r3, r7, #6
 800182c:	701a      	strb	r2, [r3, #0]
	uint8_t bcd_hours = byte_to_bcd(hours);
 800182e:	4b1c      	ldr	r3, [pc, #112]	; (80018a0 <write_time+0x9c>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	0018      	movs	r0, r3
 8001834:	f7ff ff22 	bl	800167c <byte_to_bcd>
 8001838:	0003      	movs	r3, r0
 800183a:	001a      	movs	r2, r3
 800183c:	1d7b      	adds	r3, r7, #5
 800183e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, (DS3231_I2C_ADDRESS << 1), 0x0, 1, &bcd_seconds,
 8001840:	4818      	ldr	r0, [pc, #96]	; (80018a4 <write_time+0xa0>)
 8001842:	23fa      	movs	r3, #250	; 0xfa
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	9302      	str	r3, [sp, #8]
 8001848:	2301      	movs	r3, #1
 800184a:	9301      	str	r3, [sp, #4]
 800184c:	1dfb      	adds	r3, r7, #7
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	2301      	movs	r3, #1
 8001852:	2200      	movs	r2, #0
 8001854:	21d0      	movs	r1, #208	; 0xd0
 8001856:	f002 fa5b 	bl	8003d10 <HAL_I2C_Mem_Write>
			1, 1000);
	HAL_I2C_Mem_Write(&hi2c1, (DS3231_I2C_ADDRESS << 1), 0x1, 1, &bcd_minutes,
 800185a:	4812      	ldr	r0, [pc, #72]	; (80018a4 <write_time+0xa0>)
 800185c:	23fa      	movs	r3, #250	; 0xfa
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	9302      	str	r3, [sp, #8]
 8001862:	2301      	movs	r3, #1
 8001864:	9301      	str	r3, [sp, #4]
 8001866:	1dbb      	adds	r3, r7, #6
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	2301      	movs	r3, #1
 800186c:	2201      	movs	r2, #1
 800186e:	21d0      	movs	r1, #208	; 0xd0
 8001870:	f002 fa4e 	bl	8003d10 <HAL_I2C_Mem_Write>
			1, 1000);
	HAL_I2C_Mem_Write(&hi2c1, (DS3231_I2C_ADDRESS << 1), 0x2, 1, &bcd_hours, 1,
 8001874:	480b      	ldr	r0, [pc, #44]	; (80018a4 <write_time+0xa0>)
 8001876:	23fa      	movs	r3, #250	; 0xfa
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	9302      	str	r3, [sp, #8]
 800187c:	2301      	movs	r3, #1
 800187e:	9301      	str	r3, [sp, #4]
 8001880:	1d7b      	adds	r3, r7, #5
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	2301      	movs	r3, #1
 8001886:	2202      	movs	r2, #2
 8001888:	21d0      	movs	r1, #208	; 0xd0
 800188a:	f002 fa41 	bl	8003d10 <HAL_I2C_Mem_Write>
			1000);
}
 800188e:	46c0      	nop			; (mov r8, r8)
 8001890:	46bd      	mov	sp, r7
 8001892:	b002      	add	sp, #8
 8001894:	bd80      	pop	{r7, pc}
 8001896:	46c0      	nop			; (mov r8, r8)
 8001898:	20000098 	.word	0x20000098
 800189c:	20000097 	.word	0x20000097
 80018a0:	20000001 	.word	0x20000001
 80018a4:	20000144 	.word	0x20000144

080018a8 <get_battery_voltage>:


float get_battery_voltage(void) {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
//	return 2 * (3.3 * (uint16_t) battery_voltage) / 4095.0;
	return ((uint16_t) battery_voltage) * 0.0016117216117216;
 80018ac:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <get_battery_voltage+0x2c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	0018      	movs	r0, r3
 80018b4:	f7ff fb50 	bl	8000f58 <__aeabi_i2d>
 80018b8:	4a07      	ldr	r2, [pc, #28]	; (80018d8 <get_battery_voltage+0x30>)
 80018ba:	4b08      	ldr	r3, [pc, #32]	; (80018dc <get_battery_voltage+0x34>)
 80018bc:	f7ff f8e0 	bl	8000a80 <__aeabi_dmul>
 80018c0:	0002      	movs	r2, r0
 80018c2:	000b      	movs	r3, r1
 80018c4:	0010      	movs	r0, r2
 80018c6:	0019      	movs	r1, r3
 80018c8:	f7ff fb76 	bl	8000fb8 <__aeabi_d2f>
 80018cc:	1c03      	adds	r3, r0, #0
}
 80018ce:	1c18      	adds	r0, r3, #0
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000090 	.word	0x20000090
 80018d8:	e734d97e 	.word	0xe734d97e
 80018dc:	3f5a680c 	.word	0x3f5a680c

080018e0 <wait_for_input>:
 *  Created on: Jul 21, 2022
 *      Author: Anemiq
 */
#include "input.h"

uint8_t wait_for_input(const uint16_t timeout_ms) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	0002      	movs	r2, r0
 80018e8:	1dbb      	adds	r3, r7, #6
 80018ea:	801a      	strh	r2, [r3, #0]
	wait_for_buttons_released();
 80018ec:	f000 f8c4 	bl	8001a78 <wait_for_buttons_released>
	for (uint16_t i = 0; i < timeout_ms; i += 100) {
 80018f0:	2316      	movs	r3, #22
 80018f2:	18fb      	adds	r3, r7, r3
 80018f4:	2200      	movs	r2, #0
 80018f6:	801a      	strh	r2, [r3, #0]
 80018f8:	e0ac      	b.n	8001a54 <wait_for_input+0x174>
		if (left_button_pressed) {
 80018fa:	4b5d      	ldr	r3, [pc, #372]	; (8001a70 <wait_for_input+0x190>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b00      	cmp	r3, #0
 8001902:	d04c      	beq.n	800199e <wait_for_input+0xbe>
			bool long_press = true;
 8001904:	2315      	movs	r3, #21
 8001906:	18fb      	adds	r3, r7, r3
 8001908:	2201      	movs	r2, #1
 800190a:	701a      	strb	r2, [r3, #0]
			bool both_pressed = false;
 800190c:	2314      	movs	r3, #20
 800190e:	18fb      	adds	r3, r7, r3
 8001910:	2200      	movs	r2, #0
 8001912:	701a      	strb	r2, [r3, #0]
			for (uint16_t j = 0; j < LONG_PRESS_DURATION_MS; j += 100) {
 8001914:	2312      	movs	r3, #18
 8001916:	18fb      	adds	r3, r7, r3
 8001918:	2200      	movs	r2, #0
 800191a:	801a      	strh	r2, [r3, #0]
 800191c:	e028      	b.n	8001970 <wait_for_input+0x90>
				if (left_button_pressed && right_button_pressed) {
 800191e:	4b54      	ldr	r3, [pc, #336]	; (8001a70 <wait_for_input+0x190>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	b2db      	uxtb	r3, r3
 8001924:	2b00      	cmp	r3, #0
 8001926:	d00c      	beq.n	8001942 <wait_for_input+0x62>
 8001928:	4b52      	ldr	r3, [pc, #328]	; (8001a74 <wait_for_input+0x194>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b00      	cmp	r3, #0
 8001930:	d007      	beq.n	8001942 <wait_for_input+0x62>
					both_pressed = true;
 8001932:	2314      	movs	r3, #20
 8001934:	18fb      	adds	r3, r7, r3
 8001936:	2201      	movs	r2, #1
 8001938:	701a      	strb	r2, [r3, #0]
					HAL_Delay(100);
 800193a:	2064      	movs	r0, #100	; 0x64
 800193c:	f001 f916 	bl	8002b6c <HAL_Delay>
 8001940:	e010      	b.n	8001964 <wait_for_input+0x84>
				} else if (left_button_pressed) {
 8001942:	4b4b      	ldr	r3, [pc, #300]	; (8001a70 <wait_for_input+0x190>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	b2db      	uxtb	r3, r3
 8001948:	2b00      	cmp	r3, #0
 800194a:	d007      	beq.n	800195c <wait_for_input+0x7c>
					both_pressed = false;
 800194c:	2314      	movs	r3, #20
 800194e:	18fb      	adds	r3, r7, r3
 8001950:	2200      	movs	r2, #0
 8001952:	701a      	strb	r2, [r3, #0]
					HAL_Delay(100);
 8001954:	2064      	movs	r0, #100	; 0x64
 8001956:	f001 f909 	bl	8002b6c <HAL_Delay>
 800195a:	e003      	b.n	8001964 <wait_for_input+0x84>
				} else
					long_press = false;
 800195c:	2315      	movs	r3, #21
 800195e:	18fb      	adds	r3, r7, r3
 8001960:	2200      	movs	r2, #0
 8001962:	701a      	strb	r2, [r3, #0]
			for (uint16_t j = 0; j < LONG_PRESS_DURATION_MS; j += 100) {
 8001964:	2212      	movs	r2, #18
 8001966:	18bb      	adds	r3, r7, r2
 8001968:	18ba      	adds	r2, r7, r2
 800196a:	8812      	ldrh	r2, [r2, #0]
 800196c:	3264      	adds	r2, #100	; 0x64
 800196e:	801a      	strh	r2, [r3, #0]
 8001970:	2312      	movs	r3, #18
 8001972:	18fb      	adds	r3, r7, r3
 8001974:	881a      	ldrh	r2, [r3, #0]
 8001976:	23fa      	movs	r3, #250	; 0xfa
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	429a      	cmp	r2, r3
 800197c:	d3cf      	bcc.n	800191e <wait_for_input+0x3e>
			}
			if (both_pressed)
 800197e:	2314      	movs	r3, #20
 8001980:	18fb      	adds	r3, r7, r3
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <wait_for_input+0xac>
				return INPUT_BOTH_BUTTONS_LONG_PRESS;
 8001988:	2306      	movs	r3, #6
 800198a:	e06c      	b.n	8001a66 <wait_for_input+0x186>
			if (long_press)
 800198c:	2315      	movs	r3, #21
 800198e:	18fb      	adds	r3, r7, r3
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <wait_for_input+0xba>
				return INPUT_LEFT_BUTTON_LONG_PRESS;
 8001996:	2304      	movs	r3, #4
 8001998:	e065      	b.n	8001a66 <wait_for_input+0x186>
			return INPUT_LEFT_BUTTON_SHORT_PRESS;
 800199a:	2303      	movs	r3, #3
 800199c:	e063      	b.n	8001a66 <wait_for_input+0x186>
		}
		if (right_button_pressed) {
 800199e:	4b35      	ldr	r3, [pc, #212]	; (8001a74 <wait_for_input+0x194>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d04c      	beq.n	8001a42 <wait_for_input+0x162>
			bool long_press = true;
 80019a8:	2311      	movs	r3, #17
 80019aa:	18fb      	adds	r3, r7, r3
 80019ac:	2201      	movs	r2, #1
 80019ae:	701a      	strb	r2, [r3, #0]
			bool both_pressed = false;
 80019b0:	2310      	movs	r3, #16
 80019b2:	18fb      	adds	r3, r7, r3
 80019b4:	2200      	movs	r2, #0
 80019b6:	701a      	strb	r2, [r3, #0]
			for (uint16_t j = 0; j < LONG_PRESS_DURATION_MS; j += 100) {
 80019b8:	230e      	movs	r3, #14
 80019ba:	18fb      	adds	r3, r7, r3
 80019bc:	2200      	movs	r2, #0
 80019be:	801a      	strh	r2, [r3, #0]
 80019c0:	e028      	b.n	8001a14 <wait_for_input+0x134>
				if (right_button_pressed && left_button_pressed) {
 80019c2:	4b2c      	ldr	r3, [pc, #176]	; (8001a74 <wait_for_input+0x194>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d00c      	beq.n	80019e6 <wait_for_input+0x106>
 80019cc:	4b28      	ldr	r3, [pc, #160]	; (8001a70 <wait_for_input+0x190>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d007      	beq.n	80019e6 <wait_for_input+0x106>
					both_pressed = true;
 80019d6:	2310      	movs	r3, #16
 80019d8:	18fb      	adds	r3, r7, r3
 80019da:	2201      	movs	r2, #1
 80019dc:	701a      	strb	r2, [r3, #0]
					HAL_Delay(100);
 80019de:	2064      	movs	r0, #100	; 0x64
 80019e0:	f001 f8c4 	bl	8002b6c <HAL_Delay>
 80019e4:	e010      	b.n	8001a08 <wait_for_input+0x128>
				} else if (right_button_pressed) {
 80019e6:	4b23      	ldr	r3, [pc, #140]	; (8001a74 <wait_for_input+0x194>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d007      	beq.n	8001a00 <wait_for_input+0x120>
					both_pressed = false;
 80019f0:	2310      	movs	r3, #16
 80019f2:	18fb      	adds	r3, r7, r3
 80019f4:	2200      	movs	r2, #0
 80019f6:	701a      	strb	r2, [r3, #0]
					HAL_Delay(100);
 80019f8:	2064      	movs	r0, #100	; 0x64
 80019fa:	f001 f8b7 	bl	8002b6c <HAL_Delay>
 80019fe:	e003      	b.n	8001a08 <wait_for_input+0x128>
				} else
					long_press = false;
 8001a00:	2311      	movs	r3, #17
 8001a02:	18fb      	adds	r3, r7, r3
 8001a04:	2200      	movs	r2, #0
 8001a06:	701a      	strb	r2, [r3, #0]
			for (uint16_t j = 0; j < LONG_PRESS_DURATION_MS; j += 100) {
 8001a08:	220e      	movs	r2, #14
 8001a0a:	18bb      	adds	r3, r7, r2
 8001a0c:	18ba      	adds	r2, r7, r2
 8001a0e:	8812      	ldrh	r2, [r2, #0]
 8001a10:	3264      	adds	r2, #100	; 0x64
 8001a12:	801a      	strh	r2, [r3, #0]
 8001a14:	230e      	movs	r3, #14
 8001a16:	18fb      	adds	r3, r7, r3
 8001a18:	881a      	ldrh	r2, [r3, #0]
 8001a1a:	23fa      	movs	r3, #250	; 0xfa
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d3cf      	bcc.n	80019c2 <wait_for_input+0xe2>
			}
			if (both_pressed)
 8001a22:	2310      	movs	r3, #16
 8001a24:	18fb      	adds	r3, r7, r3
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <wait_for_input+0x150>
				return INPUT_BOTH_BUTTONS_LONG_PRESS;
 8001a2c:	2306      	movs	r3, #6
 8001a2e:	e01a      	b.n	8001a66 <wait_for_input+0x186>
			if (long_press)
 8001a30:	2311      	movs	r3, #17
 8001a32:	18fb      	adds	r3, r7, r3
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <wait_for_input+0x15e>
				return INPUT_RIGHT_BUTTON_LONG_PRESS;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	e013      	b.n	8001a66 <wait_for_input+0x186>
			return INPUT_RIGHT_BUTTON_SHORT_PRESS;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e011      	b.n	8001a66 <wait_for_input+0x186>
		}
		HAL_Delay(100);
 8001a42:	2064      	movs	r0, #100	; 0x64
 8001a44:	f001 f892 	bl	8002b6c <HAL_Delay>
	for (uint16_t i = 0; i < timeout_ms; i += 100) {
 8001a48:	2216      	movs	r2, #22
 8001a4a:	18bb      	adds	r3, r7, r2
 8001a4c:	18ba      	adds	r2, r7, r2
 8001a4e:	8812      	ldrh	r2, [r2, #0]
 8001a50:	3264      	adds	r2, #100	; 0x64
 8001a52:	801a      	strh	r2, [r3, #0]
 8001a54:	2316      	movs	r3, #22
 8001a56:	18fa      	adds	r2, r7, r3
 8001a58:	1dbb      	adds	r3, r7, #6
 8001a5a:	8812      	ldrh	r2, [r2, #0]
 8001a5c:	881b      	ldrh	r3, [r3, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d200      	bcs.n	8001a64 <wait_for_input+0x184>
 8001a62:	e74a      	b.n	80018fa <wait_for_input+0x1a>
	}
	return INPUT_NO_INPUT;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	0018      	movs	r0, r3
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	b006      	add	sp, #24
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	46c0      	nop			; (mov r8, r8)
 8001a70:	20000094 	.word	0x20000094
 8001a74:	20000095 	.word	0x20000095

08001a78 <wait_for_buttons_released>:

void wait_for_buttons_released(void) {
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
	while(left_button_pressed || right_button_pressed) {
 8001a7c:	46c0      	nop			; (mov r8, r8)
 8001a7e:	4b07      	ldr	r3, [pc, #28]	; (8001a9c <wait_for_buttons_released+0x24>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d1fa      	bne.n	8001a7e <wait_for_buttons_released+0x6>
 8001a88:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <wait_for_buttons_released+0x28>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f5      	bne.n	8001a7e <wait_for_buttons_released+0x6>
	}
}
 8001a92:	46c0      	nop			; (mov r8, r8)
 8001a94:	46c0      	nop			; (mov r8, r8)
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	46c0      	nop			; (mov r8, r8)
 8001a9c:	20000094 	.word	0x20000094
 8001aa0:	20000095 	.word	0x20000095

08001aa4 <buzz_motor>:


void buzz_motor(const uint16_t time_ms){
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	0002      	movs	r2, r0
 8001aac:	1dbb      	adds	r3, r7, #6
 8001aae:	801a      	strh	r2, [r3, #0]
	VIB_MOT_GPIO_Port->ODR |= VIB_MOT_Pin;
 8001ab0:	4b0a      	ldr	r3, [pc, #40]	; (8001adc <buzz_motor+0x38>)
 8001ab2:	695a      	ldr	r2, [r3, #20]
 8001ab4:	4b09      	ldr	r3, [pc, #36]	; (8001adc <buzz_motor+0x38>)
 8001ab6:	2180      	movs	r1, #128	; 0x80
 8001ab8:	01c9      	lsls	r1, r1, #7
 8001aba:	430a      	orrs	r2, r1
 8001abc:	615a      	str	r2, [r3, #20]
	HAL_Delay(time_ms);
 8001abe:	1dbb      	adds	r3, r7, #6
 8001ac0:	881b      	ldrh	r3, [r3, #0]
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	f001 f852 	bl	8002b6c <HAL_Delay>
	VIB_MOT_GPIO_Port->ODR &= ~VIB_MOT_Pin;
 8001ac8:	4b04      	ldr	r3, [pc, #16]	; (8001adc <buzz_motor+0x38>)
 8001aca:	695a      	ldr	r2, [r3, #20]
 8001acc:	4b03      	ldr	r3, [pc, #12]	; (8001adc <buzz_motor+0x38>)
 8001ace:	4904      	ldr	r1, [pc, #16]	; (8001ae0 <buzz_motor+0x3c>)
 8001ad0:	400a      	ands	r2, r1
 8001ad2:	615a      	str	r2, [r3, #20]
}
 8001ad4:	46c0      	nop			; (mov r8, r8)
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	b002      	add	sp, #8
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	50000800 	.word	0x50000800
 8001ae0:	ffffbfff 	.word	0xffffbfff

08001ae4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ae8:	f3bf 8f4f 	dsb	sy
}
 8001aec:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aee:	4b04      	ldr	r3, [pc, #16]	; (8001b00 <__NVIC_SystemReset+0x1c>)
 8001af0:	4a04      	ldr	r2, [pc, #16]	; (8001b04 <__NVIC_SystemReset+0x20>)
 8001af2:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001af4:	f3bf 8f4f 	dsb	sy
}
 8001af8:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001afa:	46c0      	nop			; (mov r8, r8)
 8001afc:	e7fd      	b.n	8001afa <__NVIC_SystemReset+0x16>
 8001afe:	46c0      	nop			; (mov r8, r8)
 8001b00:	e000ed00 	.word	0xe000ed00
 8001b04:	05fa0004 	.word	0x05fa0004

08001b08 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001b08:	b5b0      	push	{r4, r5, r7, lr}
 8001b0a:	b094      	sub	sp, #80	; 0x50
 8001b0c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001b0e:	f000 ffbd 	bl	8002a8c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001b12:	f000 f973 	bl	8001dfc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001b16:	f000 fb0b 	bl	8002130 <MX_GPIO_Init>
	MX_DMA_Init();
 8001b1a:	f000 faeb 	bl	80020f4 <MX_DMA_Init>
	MX_ADC_Init();
 8001b1e:	f000 f9df 	bl	8001ee0 <MX_ADC_Init>
	MX_I2C1_Init();
 8001b22:	f000 fa51 	bl	8001fc8 <MX_I2C1_Init>
	MX_TIM2_Init();
 8001b26:	f000 fa8f 	bl	8002048 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	led_green_on();
 8001b2a:	f7ff fdff 	bl	800172c <led_green_on>
	HAL_TIM_Base_Start_IT(&htim2);
 8001b2e:	4ba2      	ldr	r3, [pc, #648]	; (8001db8 <main+0x2b0>)
 8001b30:	0018      	movs	r0, r3
 8001b32:	f003 fe7f 	bl	8005834 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc, &battery_voltage, 2);
 8001b36:	49a1      	ldr	r1, [pc, #644]	; (8001dbc <main+0x2b4>)
 8001b38:	4ba1      	ldr	r3, [pc, #644]	; (8001dc0 <main+0x2b8>)
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	f001 f9c9 	bl	8002ed4 <HAL_ADC_Start_DMA>
	DS3231_EN_PORT->ODR |= DS3231_EN;
 8001b42:	23a0      	movs	r3, #160	; 0xa0
 8001b44:	05db      	lsls	r3, r3, #23
 8001b46:	695a      	ldr	r2, [r3, #20]
 8001b48:	23a0      	movs	r3, #160	; 0xa0
 8001b4a:	05db      	lsls	r3, r3, #23
 8001b4c:	2180      	movs	r1, #128	; 0x80
 8001b4e:	0049      	lsls	r1, r1, #1
 8001b50:	430a      	orrs	r2, r1
 8001b52:	615a      	str	r2, [r3, #20]
	enable_displays();
 8001b54:	f7ff fbcc 	bl	80012f0 <enable_displays>

	if (!check_device(BME280_I2C_ADDRESS)) {
 8001b58:	2076      	movs	r0, #118	; 0x76
 8001b5a:	f000 fbc1 	bl	80022e0 <check_device>
 8001b5e:	0003      	movs	r3, r0
 8001b60:	001a      	movs	r2, r3
 8001b62:	2301      	movs	r3, #1
 8001b64:	4053      	eors	r3, r2
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d00b      	beq.n	8001b84 <main+0x7c>
		print_string("TMP ERR ");
 8001b6c:	4b95      	ldr	r3, [pc, #596]	; (8001dc4 <main+0x2bc>)
 8001b6e:	0018      	movs	r0, r3
 8001b70:	f7ff fc42 	bl	80013f8 <print_string>
		led_red_on();
 8001b74:	f7ff fdbc 	bl	80016f0 <led_red_on>
		HAL_Delay(1000);
 8001b78:	23fa      	movs	r3, #250	; 0xfa
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	f000 fff5 	bl	8002b6c <HAL_Delay>
 8001b82:	e008      	b.n	8001b96 <main+0x8e>
	} else {
		print_string("TMP OK  ");
 8001b84:	4b90      	ldr	r3, [pc, #576]	; (8001dc8 <main+0x2c0>)
 8001b86:	0018      	movs	r0, r3
 8001b88:	f7ff fc36 	bl	80013f8 <print_string>
		HAL_Delay(1000);
 8001b8c:	23fa      	movs	r3, #250	; 0xfa
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	0018      	movs	r0, r3
 8001b92:	f000 ffeb 	bl	8002b6c <HAL_Delay>
	}

	if (!check_device(DS3231_I2C_ADDRESS)) {
 8001b96:	2068      	movs	r0, #104	; 0x68
 8001b98:	f000 fba2 	bl	80022e0 <check_device>
 8001b9c:	0003      	movs	r3, r0
 8001b9e:	001a      	movs	r2, r3
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	4053      	eors	r3, r2
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00c      	beq.n	8001bc4 <main+0xbc>
		print_string("RTC ERR ");
 8001baa:	4b88      	ldr	r3, [pc, #544]	; (8001dcc <main+0x2c4>)
 8001bac:	0018      	movs	r0, r3
 8001bae:	f7ff fc23 	bl	80013f8 <print_string>
		led_red_on();
 8001bb2:	f7ff fd9d 	bl	80016f0 <led_red_on>
		HAL_Delay(1000);
 8001bb6:	23fa      	movs	r3, #250	; 0xfa
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	0018      	movs	r0, r3
 8001bbc:	f000 ffd6 	bl	8002b6c <HAL_Delay>
		NVIC_SystemReset();
 8001bc0:	f7ff ff90 	bl	8001ae4 <__NVIC_SystemReset>
	} else {
		print_string("RTC OK  ");
 8001bc4:	4b82      	ldr	r3, [pc, #520]	; (8001dd0 <main+0x2c8>)
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	f7ff fc16 	bl	80013f8 <print_string>
		HAL_Delay(1000);
 8001bcc:	23fa      	movs	r3, #250	; 0xfa
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	f000 ffcb 	bl	8002b6c <HAL_Delay>
	}

	print_string(" HELLO  ");
 8001bd6:	4b7f      	ldr	r3, [pc, #508]	; (8001dd4 <main+0x2cc>)
 8001bd8:	0018      	movs	r0, r3
 8001bda:	f7ff fc0d 	bl	80013f8 <print_string>
	buzz_motor(300);
 8001bde:	2396      	movs	r3, #150	; 0x96
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	0018      	movs	r0, r3
 8001be4:	f7ff ff5e 	bl	8001aa4 <buzz_motor>
	MenuItem display_partial = { "DISP PAR", print_time_partial, NULL, NULL };
 8001be8:	243c      	movs	r4, #60	; 0x3c
 8001bea:	193b      	adds	r3, r7, r4
 8001bec:	4a7a      	ldr	r2, [pc, #488]	; (8001dd8 <main+0x2d0>)
 8001bee:	ca23      	ldmia	r2!, {r0, r1, r5}
 8001bf0:	c323      	stmia	r3!, {r0, r1, r5}
 8001bf2:	6812      	ldr	r2, [r2, #0]
 8001bf4:	601a      	str	r2, [r3, #0]
	MenuItem display_full = { "DISP FUL", print_time_full, &display_partial,
 8001bf6:	212c      	movs	r1, #44	; 0x2c
 8001bf8:	187b      	adds	r3, r7, r1
 8001bfa:	4a78      	ldr	r2, [pc, #480]	; (8001ddc <main+0x2d4>)
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	187b      	adds	r3, r7, r1
 8001c00:	4a77      	ldr	r2, [pc, #476]	; (8001de0 <main+0x2d8>)
 8001c02:	605a      	str	r2, [r3, #4]
 8001c04:	187b      	adds	r3, r7, r1
 8001c06:	193a      	adds	r2, r7, r4
 8001c08:	609a      	str	r2, [r3, #8]
 8001c0a:	187b      	adds	r3, r7, r1
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	60da      	str	r2, [r3, #12]
	NULL };
	MenuItem display_off = { "DISP OFF", print_time_off, &display_full,
 8001c10:	201c      	movs	r0, #28
 8001c12:	183b      	adds	r3, r7, r0
 8001c14:	4a73      	ldr	r2, [pc, #460]	; (8001de4 <main+0x2dc>)
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	183b      	adds	r3, r7, r0
 8001c1a:	4a73      	ldr	r2, [pc, #460]	; (8001de8 <main+0x2e0>)
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	183b      	adds	r3, r7, r0
 8001c20:	187a      	adds	r2, r7, r1
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	183b      	adds	r3, r7, r0
 8001c26:	193a      	adds	r2, r7, r4
 8001c28:	60da      	str	r2, [r3, #12]
			&display_partial };
	display_full.next = &display_off;
 8001c2a:	187b      	adds	r3, r7, r1
 8001c2c:	183a      	adds	r2, r7, r0
 8001c2e:	60da      	str	r2, [r3, #12]
	display_partial.prev = &display_off;
 8001c30:	193b      	adds	r3, r7, r4
 8001c32:	183a      	adds	r2, r7, r0
 8001c34:	609a      	str	r2, [r3, #8]
	display_partial.next = &display_full;
 8001c36:	193b      	adds	r3, r7, r4
 8001c38:	187a      	adds	r2, r7, r1
 8001c3a:	60da      	str	r2, [r3, #12]

	MenuItem menu = display_full;
 8001c3c:	240c      	movs	r4, #12
 8001c3e:	193b      	adds	r3, r7, r4
 8001c40:	187a      	adds	r2, r7, r1
 8001c42:	ca23      	ldmia	r2!, {r0, r1, r5}
 8001c44:	c323      	stmia	r3!, {r0, r1, r5}
 8001c46:	6812      	ldr	r2, [r2, #0]
 8001c48:	601a      	str	r2, [r3, #0]
	read_time();
 8001c4a:	f7ff fd8b 	bl	8001764 <read_time>
	menu.func();
 8001c4e:	193b      	adds	r3, r7, r4
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	4798      	blx	r3
	led_green_off();
 8001c54:	f7ff fd78 	bl	8001748 <led_green_off>
	led_red_off();
 8001c58:	f7ff fd58 	bl	800170c <led_red_off>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (sleep_timeout_counter < sleep_timeout_s * 2) {
 8001c5c:	4b63      	ldr	r3, [pc, #396]	; (8001dec <main+0x2e4>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	001a      	movs	r2, r3
 8001c64:	4b62      	ldr	r3, [pc, #392]	; (8001df0 <main+0x2e8>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	db00      	blt.n	8001c72 <main+0x16a>
 8001c70:	e08b      	b.n	8001d8a <main+0x282>
			read_time();
 8001c72:	f7ff fd77 	bl	8001764 <read_time>
			enable_displays();
 8001c76:	f7ff fb3b 	bl	80012f0 <enable_displays>
			menu.func();
 8001c7a:	230c      	movs	r3, #12
 8001c7c:	18fb      	adds	r3, r7, r3
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	4798      	blx	r3
			switch (wait_for_input(500)) {
 8001c82:	23fa      	movs	r3, #250	; 0xfa
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	0018      	movs	r0, r3
 8001c88:	f7ff fe2a 	bl	80018e0 <wait_for_input>
 8001c8c:	0003      	movs	r3, r0
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	d011      	beq.n	8001cb6 <main+0x1ae>
 8001c92:	dc6e      	bgt.n	8001d72 <main+0x26a>
 8001c94:	2b03      	cmp	r3, #3
 8001c96:	d005      	beq.n	8001ca4 <main+0x19c>
 8001c98:	dc6b      	bgt.n	8001d72 <main+0x26a>
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d05d      	beq.n	8001d5a <main+0x252>
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d064      	beq.n	8001d6c <main+0x264>
 8001ca2:	e066      	b.n	8001d72 <main+0x26a>
			case INPUT_LEFT_BUTTON_SHORT_PRESS:
				menu = *menu.prev;
 8001ca4:	210c      	movs	r1, #12
 8001ca6:	187b      	adds	r3, r7, r1
 8001ca8:	689a      	ldr	r2, [r3, #8]
 8001caa:	187b      	adds	r3, r7, r1
 8001cac:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001cae:	c313      	stmia	r3!, {r0, r1, r4}
 8001cb0:	6812      	ldr	r2, [r2, #0]
 8001cb2:	601a      	str	r2, [r3, #0]
				break;
 8001cb4:	e05d      	b.n	8001d72 <main+0x26a>
			case INPUT_LEFT_BUTTON_LONG_PRESS:
				asm("nop");
 8001cb6:	46c0      	nop			; (mov r8, r8)
				float vbat = get_battery_voltage();
 8001cb8:	f7ff fdf6 	bl	80018a8 <get_battery_voltage>
 8001cbc:	1c03      	adds	r3, r0, #0
 8001cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
				char buff[9] = { 'B', 'T', ' ', 48 + (uint8_t) vbat, '.', 48
 8001cc0:	003b      	movs	r3, r7
 8001cc2:	2242      	movs	r2, #66	; 0x42
 8001cc4:	701a      	strb	r2, [r3, #0]
 8001cc6:	003b      	movs	r3, r7
 8001cc8:	2254      	movs	r2, #84	; 0x54
 8001cca:	705a      	strb	r2, [r3, #1]
 8001ccc:	003b      	movs	r3, r7
 8001cce:	2220      	movs	r2, #32
 8001cd0:	709a      	strb	r2, [r3, #2]
 8001cd2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001cd4:	f7fe fafc 	bl	80002d0 <__aeabi_f2uiz>
 8001cd8:	0003      	movs	r3, r0
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	3330      	adds	r3, #48	; 0x30
 8001cde:	b2da      	uxtb	r2, r3
 8001ce0:	003b      	movs	r3, r7
 8001ce2:	70da      	strb	r2, [r3, #3]
 8001ce4:	003b      	movs	r3, r7
 8001ce6:	222e      	movs	r2, #46	; 0x2e
 8001ce8:	711a      	strb	r2, [r3, #4]
						+ ((uint8_t) (vbat * 10) % 10), 48
 8001cea:	4942      	ldr	r1, [pc, #264]	; (8001df4 <main+0x2ec>)
 8001cec:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001cee:	f7fe fbd3 	bl	8000498 <__aeabi_fmul>
 8001cf2:	1c03      	adds	r3, r0, #0
 8001cf4:	1c18      	adds	r0, r3, #0
 8001cf6:	f7fe faeb 	bl	80002d0 <__aeabi_f2uiz>
 8001cfa:	0003      	movs	r3, r0
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	210a      	movs	r1, #10
 8001d00:	0018      	movs	r0, r3
 8001d02:	f7fe fa91 	bl	8000228 <__aeabi_uidivmod>
 8001d06:	000b      	movs	r3, r1
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	3330      	adds	r3, #48	; 0x30
 8001d0c:	b2da      	uxtb	r2, r3
				char buff[9] = { 'B', 'T', ' ', 48 + (uint8_t) vbat, '.', 48
 8001d0e:	003b      	movs	r3, r7
 8001d10:	715a      	strb	r2, [r3, #5]
						+ ((uint8_t) (vbat * 100) % 10), 'V', '\0' };
 8001d12:	4939      	ldr	r1, [pc, #228]	; (8001df8 <main+0x2f0>)
 8001d14:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001d16:	f7fe fbbf 	bl	8000498 <__aeabi_fmul>
 8001d1a:	1c03      	adds	r3, r0, #0
 8001d1c:	1c18      	adds	r0, r3, #0
 8001d1e:	f7fe fad7 	bl	80002d0 <__aeabi_f2uiz>
 8001d22:	0003      	movs	r3, r0
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	210a      	movs	r1, #10
 8001d28:	0018      	movs	r0, r3
 8001d2a:	f7fe fa7d 	bl	8000228 <__aeabi_uidivmod>
 8001d2e:	000b      	movs	r3, r1
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	3330      	adds	r3, #48	; 0x30
 8001d34:	b2da      	uxtb	r2, r3
				char buff[9] = { 'B', 'T', ' ', 48 + (uint8_t) vbat, '.', 48
 8001d36:	003b      	movs	r3, r7
 8001d38:	719a      	strb	r2, [r3, #6]
 8001d3a:	003b      	movs	r3, r7
 8001d3c:	2256      	movs	r2, #86	; 0x56
 8001d3e:	71da      	strb	r2, [r3, #7]
 8001d40:	003b      	movs	r3, r7
 8001d42:	2200      	movs	r2, #0
 8001d44:	721a      	strb	r2, [r3, #8]
				print_string(buff);
 8001d46:	003b      	movs	r3, r7
 8001d48:	0018      	movs	r0, r3
 8001d4a:	f7ff fb55 	bl	80013f8 <print_string>
				buzz_motor(100);
 8001d4e:	2064      	movs	r0, #100	; 0x64
 8001d50:	f7ff fea8 	bl	8001aa4 <buzz_motor>
				wait_for_buttons_released();
 8001d54:	f7ff fe90 	bl	8001a78 <wait_for_buttons_released>
				break;
 8001d58:	e00b      	b.n	8001d72 <main+0x26a>
			case INPUT_RIGHT_BUTTON_SHORT_PRESS:
				menu = *menu.next;
 8001d5a:	210c      	movs	r1, #12
 8001d5c:	187b      	adds	r3, r7, r1
 8001d5e:	68da      	ldr	r2, [r3, #12]
 8001d60:	187b      	adds	r3, r7, r1
 8001d62:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001d64:	c313      	stmia	r3!, {r0, r1, r4}
 8001d66:	6812      	ldr	r2, [r2, #0]
 8001d68:	601a      	str	r2, [r3, #0]
				break;
 8001d6a:	e002      	b.n	8001d72 <main+0x26a>
			case INPUT_RIGHT_BUTTON_LONG_PRESS:
				enter_menu();
 8001d6c:	f000 fc36 	bl	80025dc <enter_menu>
				break;
 8001d70:	46c0      	nop			; (mov r8, r8)
			}
			menu.func();
 8001d72:	230c      	movs	r3, #12
 8001d74:	18fb      	adds	r3, r7, r3
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	4798      	blx	r3
			sleep_timeout_counter++;
 8001d7a:	4b1c      	ldr	r3, [pc, #112]	; (8001dec <main+0x2e4>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	3301      	adds	r3, #1
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	4b19      	ldr	r3, [pc, #100]	; (8001dec <main+0x2e4>)
 8001d86:	701a      	strb	r2, [r3, #0]
 8001d88:	e768      	b.n	8001c5c <main+0x154>
		} else {
			disable_displays();
 8001d8a:	f7ff fab6 	bl	80012fa <disable_displays>
			led_red_off();
 8001d8e:	f7ff fcbd 	bl	800170c <led_red_off>
			led_green_off();
 8001d92:	f7ff fcd9 	bl	8001748 <led_green_off>
			print_time_off();
 8001d96:	f7ff fbeb 	bl	8001570 <print_time_off>
			HAL_SuspendTick();
 8001d9a:	f000 ff0b 	bl	8002bb4 <HAL_SuspendTick>
			HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8001d9e:	2101      	movs	r1, #1
 8001da0:	2001      	movs	r0, #1
 8001da2:	f002 fe1b 	bl	80049dc <HAL_PWR_EnterSTOPMode>
			read_time();
 8001da6:	f7ff fcdd 	bl	8001764 <read_time>
			menu.func();
 8001daa:	230c      	movs	r3, #12
 8001dac:	18fb      	adds	r3, r7, r3
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	4798      	blx	r3
			wait_for_buttons_released();
 8001db2:	f7ff fe61 	bl	8001a78 <wait_for_buttons_released>
		if (sleep_timeout_counter < sleep_timeout_s * 2) {
 8001db6:	e751      	b.n	8001c5c <main+0x154>
 8001db8:	20000190 	.word	0x20000190
 8001dbc:	20000090 	.word	0x20000090
 8001dc0:	200000a0 	.word	0x200000a0
 8001dc4:	080066e0 	.word	0x080066e0
 8001dc8:	080066ec 	.word	0x080066ec
 8001dcc:	080066f8 	.word	0x080066f8
 8001dd0:	08006704 	.word	0x08006704
 8001dd4:	08006710 	.word	0x08006710
 8001dd8:	08006734 	.word	0x08006734
 8001ddc:	0800671c 	.word	0x0800671c
 8001de0:	08001561 	.word	0x08001561
 8001de4:	08006728 	.word	0x08006728
 8001de8:	08001571 	.word	0x08001571
 8001dec:	20000096 	.word	0x20000096
 8001df0:	20000000 	.word	0x20000000
 8001df4:	41200000 	.word	0x41200000
 8001df8:	42c80000 	.word	0x42c80000

08001dfc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001dfc:	b590      	push	{r4, r7, lr}
 8001dfe:	b099      	sub	sp, #100	; 0x64
 8001e00:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001e02:	242c      	movs	r4, #44	; 0x2c
 8001e04:	193b      	adds	r3, r7, r4
 8001e06:	0018      	movs	r0, r3
 8001e08:	2334      	movs	r3, #52	; 0x34
 8001e0a:	001a      	movs	r2, r3
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	f003 ffaa 	bl	8005d66 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001e12:	2318      	movs	r3, #24
 8001e14:	18fb      	adds	r3, r7, r3
 8001e16:	0018      	movs	r0, r3
 8001e18:	2314      	movs	r3, #20
 8001e1a:	001a      	movs	r2, r3
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	f003 ffa2 	bl	8005d66 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001e22:	003b      	movs	r3, r7
 8001e24:	0018      	movs	r0, r3
 8001e26:	2318      	movs	r3, #24
 8001e28:	001a      	movs	r2, r3
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	f003 ff9b 	bl	8005d66 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e30:	4b29      	ldr	r3, [pc, #164]	; (8001ed8 <SystemClock_Config+0xdc>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a29      	ldr	r2, [pc, #164]	; (8001edc <SystemClock_Config+0xe0>)
 8001e36:	401a      	ands	r2, r3
 8001e38:	4b27      	ldr	r3, [pc, #156]	; (8001ed8 <SystemClock_Config+0xdc>)
 8001e3a:	2180      	movs	r1, #128	; 0x80
 8001e3c:	0109      	lsls	r1, r1, #4
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	601a      	str	r2, [r3, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e42:	0021      	movs	r1, r4
 8001e44:	187b      	adds	r3, r7, r1
 8001e46:	2202      	movs	r2, #2
 8001e48:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e4a:	187b      	adds	r3, r7, r1
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e50:	187b      	adds	r3, r7, r1
 8001e52:	2210      	movs	r2, #16
 8001e54:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e56:	187b      	adds	r3, r7, r1
 8001e58:	2202      	movs	r2, #2
 8001e5a:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e5c:	187b      	adds	r3, r7, r1
 8001e5e:	2200      	movs	r2, #0
 8001e60:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8001e62:	187b      	adds	r3, r7, r1
 8001e64:	2280      	movs	r2, #128	; 0x80
 8001e66:	02d2      	lsls	r2, r2, #11
 8001e68:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001e6a:	187b      	adds	r3, r7, r1
 8001e6c:	2280      	movs	r2, #128	; 0x80
 8001e6e:	03d2      	lsls	r2, r2, #15
 8001e70:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001e72:	187b      	adds	r3, r7, r1
 8001e74:	0018      	movs	r0, r3
 8001e76:	f002 fe0d 	bl	8004a94 <HAL_RCC_OscConfig>
 8001e7a:	1e03      	subs	r3, r0, #0
 8001e7c:	d001      	beq.n	8001e82 <SystemClock_Config+0x86>
		Error_Handler();
 8001e7e:	f000 fa49 	bl	8002314 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001e82:	2118      	movs	r1, #24
 8001e84:	187b      	adds	r3, r7, r1
 8001e86:	220f      	movs	r2, #15
 8001e88:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e8a:	187b      	adds	r3, r7, r1
 8001e8c:	2203      	movs	r2, #3
 8001e8e:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001e90:	187b      	adds	r3, r7, r1
 8001e92:	2280      	movs	r2, #128	; 0x80
 8001e94:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e96:	187b      	adds	r3, r7, r1
 8001e98:	2200      	movs	r2, #0
 8001e9a:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e9c:	187b      	adds	r3, r7, r1
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001ea2:	187b      	adds	r3, r7, r1
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	f003 f970 	bl	800518c <HAL_RCC_ClockConfig>
 8001eac:	1e03      	subs	r3, r0, #0
 8001eae:	d001      	beq.n	8001eb4 <SystemClock_Config+0xb8>
		Error_Handler();
 8001eb0:	f000 fa30 	bl	8002314 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001eb4:	003b      	movs	r3, r7
 8001eb6:	2208      	movs	r2, #8
 8001eb8:	601a      	str	r2, [r3, #0]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001eba:	003b      	movs	r3, r7
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	611a      	str	r2, [r3, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001ec0:	003b      	movs	r3, r7
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	f003 fb50 	bl	8005568 <HAL_RCCEx_PeriphCLKConfig>
 8001ec8:	1e03      	subs	r3, r0, #0
 8001eca:	d001      	beq.n	8001ed0 <SystemClock_Config+0xd4>
		Error_Handler();
 8001ecc:	f000 fa22 	bl	8002314 <Error_Handler>
	}
}
 8001ed0:	46c0      	nop			; (mov r8, r8)
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	b019      	add	sp, #100	; 0x64
 8001ed6:	bd90      	pop	{r4, r7, pc}
 8001ed8:	40007000 	.word	0x40007000
 8001edc:	ffffe7ff 	.word	0xffffe7ff

08001ee0 <MX_ADC_Init>:
/**
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void) {
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC_Init 0 */

	/* USER CODE END ADC_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001ee6:	003b      	movs	r3, r7
 8001ee8:	0018      	movs	r0, r3
 8001eea:	2308      	movs	r3, #8
 8001eec:	001a      	movs	r2, r3
 8001eee:	2100      	movs	r1, #0
 8001ef0:	f003 ff39 	bl	8005d66 <memset>

	/* USER CODE END ADC_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC1;
 8001ef4:	4b30      	ldr	r3, [pc, #192]	; (8001fb8 <MX_ADC_Init+0xd8>)
 8001ef6:	4a31      	ldr	r2, [pc, #196]	; (8001fbc <MX_ADC_Init+0xdc>)
 8001ef8:	601a      	str	r2, [r3, #0]
	hadc.Init.OversamplingMode = DISABLE;
 8001efa:	4b2f      	ldr	r3, [pc, #188]	; (8001fb8 <MX_ADC_Init+0xd8>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001f00:	4b2d      	ldr	r3, [pc, #180]	; (8001fb8 <MX_ADC_Init+0xd8>)
 8001f02:	2280      	movs	r2, #128	; 0x80
 8001f04:	02d2      	lsls	r2, r2, #11
 8001f06:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001f08:	4b2b      	ldr	r3, [pc, #172]	; (8001fb8 <MX_ADC_Init+0xd8>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	609a      	str	r2, [r3, #8]
	hadc.Init.SamplingTime = ADC_SAMPLETIME_79CYCLES_5;
 8001f0e:	4b2a      	ldr	r3, [pc, #168]	; (8001fb8 <MX_ADC_Init+0xd8>)
 8001f10:	2206      	movs	r2, #6
 8001f12:	639a      	str	r2, [r3, #56]	; 0x38
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001f14:	4b28      	ldr	r3, [pc, #160]	; (8001fb8 <MX_ADC_Init+0xd8>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	611a      	str	r2, [r3, #16]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f1a:	4b27      	ldr	r3, [pc, #156]	; (8001fb8 <MX_ADC_Init+0xd8>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	60da      	str	r2, [r3, #12]
	hadc.Init.ContinuousConvMode = DISABLE;
 8001f20:	4b25      	ldr	r3, [pc, #148]	; (8001fb8 <MX_ADC_Init+0xd8>)
 8001f22:	2220      	movs	r2, #32
 8001f24:	2100      	movs	r1, #0
 8001f26:	5499      	strb	r1, [r3, r2]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 8001f28:	4b23      	ldr	r3, [pc, #140]	; (8001fb8 <MX_ADC_Init+0xd8>)
 8001f2a:	2221      	movs	r2, #33	; 0x21
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	5499      	strb	r1, [r3, r2]
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001f30:	4b21      	ldr	r3, [pc, #132]	; (8001fb8 <MX_ADC_Init+0xd8>)
 8001f32:	2280      	movs	r2, #128	; 0x80
 8001f34:	00d2      	lsls	r2, r2, #3
 8001f36:	629a      	str	r2, [r3, #40]	; 0x28
	hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001f38:	4b1f      	ldr	r3, [pc, #124]	; (8001fb8 <MX_ADC_Init+0xd8>)
 8001f3a:	2280      	movs	r2, #128	; 0x80
 8001f3c:	625a      	str	r2, [r3, #36]	; 0x24
	hadc.Init.DMAContinuousRequests = ENABLE;
 8001f3e:	4b1e      	ldr	r3, [pc, #120]	; (8001fb8 <MX_ADC_Init+0xd8>)
 8001f40:	222c      	movs	r2, #44	; 0x2c
 8001f42:	2101      	movs	r1, #1
 8001f44:	5499      	strb	r1, [r3, r2]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f46:	4b1c      	ldr	r3, [pc, #112]	; (8001fb8 <MX_ADC_Init+0xd8>)
 8001f48:	2204      	movs	r2, #4
 8001f4a:	615a      	str	r2, [r3, #20]
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001f4c:	4b1a      	ldr	r3, [pc, #104]	; (8001fb8 <MX_ADC_Init+0xd8>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	631a      	str	r2, [r3, #48]	; 0x30
	hadc.Init.LowPowerAutoWait = DISABLE;
 8001f52:	4b19      	ldr	r3, [pc, #100]	; (8001fb8 <MX_ADC_Init+0xd8>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	619a      	str	r2, [r3, #24]
	hadc.Init.LowPowerFrequencyMode = DISABLE;
 8001f58:	4b17      	ldr	r3, [pc, #92]	; (8001fb8 <MX_ADC_Init+0xd8>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	635a      	str	r2, [r3, #52]	; 0x34
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001f5e:	4b16      	ldr	r3, [pc, #88]	; (8001fb8 <MX_ADC_Init+0xd8>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	61da      	str	r2, [r3, #28]
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8001f64:	4b14      	ldr	r3, [pc, #80]	; (8001fb8 <MX_ADC_Init+0xd8>)
 8001f66:	0018      	movs	r0, r3
 8001f68:	f000 fe40 	bl	8002bec <HAL_ADC_Init>
 8001f6c:	1e03      	subs	r3, r0, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_ADC_Init+0x94>
		Error_Handler();
 8001f70:	f000 f9d0 	bl	8002314 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_7;
 8001f74:	003b      	movs	r3, r7
 8001f76:	4a12      	ldr	r2, [pc, #72]	; (8001fc0 <MX_ADC_Init+0xe0>)
 8001f78:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001f7a:	003b      	movs	r3, r7
 8001f7c:	2280      	movs	r2, #128	; 0x80
 8001f7e:	0152      	lsls	r2, r2, #5
 8001f80:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8001f82:	003a      	movs	r2, r7
 8001f84:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <MX_ADC_Init+0xd8>)
 8001f86:	0011      	movs	r1, r2
 8001f88:	0018      	movs	r0, r3
 8001f8a:	f001 f83d 	bl	8003008 <HAL_ADC_ConfigChannel>
 8001f8e:	1e03      	subs	r3, r0, #0
 8001f90:	d001      	beq.n	8001f96 <MX_ADC_Init+0xb6>
		Error_Handler();
 8001f92:	f000 f9bf 	bl	8002314 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001f96:	003b      	movs	r3, r7
 8001f98:	4a0a      	ldr	r2, [pc, #40]	; (8001fc4 <MX_ADC_Init+0xe4>)
 8001f9a:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8001f9c:	003a      	movs	r2, r7
 8001f9e:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <MX_ADC_Init+0xd8>)
 8001fa0:	0011      	movs	r1, r2
 8001fa2:	0018      	movs	r0, r3
 8001fa4:	f001 f830 	bl	8003008 <HAL_ADC_ConfigChannel>
 8001fa8:	1e03      	subs	r3, r0, #0
 8001faa:	d001      	beq.n	8001fb0 <MX_ADC_Init+0xd0>
		Error_Handler();
 8001fac:	f000 f9b2 	bl	8002314 <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */

}
 8001fb0:	46c0      	nop			; (mov r8, r8)
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	b002      	add	sp, #8
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	200000a0 	.word	0x200000a0
 8001fbc:	40012400 	.word	0x40012400
 8001fc0:	1c000080 	.word	0x1c000080
 8001fc4:	44020000 	.word	0x44020000

08001fc8 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001fcc:	4b1b      	ldr	r3, [pc, #108]	; (800203c <MX_I2C1_Init+0x74>)
 8001fce:	4a1c      	ldr	r2, [pc, #112]	; (8002040 <MX_I2C1_Init+0x78>)
 8001fd0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x0010061A;
 8001fd2:	4b1a      	ldr	r3, [pc, #104]	; (800203c <MX_I2C1_Init+0x74>)
 8001fd4:	4a1b      	ldr	r2, [pc, #108]	; (8002044 <MX_I2C1_Init+0x7c>)
 8001fd6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8001fd8:	4b18      	ldr	r3, [pc, #96]	; (800203c <MX_I2C1_Init+0x74>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fde:	4b17      	ldr	r3, [pc, #92]	; (800203c <MX_I2C1_Init+0x74>)
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fe4:	4b15      	ldr	r3, [pc, #84]	; (800203c <MX_I2C1_Init+0x74>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8001fea:	4b14      	ldr	r3, [pc, #80]	; (800203c <MX_I2C1_Init+0x74>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ff0:	4b12      	ldr	r3, [pc, #72]	; (800203c <MX_I2C1_Init+0x74>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ff6:	4b11      	ldr	r3, [pc, #68]	; (800203c <MX_I2C1_Init+0x74>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ffc:	4b0f      	ldr	r3, [pc, #60]	; (800203c <MX_I2C1_Init+0x74>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002002:	4b0e      	ldr	r3, [pc, #56]	; (800203c <MX_I2C1_Init+0x74>)
 8002004:	0018      	movs	r0, r3
 8002006:	f001 fded 	bl	8003be4 <HAL_I2C_Init>
 800200a:	1e03      	subs	r3, r0, #0
 800200c:	d001      	beq.n	8002012 <MX_I2C1_Init+0x4a>
		Error_Handler();
 800200e:	f000 f981 	bl	8002314 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8002012:	4b0a      	ldr	r3, [pc, #40]	; (800203c <MX_I2C1_Init+0x74>)
 8002014:	2100      	movs	r1, #0
 8002016:	0018      	movs	r0, r3
 8002018:	f002 fc48 	bl	80048ac <HAL_I2CEx_ConfigAnalogFilter>
 800201c:	1e03      	subs	r3, r0, #0
 800201e:	d001      	beq.n	8002024 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8002020:	f000 f978 	bl	8002314 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8002024:	4b05      	ldr	r3, [pc, #20]	; (800203c <MX_I2C1_Init+0x74>)
 8002026:	2100      	movs	r1, #0
 8002028:	0018      	movs	r0, r3
 800202a:	f002 fc8b 	bl	8004944 <HAL_I2CEx_ConfigDigitalFilter>
 800202e:	1e03      	subs	r3, r0, #0
 8002030:	d001      	beq.n	8002036 <MX_I2C1_Init+0x6e>
		Error_Handler();
 8002032:	f000 f96f 	bl	8002314 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	20000144 	.word	0x20000144
 8002040:	40005400 	.word	0x40005400
 8002044:	0010061a 	.word	0x0010061a

08002048 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800204e:	2308      	movs	r3, #8
 8002050:	18fb      	adds	r3, r7, r3
 8002052:	0018      	movs	r0, r3
 8002054:	2310      	movs	r3, #16
 8002056:	001a      	movs	r2, r3
 8002058:	2100      	movs	r1, #0
 800205a:	f003 fe84 	bl	8005d66 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800205e:	003b      	movs	r3, r7
 8002060:	0018      	movs	r0, r3
 8002062:	2308      	movs	r3, #8
 8002064:	001a      	movs	r2, r3
 8002066:	2100      	movs	r1, #0
 8002068:	f003 fe7d 	bl	8005d66 <memset>

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800206c:	4b1e      	ldr	r3, [pc, #120]	; (80020e8 <MX_TIM2_Init+0xa0>)
 800206e:	2280      	movs	r2, #128	; 0x80
 8002070:	05d2      	lsls	r2, r2, #23
 8002072:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 16000 - 1;
 8002074:	4b1c      	ldr	r3, [pc, #112]	; (80020e8 <MX_TIM2_Init+0xa0>)
 8002076:	4a1d      	ldr	r2, [pc, #116]	; (80020ec <MX_TIM2_Init+0xa4>)
 8002078:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800207a:	4b1b      	ldr	r3, [pc, #108]	; (80020e8 <MX_TIM2_Init+0xa0>)
 800207c:	2200      	movs	r2, #0
 800207e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 5000;
 8002080:	4b19      	ldr	r3, [pc, #100]	; (80020e8 <MX_TIM2_Init+0xa0>)
 8002082:	4a1b      	ldr	r2, [pc, #108]	; (80020f0 <MX_TIM2_Init+0xa8>)
 8002084:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002086:	4b18      	ldr	r3, [pc, #96]	; (80020e8 <MX_TIM2_Init+0xa0>)
 8002088:	2200      	movs	r2, #0
 800208a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800208c:	4b16      	ldr	r3, [pc, #88]	; (80020e8 <MX_TIM2_Init+0xa0>)
 800208e:	2200      	movs	r2, #0
 8002090:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8002092:	4b15      	ldr	r3, [pc, #84]	; (80020e8 <MX_TIM2_Init+0xa0>)
 8002094:	0018      	movs	r0, r3
 8002096:	f003 fb8d 	bl	80057b4 <HAL_TIM_Base_Init>
 800209a:	1e03      	subs	r3, r0, #0
 800209c:	d001      	beq.n	80020a2 <MX_TIM2_Init+0x5a>
		Error_Handler();
 800209e:	f000 f939 	bl	8002314 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020a2:	2108      	movs	r1, #8
 80020a4:	187b      	adds	r3, r7, r1
 80020a6:	2280      	movs	r2, #128	; 0x80
 80020a8:	0152      	lsls	r2, r2, #5
 80020aa:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80020ac:	187a      	adds	r2, r7, r1
 80020ae:	4b0e      	ldr	r3, [pc, #56]	; (80020e8 <MX_TIM2_Init+0xa0>)
 80020b0:	0011      	movs	r1, r2
 80020b2:	0018      	movs	r0, r3
 80020b4:	f003 fc0a 	bl	80058cc <HAL_TIM_ConfigClockSource>
 80020b8:	1e03      	subs	r3, r0, #0
 80020ba:	d001      	beq.n	80020c0 <MX_TIM2_Init+0x78>
		Error_Handler();
 80020bc:	f000 f92a 	bl	8002314 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80020c0:	003b      	movs	r3, r7
 80020c2:	2220      	movs	r2, #32
 80020c4:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020c6:	003b      	movs	r3, r7
 80020c8:	2200      	movs	r2, #0
 80020ca:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80020cc:	003a      	movs	r2, r7
 80020ce:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <MX_TIM2_Init+0xa0>)
 80020d0:	0011      	movs	r1, r2
 80020d2:	0018      	movs	r0, r3
 80020d4:	f003 fdbc 	bl	8005c50 <HAL_TIMEx_MasterConfigSynchronization>
 80020d8:	1e03      	subs	r3, r0, #0
 80020da:	d001      	beq.n	80020e0 <MX_TIM2_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 80020dc:	f000 f91a 	bl	8002314 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80020e0:	46c0      	nop			; (mov r8, r8)
 80020e2:	46bd      	mov	sp, r7
 80020e4:	b006      	add	sp, #24
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	20000190 	.word	0x20000190
 80020ec:	00003e7f 	.word	0x00003e7f
 80020f0:	00001388 	.word	0x00001388

080020f4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80020fa:	4b0c      	ldr	r3, [pc, #48]	; (800212c <MX_DMA_Init+0x38>)
 80020fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020fe:	4b0b      	ldr	r3, [pc, #44]	; (800212c <MX_DMA_Init+0x38>)
 8002100:	2101      	movs	r1, #1
 8002102:	430a      	orrs	r2, r1
 8002104:	631a      	str	r2, [r3, #48]	; 0x30
 8002106:	4b09      	ldr	r3, [pc, #36]	; (800212c <MX_DMA_Init+0x38>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	2201      	movs	r2, #1
 800210c:	4013      	ands	r3, r2
 800210e:	607b      	str	r3, [r7, #4]
 8002110:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002112:	2200      	movs	r2, #0
 8002114:	2100      	movs	r1, #0
 8002116:	2009      	movs	r0, #9
 8002118:	f001 f9b4 	bl	8003484 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800211c:	2009      	movs	r0, #9
 800211e:	f001 f9c6 	bl	80034ae <HAL_NVIC_EnableIRQ>

}
 8002122:	46c0      	nop			; (mov r8, r8)
 8002124:	46bd      	mov	sp, r7
 8002126:	b002      	add	sp, #8
 8002128:	bd80      	pop	{r7, pc}
 800212a:	46c0      	nop			; (mov r8, r8)
 800212c:	40021000 	.word	0x40021000

08002130 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002130:	b590      	push	{r4, r7, lr}
 8002132:	b089      	sub	sp, #36	; 0x24
 8002134:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002136:	240c      	movs	r4, #12
 8002138:	193b      	adds	r3, r7, r4
 800213a:	0018      	movs	r0, r3
 800213c:	2314      	movs	r3, #20
 800213e:	001a      	movs	r2, r3
 8002140:	2100      	movs	r1, #0
 8002142:	f003 fe10 	bl	8005d66 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002146:	4b62      	ldr	r3, [pc, #392]	; (80022d0 <MX_GPIO_Init+0x1a0>)
 8002148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800214a:	4b61      	ldr	r3, [pc, #388]	; (80022d0 <MX_GPIO_Init+0x1a0>)
 800214c:	2104      	movs	r1, #4
 800214e:	430a      	orrs	r2, r1
 8002150:	62da      	str	r2, [r3, #44]	; 0x2c
 8002152:	4b5f      	ldr	r3, [pc, #380]	; (80022d0 <MX_GPIO_Init+0x1a0>)
 8002154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002156:	2204      	movs	r2, #4
 8002158:	4013      	ands	r3, r2
 800215a:	60bb      	str	r3, [r7, #8]
 800215c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800215e:	4b5c      	ldr	r3, [pc, #368]	; (80022d0 <MX_GPIO_Init+0x1a0>)
 8002160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002162:	4b5b      	ldr	r3, [pc, #364]	; (80022d0 <MX_GPIO_Init+0x1a0>)
 8002164:	2101      	movs	r1, #1
 8002166:	430a      	orrs	r2, r1
 8002168:	62da      	str	r2, [r3, #44]	; 0x2c
 800216a:	4b59      	ldr	r3, [pc, #356]	; (80022d0 <MX_GPIO_Init+0x1a0>)
 800216c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216e:	2201      	movs	r2, #1
 8002170:	4013      	ands	r3, r2
 8002172:	607b      	str	r3, [r7, #4]
 8002174:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002176:	4b56      	ldr	r3, [pc, #344]	; (80022d0 <MX_GPIO_Init+0x1a0>)
 8002178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800217a:	4b55      	ldr	r3, [pc, #340]	; (80022d0 <MX_GPIO_Init+0x1a0>)
 800217c:	2102      	movs	r1, #2
 800217e:	430a      	orrs	r2, r1
 8002180:	62da      	str	r2, [r3, #44]	; 0x2c
 8002182:	4b53      	ldr	r3, [pc, #332]	; (80022d0 <MX_GPIO_Init+0x1a0>)
 8002184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002186:	2202      	movs	r2, #2
 8002188:	4013      	ands	r3, r2
 800218a:	603b      	str	r3, [r7, #0]
 800218c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(VIB_MOT_GPIO_Port, VIB_MOT_Pin, GPIO_PIN_RESET);
 800218e:	2380      	movs	r3, #128	; 0x80
 8002190:	01db      	lsls	r3, r3, #7
 8002192:	4850      	ldr	r0, [pc, #320]	; (80022d4 <MX_GPIO_Init+0x1a4>)
 8002194:	2200      	movs	r2, #0
 8002196:	0019      	movs	r1, r3
 8002198:	f001 fceb 	bl	8003b72 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 800219c:	494e      	ldr	r1, [pc, #312]	; (80022d8 <MX_GPIO_Init+0x1a8>)
 800219e:	23a0      	movs	r3, #160	; 0xa0
 80021a0:	05db      	lsls	r3, r3, #23
 80021a2:	2200      	movs	r2, #0
 80021a4:	0018      	movs	r0, r3
 80021a6:	f001 fce4 	bl	8003b72 <HAL_GPIO_WritePin>
			D0_Pin | D1_Pin | D2_Pin | D3_Pin | D4_Pin | D5_Pin | D6_Pin
					| DS3231_EN_Pin | LED_R_Pin | DISP_EN_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, A0_Pin | A1_Pin | LED_G_Pin | W0_Pin | W1_Pin,
 80021aa:	4b4c      	ldr	r3, [pc, #304]	; (80022dc <MX_GPIO_Init+0x1ac>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	21cb      	movs	r1, #203	; 0xcb
 80021b0:	0018      	movs	r0, r3
 80021b2:	f001 fcde 	bl	8003b72 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : VIB_MOT_Pin */
	GPIO_InitStruct.Pin = VIB_MOT_Pin;
 80021b6:	193b      	adds	r3, r7, r4
 80021b8:	2280      	movs	r2, #128	; 0x80
 80021ba:	01d2      	lsls	r2, r2, #7
 80021bc:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021be:	193b      	adds	r3, r7, r4
 80021c0:	2201      	movs	r2, #1
 80021c2:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c4:	193b      	adds	r3, r7, r4
 80021c6:	2200      	movs	r2, #0
 80021c8:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ca:	193b      	adds	r3, r7, r4
 80021cc:	2200      	movs	r2, #0
 80021ce:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(VIB_MOT_GPIO_Port, &GPIO_InitStruct);
 80021d0:	193b      	adds	r3, r7, r4
 80021d2:	4a40      	ldr	r2, [pc, #256]	; (80022d4 <MX_GPIO_Init+0x1a4>)
 80021d4:	0019      	movs	r1, r3
 80021d6:	0010      	movs	r0, r2
 80021d8:	f001 fb40 	bl	800385c <HAL_GPIO_Init>

	/*Configure GPIO pin : PC15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 80021dc:	0021      	movs	r1, r4
 80021de:	187b      	adds	r3, r7, r1
 80021e0:	2280      	movs	r2, #128	; 0x80
 80021e2:	0212      	lsls	r2, r2, #8
 80021e4:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021e6:	000c      	movs	r4, r1
 80021e8:	193b      	adds	r3, r7, r4
 80021ea:	2203      	movs	r2, #3
 80021ec:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ee:	193b      	adds	r3, r7, r4
 80021f0:	2200      	movs	r2, #0
 80021f2:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021f4:	193b      	adds	r3, r7, r4
 80021f6:	4a37      	ldr	r2, [pc, #220]	; (80022d4 <MX_GPIO_Init+0x1a4>)
 80021f8:	0019      	movs	r1, r3
 80021fa:	0010      	movs	r0, r2
 80021fc:	f001 fb2e 	bl	800385c <HAL_GPIO_Init>

	/*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
	 D4_Pin D5_Pin D6_Pin DS3231_EN_Pin
	 LED_R_Pin DISP_EN_Pin */
	GPIO_InitStruct.Pin = D0_Pin | D1_Pin | D2_Pin | D3_Pin | D4_Pin | D5_Pin
 8002200:	193b      	adds	r3, r7, r4
 8002202:	4a35      	ldr	r2, [pc, #212]	; (80022d8 <MX_GPIO_Init+0x1a8>)
 8002204:	601a      	str	r2, [r3, #0]
			| D6_Pin | DS3231_EN_Pin | LED_R_Pin | DISP_EN_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002206:	193b      	adds	r3, r7, r4
 8002208:	2201      	movs	r2, #1
 800220a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220c:	193b      	adds	r3, r7, r4
 800220e:	2200      	movs	r2, #0
 8002210:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002212:	193b      	adds	r3, r7, r4
 8002214:	2200      	movs	r2, #0
 8002216:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002218:	193a      	adds	r2, r7, r4
 800221a:	23a0      	movs	r3, #160	; 0xa0
 800221c:	05db      	lsls	r3, r3, #23
 800221e:	0011      	movs	r1, r2
 8002220:	0018      	movs	r0, r3
 8002222:	f001 fb1b 	bl	800385c <HAL_GPIO_Init>

	/*Configure GPIO pins : A0_Pin A1_Pin LED_G_Pin */
	GPIO_InitStruct.Pin = A0_Pin | A1_Pin | LED_G_Pin;
 8002226:	193b      	adds	r3, r7, r4
 8002228:	220b      	movs	r2, #11
 800222a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800222c:	193b      	adds	r3, r7, r4
 800222e:	2201      	movs	r2, #1
 8002230:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002232:	193b      	adds	r3, r7, r4
 8002234:	2200      	movs	r2, #0
 8002236:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002238:	193b      	adds	r3, r7, r4
 800223a:	2200      	movs	r2, #0
 800223c:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800223e:	193b      	adds	r3, r7, r4
 8002240:	4a26      	ldr	r2, [pc, #152]	; (80022dc <MX_GPIO_Init+0x1ac>)
 8002242:	0019      	movs	r1, r3
 8002244:	0010      	movs	r0, r2
 8002246:	f001 fb09 	bl	800385c <HAL_GPIO_Init>

	/*Configure GPIO pin : DS3231_INT_Pin */
	GPIO_InitStruct.Pin = DS3231_INT_Pin;
 800224a:	193b      	adds	r3, r7, r4
 800224c:	2280      	movs	r2, #128	; 0x80
 800224e:	0152      	lsls	r2, r2, #5
 8002250:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002252:	193b      	adds	r3, r7, r4
 8002254:	2288      	movs	r2, #136	; 0x88
 8002256:	0352      	lsls	r2, r2, #13
 8002258:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225a:	193b      	adds	r3, r7, r4
 800225c:	2200      	movs	r2, #0
 800225e:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(DS3231_INT_GPIO_Port, &GPIO_InitStruct);
 8002260:	193a      	adds	r2, r7, r4
 8002262:	23a0      	movs	r3, #160	; 0xa0
 8002264:	05db      	lsls	r3, r3, #23
 8002266:	0011      	movs	r1, r2
 8002268:	0018      	movs	r0, r3
 800226a:	f001 faf7 	bl	800385c <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN_L_Pin BTN_R_Pin */
	GPIO_InitStruct.Pin = BTN_L_Pin | BTN_R_Pin;
 800226e:	0021      	movs	r1, r4
 8002270:	187b      	adds	r3, r7, r1
 8002272:	2230      	movs	r2, #48	; 0x30
 8002274:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002276:	187b      	adds	r3, r7, r1
 8002278:	22c4      	movs	r2, #196	; 0xc4
 800227a:	0392      	lsls	r2, r2, #14
 800227c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227e:	187b      	adds	r3, r7, r1
 8002280:	2200      	movs	r2, #0
 8002282:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002284:	000c      	movs	r4, r1
 8002286:	187b      	adds	r3, r7, r1
 8002288:	4a14      	ldr	r2, [pc, #80]	; (80022dc <MX_GPIO_Init+0x1ac>)
 800228a:	0019      	movs	r1, r3
 800228c:	0010      	movs	r0, r2
 800228e:	f001 fae5 	bl	800385c <HAL_GPIO_Init>

	/*Configure GPIO pins : W0_Pin W1_Pin */
	GPIO_InitStruct.Pin = W0_Pin | W1_Pin;
 8002292:	0021      	movs	r1, r4
 8002294:	187b      	adds	r3, r7, r1
 8002296:	22c0      	movs	r2, #192	; 0xc0
 8002298:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800229a:	187b      	adds	r3, r7, r1
 800229c:	2201      	movs	r2, #1
 800229e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022a0:	187b      	adds	r3, r7, r1
 80022a2:	2201      	movs	r2, #1
 80022a4:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a6:	187b      	adds	r3, r7, r1
 80022a8:	2200      	movs	r2, #0
 80022aa:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ac:	187b      	adds	r3, r7, r1
 80022ae:	4a0b      	ldr	r2, [pc, #44]	; (80022dc <MX_GPIO_Init+0x1ac>)
 80022b0:	0019      	movs	r1, r3
 80022b2:	0010      	movs	r0, r2
 80022b4:	f001 fad2 	bl	800385c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80022b8:	2200      	movs	r2, #0
 80022ba:	2100      	movs	r1, #0
 80022bc:	2007      	movs	r0, #7
 80022be:	f001 f8e1 	bl	8003484 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80022c2:	2007      	movs	r0, #7
 80022c4:	f001 f8f3 	bl	80034ae <HAL_NVIC_EnableIRQ>

}
 80022c8:	46c0      	nop			; (mov r8, r8)
 80022ca:	46bd      	mov	sp, r7
 80022cc:	b009      	add	sp, #36	; 0x24
 80022ce:	bd90      	pop	{r4, r7, pc}
 80022d0:	40021000 	.word	0x40021000
 80022d4:	50000800 	.word	0x50000800
 80022d8:	0000897f 	.word	0x0000897f
 80022dc:	50000400 	.word	0x50000400

080022e0 <check_device>:

/* USER CODE BEGIN 4 */
bool check_device(uint8_t address) {
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	0002      	movs	r2, r0
 80022e8:	1dfb      	adds	r3, r7, #7
 80022ea:	701a      	strb	r2, [r3, #0]
	return HAL_I2C_IsDeviceReady(&hi2c1, (address << 1), 5, 200) == HAL_OK;
 80022ec:	1dfb      	adds	r3, r7, #7
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	18db      	adds	r3, r3, r3
 80022f4:	b299      	uxth	r1, r3
 80022f6:	4806      	ldr	r0, [pc, #24]	; (8002310 <check_device+0x30>)
 80022f8:	23c8      	movs	r3, #200	; 0xc8
 80022fa:	2205      	movs	r2, #5
 80022fc:	f001 ff6a 	bl	80041d4 <HAL_I2C_IsDeviceReady>
 8002300:	0003      	movs	r3, r0
 8002302:	425a      	negs	r2, r3
 8002304:	4153      	adcs	r3, r2
 8002306:	b2db      	uxtb	r3, r3
}
 8002308:	0018      	movs	r0, r3
 800230a:	46bd      	mov	sp, r7
 800230c:	b002      	add	sp, #8
 800230e:	bd80      	pop	{r7, pc}
 8002310:	20000144 	.word	0x20000144

08002314 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002318:	b672      	cpsid	i
}
 800231a:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800231c:	e7fe      	b.n	800231c <Error_Handler+0x8>
	...

08002320 <func_set_time>:
 *      Author: Anemiq
 */

#include "menu.h"

void func_set_time() {
 8002320:	b5b0      	push	{r4, r5, r7, lr}
 8002322:	b092      	sub	sp, #72	; 0x48
 8002324:	af00      	add	r7, sp, #0

	bool ovf_minutes = false;
 8002326:	2347      	movs	r3, #71	; 0x47
 8002328:	18fb      	adds	r3, r7, r3
 800232a:	2200      	movs	r2, #0
 800232c:	701a      	strb	r2, [r3, #0]
	bool ovf_hours = false;
 800232e:	2346      	movs	r3, #70	; 0x46
 8002330:	18fb      	adds	r3, r7, r3
 8002332:	2200      	movs	r2, #0
 8002334:	701a      	strb	r2, [r3, #0]

	MenuItem set_hours = { "SET HOUR", print_time_blink_hours, NULL, NULL };
 8002336:	2034      	movs	r0, #52	; 0x34
 8002338:	183b      	adds	r3, r7, r0
 800233a:	4a98      	ldr	r2, [pc, #608]	; (800259c <func_set_time+0x27c>)
 800233c:	ca32      	ldmia	r2!, {r1, r4, r5}
 800233e:	c332      	stmia	r3!, {r1, r4, r5}
 8002340:	6812      	ldr	r2, [r2, #0]
 8002342:	601a      	str	r2, [r3, #0]
	MenuItem set_minutes = { "SET MINS", print_time_blink_minutes, &set_hours,
 8002344:	2124      	movs	r1, #36	; 0x24
 8002346:	187b      	adds	r3, r7, r1
 8002348:	4a95      	ldr	r2, [pc, #596]	; (80025a0 <func_set_time+0x280>)
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	187b      	adds	r3, r7, r1
 800234e:	4a95      	ldr	r2, [pc, #596]	; (80025a4 <func_set_time+0x284>)
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	187b      	adds	r3, r7, r1
 8002354:	183a      	adds	r2, r7, r0
 8002356:	609a      	str	r2, [r3, #8]
 8002358:	187b      	adds	r3, r7, r1
 800235a:	2200      	movs	r2, #0
 800235c:	60da      	str	r2, [r3, #12]
			NULL };
	MenuItem set_seconds = { "SET SECS", print_time_blink_seconds, &set_minutes,
 800235e:	2414      	movs	r4, #20
 8002360:	193b      	adds	r3, r7, r4
 8002362:	4a91      	ldr	r2, [pc, #580]	; (80025a8 <func_set_time+0x288>)
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	193b      	adds	r3, r7, r4
 8002368:	4a90      	ldr	r2, [pc, #576]	; (80025ac <func_set_time+0x28c>)
 800236a:	605a      	str	r2, [r3, #4]
 800236c:	193b      	adds	r3, r7, r4
 800236e:	187a      	adds	r2, r7, r1
 8002370:	609a      	str	r2, [r3, #8]
 8002372:	193b      	adds	r3, r7, r4
 8002374:	183a      	adds	r2, r7, r0
 8002376:	60da      	str	r2, [r3, #12]
			&set_hours };
	set_hours.prev = &set_seconds;
 8002378:	183b      	adds	r3, r7, r0
 800237a:	193a      	adds	r2, r7, r4
 800237c:	609a      	str	r2, [r3, #8]
	set_hours.next = &set_minutes;
 800237e:	183b      	adds	r3, r7, r0
 8002380:	187a      	adds	r2, r7, r1
 8002382:	60da      	str	r2, [r3, #12]
	set_minutes.next = &set_seconds;
 8002384:	187b      	adds	r3, r7, r1
 8002386:	193a      	adds	r2, r7, r4
 8002388:	60da      	str	r2, [r3, #12]

	MenuItem menu = set_hours;
 800238a:	1d3b      	adds	r3, r7, #4
 800238c:	183a      	adds	r2, r7, r0
 800238e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002390:	c313      	stmia	r3!, {r0, r1, r4}
 8002392:	6812      	ldr	r2, [r2, #0]
 8002394:	601a      	str	r2, [r3, #0]
	while (right_button_pressed || left_button_pressed) {
 8002396:	e002      	b.n	800239e <func_set_time+0x7e>
		HAL_Delay(100);
 8002398:	2064      	movs	r0, #100	; 0x64
 800239a:	f000 fbe7 	bl	8002b6c <HAL_Delay>
	while (right_button_pressed || left_button_pressed) {
 800239e:	4b84      	ldr	r3, [pc, #528]	; (80025b0 <func_set_time+0x290>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1f7      	bne.n	8002398 <func_set_time+0x78>
 80023a8:	4b82      	ldr	r3, [pc, #520]	; (80025b4 <func_set_time+0x294>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1f2      	bne.n	8002398 <func_set_time+0x78>
	};

	new_hours = hours;
 80023b2:	4b81      	ldr	r3, [pc, #516]	; (80025b8 <func_set_time+0x298>)
 80023b4:	781a      	ldrb	r2, [r3, #0]
 80023b6:	4b81      	ldr	r3, [pc, #516]	; (80025bc <func_set_time+0x29c>)
 80023b8:	701a      	strb	r2, [r3, #0]
	new_minutes = minutes;
 80023ba:	4b81      	ldr	r3, [pc, #516]	; (80025c0 <func_set_time+0x2a0>)
 80023bc:	781a      	ldrb	r2, [r3, #0]
 80023be:	4b81      	ldr	r3, [pc, #516]	; (80025c4 <func_set_time+0x2a4>)
 80023c0:	701a      	strb	r2, [r3, #0]
	new_seconds = seconds;
 80023c2:	4b81      	ldr	r3, [pc, #516]	; (80025c8 <func_set_time+0x2a8>)
 80023c4:	781a      	ldrb	r2, [r3, #0]
 80023c6:	4b81      	ldr	r3, [pc, #516]	; (80025cc <func_set_time+0x2ac>)
 80023c8:	701a      	strb	r2, [r3, #0]

	while (true) {
		new_time_blink = !new_time_blink;
 80023ca:	4b81      	ldr	r3, [pc, #516]	; (80025d0 <func_set_time+0x2b0>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	1e5a      	subs	r2, r3, #1
 80023d2:	4193      	sbcs	r3, r2
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2201      	movs	r2, #1
 80023d8:	4053      	eors	r3, r2
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	1c1a      	adds	r2, r3, #0
 80023de:	2301      	movs	r3, #1
 80023e0:	4013      	ands	r3, r2
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	4b7a      	ldr	r3, [pc, #488]	; (80025d0 <func_set_time+0x2b0>)
 80023e6:	701a      	strb	r2, [r3, #0]
		menu.func();
 80023e8:	1d3b      	adds	r3, r7, #4
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	4798      	blx	r3
		switch (wait_for_input(250)) {
 80023ee:	20fa      	movs	r0, #250	; 0xfa
 80023f0:	f7ff fa76 	bl	80018e0 <wait_for_input>
 80023f4:	0003      	movs	r3, r0
 80023f6:	2b06      	cmp	r3, #6
 80023f8:	d8e7      	bhi.n	80023ca <func_set_time+0xaa>
 80023fa:	009a      	lsls	r2, r3, #2
 80023fc:	4b75      	ldr	r3, [pc, #468]	; (80025d4 <func_set_time+0x2b4>)
 80023fe:	18d3      	adds	r3, r2, r3
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	469f      	mov	pc, r3
		case INPUT_NO_INPUT:
			// No input
			break;
		case INPUT_RIGHT_BUTTON_SHORT_PRESS:
			// Right button short press
			if (menu.name == "SET SECS") {
 8002404:	1d3b      	adds	r3, r7, #4
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	4b67      	ldr	r3, [pc, #412]	; (80025a8 <func_set_time+0x288>)
 800240a:	429a      	cmp	r2, r3
 800240c:	d110      	bne.n	8002430 <func_set_time+0x110>
				if (++new_seconds == 60) {
 800240e:	4b6f      	ldr	r3, [pc, #444]	; (80025cc <func_set_time+0x2ac>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	b2db      	uxtb	r3, r3
 8002414:	3301      	adds	r3, #1
 8002416:	b2db      	uxtb	r3, r3
 8002418:	4a6c      	ldr	r2, [pc, #432]	; (80025cc <func_set_time+0x2ac>)
 800241a:	1c19      	adds	r1, r3, #0
 800241c:	7011      	strb	r1, [r2, #0]
 800241e:	2b3c      	cmp	r3, #60	; 0x3c
 8002420:	d106      	bne.n	8002430 <func_set_time+0x110>
					new_seconds = 0;
 8002422:	4b6a      	ldr	r3, [pc, #424]	; (80025cc <func_set_time+0x2ac>)
 8002424:	2200      	movs	r2, #0
 8002426:	701a      	strb	r2, [r3, #0]
					ovf_minutes = true;
 8002428:	2347      	movs	r3, #71	; 0x47
 800242a:	18fb      	adds	r3, r7, r3
 800242c:	2201      	movs	r2, #1
 800242e:	701a      	strb	r2, [r3, #0]
				}
			}
			if (menu.name == "SET MINS" || ovf_minutes) {
 8002430:	1d3b      	adds	r3, r7, #4
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	4b5a      	ldr	r3, [pc, #360]	; (80025a0 <func_set_time+0x280>)
 8002436:	429a      	cmp	r2, r3
 8002438:	d004      	beq.n	8002444 <func_set_time+0x124>
 800243a:	2347      	movs	r3, #71	; 0x47
 800243c:	18fb      	adds	r3, r7, r3
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d014      	beq.n	800246e <func_set_time+0x14e>
				if (++new_minutes == 60) {
 8002444:	4b5f      	ldr	r3, [pc, #380]	; (80025c4 <func_set_time+0x2a4>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	b2db      	uxtb	r3, r3
 800244a:	3301      	adds	r3, #1
 800244c:	b2db      	uxtb	r3, r3
 800244e:	4a5d      	ldr	r2, [pc, #372]	; (80025c4 <func_set_time+0x2a4>)
 8002450:	1c19      	adds	r1, r3, #0
 8002452:	7011      	strb	r1, [r2, #0]
 8002454:	2b3c      	cmp	r3, #60	; 0x3c
 8002456:	d106      	bne.n	8002466 <func_set_time+0x146>
					new_minutes = 0;
 8002458:	4b5a      	ldr	r3, [pc, #360]	; (80025c4 <func_set_time+0x2a4>)
 800245a:	2200      	movs	r2, #0
 800245c:	701a      	strb	r2, [r3, #0]
					ovf_hours = true;
 800245e:	2346      	movs	r3, #70	; 0x46
 8002460:	18fb      	adds	r3, r7, r3
 8002462:	2201      	movs	r2, #1
 8002464:	701a      	strb	r2, [r3, #0]
				}
				ovf_minutes = false;
 8002466:	2347      	movs	r3, #71	; 0x47
 8002468:	18fb      	adds	r3, r7, r3
 800246a:	2200      	movs	r2, #0
 800246c:	701a      	strb	r2, [r3, #0]
			}
			if (menu.name == "SET HOUR" || ovf_hours) {
 800246e:	1d3b      	adds	r3, r7, #4
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	4b59      	ldr	r3, [pc, #356]	; (80025d8 <func_set_time+0x2b8>)
 8002474:	429a      	cmp	r2, r3
 8002476:	d005      	beq.n	8002484 <func_set_time+0x164>
 8002478:	2346      	movs	r3, #70	; 0x46
 800247a:	18fb      	adds	r3, r7, r3
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d100      	bne.n	8002484 <func_set_time+0x164>
 8002482:	e084      	b.n	800258e <func_set_time+0x26e>
				if (++new_hours == 24) {
 8002484:	4b4d      	ldr	r3, [pc, #308]	; (80025bc <func_set_time+0x29c>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	b2db      	uxtb	r3, r3
 800248a:	3301      	adds	r3, #1
 800248c:	b2db      	uxtb	r3, r3
 800248e:	4a4b      	ldr	r2, [pc, #300]	; (80025bc <func_set_time+0x29c>)
 8002490:	1c19      	adds	r1, r3, #0
 8002492:	7011      	strb	r1, [r2, #0]
 8002494:	2b18      	cmp	r3, #24
 8002496:	d102      	bne.n	800249e <func_set_time+0x17e>
					new_hours = 0;
 8002498:	4b48      	ldr	r3, [pc, #288]	; (80025bc <func_set_time+0x29c>)
 800249a:	2200      	movs	r2, #0
 800249c:	701a      	strb	r2, [r3, #0]
				}
				ovf_hours = false;
 800249e:	2346      	movs	r3, #70	; 0x46
 80024a0:	18fb      	adds	r3, r7, r3
 80024a2:	2200      	movs	r2, #0
 80024a4:	701a      	strb	r2, [r3, #0]
			}
			break;
 80024a6:	e072      	b.n	800258e <func_set_time+0x26e>
		case INPUT_RIGHT_BUTTON_LONG_PRESS:
			// Right button long press
			menu = *menu.next;
 80024a8:	1d3b      	adds	r3, r7, #4
 80024aa:	68da      	ldr	r2, [r3, #12]
 80024ac:	1d3b      	adds	r3, r7, #4
 80024ae:	ca13      	ldmia	r2!, {r0, r1, r4}
 80024b0:	c313      	stmia	r3!, {r0, r1, r4}
 80024b2:	6812      	ldr	r2, [r2, #0]
 80024b4:	601a      	str	r2, [r3, #0]
			break;
 80024b6:	e06d      	b.n	8002594 <func_set_time+0x274>
		case INPUT_LEFT_BUTTON_SHORT_PRESS:
			// Left button short press
			if (menu.name == "SET SECS") {
 80024b8:	1d3b      	adds	r3, r7, #4
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	4b3a      	ldr	r3, [pc, #232]	; (80025a8 <func_set_time+0x288>)
 80024be:	429a      	cmp	r2, r3
 80024c0:	d110      	bne.n	80024e4 <func_set_time+0x1c4>
				if (--new_seconds > 59) {
 80024c2:	4b42      	ldr	r3, [pc, #264]	; (80025cc <func_set_time+0x2ac>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	3b01      	subs	r3, #1
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	4a3f      	ldr	r2, [pc, #252]	; (80025cc <func_set_time+0x2ac>)
 80024ce:	1c19      	adds	r1, r3, #0
 80024d0:	7011      	strb	r1, [r2, #0]
 80024d2:	2b3b      	cmp	r3, #59	; 0x3b
 80024d4:	d906      	bls.n	80024e4 <func_set_time+0x1c4>
					new_seconds = 59;
 80024d6:	4b3d      	ldr	r3, [pc, #244]	; (80025cc <func_set_time+0x2ac>)
 80024d8:	223b      	movs	r2, #59	; 0x3b
 80024da:	701a      	strb	r2, [r3, #0]
					ovf_minutes = true;
 80024dc:	2347      	movs	r3, #71	; 0x47
 80024de:	18fb      	adds	r3, r7, r3
 80024e0:	2201      	movs	r2, #1
 80024e2:	701a      	strb	r2, [r3, #0]
				}
			}
			if (menu.name == "SET MINS" || ovf_minutes) {
 80024e4:	1d3b      	adds	r3, r7, #4
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	4b2d      	ldr	r3, [pc, #180]	; (80025a0 <func_set_time+0x280>)
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d004      	beq.n	80024f8 <func_set_time+0x1d8>
 80024ee:	2347      	movs	r3, #71	; 0x47
 80024f0:	18fb      	adds	r3, r7, r3
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d014      	beq.n	8002522 <func_set_time+0x202>
				if (--new_minutes > 59) {
 80024f8:	4b32      	ldr	r3, [pc, #200]	; (80025c4 <func_set_time+0x2a4>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	3b01      	subs	r3, #1
 8002500:	b2db      	uxtb	r3, r3
 8002502:	4a30      	ldr	r2, [pc, #192]	; (80025c4 <func_set_time+0x2a4>)
 8002504:	1c19      	adds	r1, r3, #0
 8002506:	7011      	strb	r1, [r2, #0]
 8002508:	2b3b      	cmp	r3, #59	; 0x3b
 800250a:	d906      	bls.n	800251a <func_set_time+0x1fa>
					new_minutes = 59;
 800250c:	4b2d      	ldr	r3, [pc, #180]	; (80025c4 <func_set_time+0x2a4>)
 800250e:	223b      	movs	r2, #59	; 0x3b
 8002510:	701a      	strb	r2, [r3, #0]
					ovf_hours = true;
 8002512:	2346      	movs	r3, #70	; 0x46
 8002514:	18fb      	adds	r3, r7, r3
 8002516:	2201      	movs	r2, #1
 8002518:	701a      	strb	r2, [r3, #0]
				}
				ovf_minutes = false;
 800251a:	2347      	movs	r3, #71	; 0x47
 800251c:	18fb      	adds	r3, r7, r3
 800251e:	2200      	movs	r2, #0
 8002520:	701a      	strb	r2, [r3, #0]
			}
			if (menu.name == "SET HOUR" || ovf_hours) {
 8002522:	1d3b      	adds	r3, r7, #4
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	4b2c      	ldr	r3, [pc, #176]	; (80025d8 <func_set_time+0x2b8>)
 8002528:	429a      	cmp	r2, r3
 800252a:	d004      	beq.n	8002536 <func_set_time+0x216>
 800252c:	2346      	movs	r3, #70	; 0x46
 800252e:	18fb      	adds	r3, r7, r3
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d02d      	beq.n	8002592 <func_set_time+0x272>
				if (--new_hours > 23) {
 8002536:	4b21      	ldr	r3, [pc, #132]	; (80025bc <func_set_time+0x29c>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	b2db      	uxtb	r3, r3
 800253c:	3b01      	subs	r3, #1
 800253e:	b2db      	uxtb	r3, r3
 8002540:	4a1e      	ldr	r2, [pc, #120]	; (80025bc <func_set_time+0x29c>)
 8002542:	1c19      	adds	r1, r3, #0
 8002544:	7011      	strb	r1, [r2, #0]
 8002546:	2b17      	cmp	r3, #23
 8002548:	d902      	bls.n	8002550 <func_set_time+0x230>
					new_hours = 23;
 800254a:	4b1c      	ldr	r3, [pc, #112]	; (80025bc <func_set_time+0x29c>)
 800254c:	2217      	movs	r2, #23
 800254e:	701a      	strb	r2, [r3, #0]
				}
				ovf_hours = false;
 8002550:	2346      	movs	r3, #70	; 0x46
 8002552:	18fb      	adds	r3, r7, r3
 8002554:	2200      	movs	r2, #0
 8002556:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002558:	e01b      	b.n	8002592 <func_set_time+0x272>
		case INPUT_LEFT_BUTTON_LONG_PRESS:
			// Left button long press
			menu = *menu.prev;
 800255a:	1d3b      	adds	r3, r7, #4
 800255c:	689a      	ldr	r2, [r3, #8]
 800255e:	1d3b      	adds	r3, r7, #4
 8002560:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002562:	c313      	stmia	r3!, {r0, r1, r4}
 8002564:	6812      	ldr	r2, [r2, #0]
 8002566:	601a      	str	r2, [r3, #0]
			break;
 8002568:	e014      	b.n	8002594 <func_set_time+0x274>
		case INPUT_BOTH_BUTTONS_LONG_PRESS:
			// Both buttons long press
			// Stop interrupt to swap values
			hours = new_hours;
 800256a:	4b14      	ldr	r3, [pc, #80]	; (80025bc <func_set_time+0x29c>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	b2da      	uxtb	r2, r3
 8002570:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <func_set_time+0x298>)
 8002572:	701a      	strb	r2, [r3, #0]
			minutes = new_minutes;
 8002574:	4b13      	ldr	r3, [pc, #76]	; (80025c4 <func_set_time+0x2a4>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	b2da      	uxtb	r2, r3
 800257a:	4b11      	ldr	r3, [pc, #68]	; (80025c0 <func_set_time+0x2a0>)
 800257c:	701a      	strb	r2, [r3, #0]
			seconds = new_seconds;
 800257e:	4b13      	ldr	r3, [pc, #76]	; (80025cc <func_set_time+0x2ac>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	b2da      	uxtb	r2, r3
 8002584:	4b10      	ldr	r3, [pc, #64]	; (80025c8 <func_set_time+0x2a8>)
 8002586:	701a      	strb	r2, [r3, #0]
			write_time();
 8002588:	f7ff f93c 	bl	8001804 <write_time>
			return;
 800258c:	e003      	b.n	8002596 <func_set_time+0x276>
			break;
 800258e:	46c0      	nop			; (mov r8, r8)
 8002590:	e71b      	b.n	80023ca <func_set_time+0xaa>
			break;
 8002592:	46c0      	nop			; (mov r8, r8)
		new_time_blink = !new_time_blink;
 8002594:	e719      	b.n	80023ca <func_set_time+0xaa>
		}
	}
}
 8002596:	46bd      	mov	sp, r7
 8002598:	b012      	add	sp, #72	; 0x48
 800259a:	bdb0      	pop	{r4, r5, r7, pc}
 800259c:	08006774 	.word	0x08006774
 80025a0:	0800675c 	.word	0x0800675c
 80025a4:	080015d5 	.word	0x080015d5
 80025a8:	08006768 	.word	0x08006768
 80025ac:	08001629 	.word	0x08001629
 80025b0:	20000095 	.word	0x20000095
 80025b4:	20000094 	.word	0x20000094
 80025b8:	20000001 	.word	0x20000001
 80025bc:	2000009a 	.word	0x2000009a
 80025c0:	20000097 	.word	0x20000097
 80025c4:	2000009b 	.word	0x2000009b
 80025c8:	20000098 	.word	0x20000098
 80025cc:	2000009c 	.word	0x2000009c
 80025d0:	20000099 	.word	0x20000099
 80025d4:	08006840 	.word	0x08006840
 80025d8:	08006744 	.word	0x08006744

080025dc <enter_menu>:

void enter_menu(void) {
 80025dc:	b5b0      	push	{r4, r5, r7, lr}
 80025de:	b094      	sub	sp, #80	; 0x50
 80025e0:	af00      	add	r7, sp, #0

	MenuItem set_time = { "SET TIME", func_set_time, NULL, NULL };
 80025e2:	2540      	movs	r5, #64	; 0x40
 80025e4:	197b      	adds	r3, r7, r5
 80025e6:	4a3e      	ldr	r2, [pc, #248]	; (80026e0 <enter_menu+0x104>)
 80025e8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80025ea:	c313      	stmia	r3!, {r0, r1, r4}
 80025ec:	6812      	ldr	r2, [r2, #0]
 80025ee:	601a      	str	r2, [r3, #0]
	MenuItem set_date = { "SET DATE", NULL, &set_time, NULL };
 80025f0:	2130      	movs	r1, #48	; 0x30
 80025f2:	187b      	adds	r3, r7, r1
 80025f4:	4a3b      	ldr	r2, [pc, #236]	; (80026e4 <enter_menu+0x108>)
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	187b      	adds	r3, r7, r1
 80025fa:	2200      	movs	r2, #0
 80025fc:	605a      	str	r2, [r3, #4]
 80025fe:	187b      	adds	r3, r7, r1
 8002600:	197a      	adds	r2, r7, r5
 8002602:	609a      	str	r2, [r3, #8]
 8002604:	187b      	adds	r3, r7, r1
 8002606:	2200      	movs	r2, #0
 8002608:	60da      	str	r2, [r3, #12]
	MenuItem set_shortcut = { "SHORTCUT", NULL, &set_date, NULL };
 800260a:	2020      	movs	r0, #32
 800260c:	183b      	adds	r3, r7, r0
 800260e:	4a36      	ldr	r2, [pc, #216]	; (80026e8 <enter_menu+0x10c>)
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	183b      	adds	r3, r7, r0
 8002614:	2200      	movs	r2, #0
 8002616:	605a      	str	r2, [r3, #4]
 8002618:	183b      	adds	r3, r7, r0
 800261a:	187a      	adds	r2, r7, r1
 800261c:	609a      	str	r2, [r3, #8]
 800261e:	183b      	adds	r3, r7, r0
 8002620:	2200      	movs	r2, #0
 8002622:	60da      	str	r2, [r3, #12]
	MenuItem status_menu = { "STATUS ", NULL, &set_shortcut, &set_time };
 8002624:	2410      	movs	r4, #16
 8002626:	193b      	adds	r3, r7, r4
 8002628:	4a30      	ldr	r2, [pc, #192]	; (80026ec <enter_menu+0x110>)
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	193b      	adds	r3, r7, r4
 800262e:	2200      	movs	r2, #0
 8002630:	605a      	str	r2, [r3, #4]
 8002632:	193b      	adds	r3, r7, r4
 8002634:	183a      	adds	r2, r7, r0
 8002636:	609a      	str	r2, [r3, #8]
 8002638:	193b      	adds	r3, r7, r4
 800263a:	197a      	adds	r2, r7, r5
 800263c:	60da      	str	r2, [r3, #12]

	set_time.prev = &status_menu;
 800263e:	197b      	adds	r3, r7, r5
 8002640:	193a      	adds	r2, r7, r4
 8002642:	609a      	str	r2, [r3, #8]
	set_time.next = &set_date;
 8002644:	197b      	adds	r3, r7, r5
 8002646:	187a      	adds	r2, r7, r1
 8002648:	60da      	str	r2, [r3, #12]
	set_date.next = &set_shortcut;
 800264a:	187b      	adds	r3, r7, r1
 800264c:	183a      	adds	r2, r7, r0
 800264e:	60da      	str	r2, [r3, #12]
	set_shortcut.next = &status_menu;
 8002650:	183b      	adds	r3, r7, r0
 8002652:	193a      	adds	r2, r7, r4
 8002654:	60da      	str	r2, [r3, #12]

	MenuItem menu = status_menu;
 8002656:	003a      	movs	r2, r7
 8002658:	193b      	adds	r3, r7, r4
 800265a:	0010      	movs	r0, r2
 800265c:	0019      	movs	r1, r3
 800265e:	2310      	movs	r3, #16
 8002660:	001a      	movs	r2, r3
 8002662:	f003 fb77 	bl	8005d54 <memcpy>
	print_string("  MENU  ");
 8002666:	4b22      	ldr	r3, [pc, #136]	; (80026f0 <enter_menu+0x114>)
 8002668:	0018      	movs	r0, r3
 800266a:	f7fe fec5 	bl	80013f8 <print_string>
	buzz_motor(100);
 800266e:	2064      	movs	r0, #100	; 0x64
 8002670:	f7ff fa18 	bl	8001aa4 <buzz_motor>
	wait_for_buttons_released();
 8002674:	f7ff fa00 	bl	8001a78 <wait_for_buttons_released>
	while (true) {
		print_string(menu.name);
 8002678:	003b      	movs	r3, r7
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	0018      	movs	r0, r3
 800267e:	f7fe febb 	bl	80013f8 <print_string>
		HAL_Delay(300);
 8002682:	2396      	movs	r3, #150	; 0x96
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	0018      	movs	r0, r3
 8002688:	f000 fa70 	bl	8002b6c <HAL_Delay>
		switch (wait_for_input(5000)) {
 800268c:	4b19      	ldr	r3, [pc, #100]	; (80026f4 <enter_menu+0x118>)
 800268e:	0018      	movs	r0, r3
 8002690:	f7ff f926 	bl	80018e0 <wait_for_input>
 8002694:	0003      	movs	r3, r0
 8002696:	2b04      	cmp	r3, #4
 8002698:	d8ee      	bhi.n	8002678 <enter_menu+0x9c>
 800269a:	009a      	lsls	r2, r3, #2
 800269c:	4b16      	ldr	r3, [pc, #88]	; (80026f8 <enter_menu+0x11c>)
 800269e:	18d3      	adds	r3, r2, r3
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	469f      	mov	pc, r3
		case INPUT_NO_INPUT:
			// No input
			return;
		case INPUT_RIGHT_BUTTON_SHORT_PRESS:
			// Right button short press
			menu = *menu.next;
 80026a4:	003b      	movs	r3, r7
 80026a6:	68da      	ldr	r2, [r3, #12]
 80026a8:	003b      	movs	r3, r7
 80026aa:	ca13      	ldmia	r2!, {r0, r1, r4}
 80026ac:	c313      	stmia	r3!, {r0, r1, r4}
 80026ae:	6812      	ldr	r2, [r2, #0]
 80026b0:	601a      	str	r2, [r3, #0]
			break;
 80026b2:	e00f      	b.n	80026d4 <enter_menu+0xf8>
		case INPUT_RIGHT_BUTTON_LONG_PRESS:
			// Right button long press
			menu.func();
 80026b4:	003b      	movs	r3, r7
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	4798      	blx	r3
			break;
 80026ba:	e00b      	b.n	80026d4 <enter_menu+0xf8>
		case INPUT_LEFT_BUTTON_SHORT_PRESS:
			// Left button short press
			menu = *menu.prev;
 80026bc:	003b      	movs	r3, r7
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	003b      	movs	r3, r7
 80026c2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80026c4:	c313      	stmia	r3!, {r0, r1, r4}
 80026c6:	6812      	ldr	r2, [r2, #0]
 80026c8:	601a      	str	r2, [r3, #0]
			break;
 80026ca:	e003      	b.n	80026d4 <enter_menu+0xf8>
		case INPUT_LEFT_BUTTON_LONG_PRESS:
			// Left button long press
			buzz_motor(100);
 80026cc:	2064      	movs	r0, #100	; 0x64
 80026ce:	f7ff f9e9 	bl	8001aa4 <buzz_motor>
			return;
 80026d2:	e001      	b.n	80026d8 <enter_menu+0xfc>
		print_string(menu.name);
 80026d4:	e7d0      	b.n	8002678 <enter_menu+0x9c>
			return;
 80026d6:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 80026d8:	46bd      	mov	sp, r7
 80026da:	b014      	add	sp, #80	; 0x50
 80026dc:	bdb0      	pop	{r4, r5, r7, pc}
 80026de:	46c0      	nop			; (mov r8, r8)
 80026e0:	080067b0 	.word	0x080067b0
 80026e4:	08006784 	.word	0x08006784
 80026e8:	08006790 	.word	0x08006790
 80026ec:	0800679c 	.word	0x0800679c
 80026f0:	080067a4 	.word	0x080067a4
 80026f4:	00001388 	.word	0x00001388
 80026f8:	0800685c 	.word	0x0800685c

080026fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002700:	4b07      	ldr	r3, [pc, #28]	; (8002720 <HAL_MspInit+0x24>)
 8002702:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002704:	4b06      	ldr	r3, [pc, #24]	; (8002720 <HAL_MspInit+0x24>)
 8002706:	2101      	movs	r1, #1
 8002708:	430a      	orrs	r2, r1
 800270a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800270c:	4b04      	ldr	r3, [pc, #16]	; (8002720 <HAL_MspInit+0x24>)
 800270e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002710:	4b03      	ldr	r3, [pc, #12]	; (8002720 <HAL_MspInit+0x24>)
 8002712:	2180      	movs	r1, #128	; 0x80
 8002714:	0549      	lsls	r1, r1, #21
 8002716:	430a      	orrs	r2, r1
 8002718:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800271a:	46c0      	nop			; (mov r8, r8)
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	40021000 	.word	0x40021000

08002724 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002724:	b590      	push	{r4, r7, lr}
 8002726:	b089      	sub	sp, #36	; 0x24
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800272c:	240c      	movs	r4, #12
 800272e:	193b      	adds	r3, r7, r4
 8002730:	0018      	movs	r0, r3
 8002732:	2314      	movs	r3, #20
 8002734:	001a      	movs	r2, r3
 8002736:	2100      	movs	r1, #0
 8002738:	f003 fb15 	bl	8005d66 <memset>
  if(hadc->Instance==ADC1)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a2a      	ldr	r2, [pc, #168]	; (80027ec <HAL_ADC_MspInit+0xc8>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d14d      	bne.n	80027e2 <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002746:	4b2a      	ldr	r3, [pc, #168]	; (80027f0 <HAL_ADC_MspInit+0xcc>)
 8002748:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800274a:	4b29      	ldr	r3, [pc, #164]	; (80027f0 <HAL_ADC_MspInit+0xcc>)
 800274c:	2180      	movs	r1, #128	; 0x80
 800274e:	0089      	lsls	r1, r1, #2
 8002750:	430a      	orrs	r2, r1
 8002752:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002754:	4b26      	ldr	r3, [pc, #152]	; (80027f0 <HAL_ADC_MspInit+0xcc>)
 8002756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002758:	4b25      	ldr	r3, [pc, #148]	; (80027f0 <HAL_ADC_MspInit+0xcc>)
 800275a:	2101      	movs	r1, #1
 800275c:	430a      	orrs	r2, r1
 800275e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002760:	4b23      	ldr	r3, [pc, #140]	; (80027f0 <HAL_ADC_MspInit+0xcc>)
 8002762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002764:	2201      	movs	r2, #1
 8002766:	4013      	ands	r3, r2
 8002768:	60bb      	str	r3, [r7, #8]
 800276a:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = V_BAT_IN_Pin;
 800276c:	193b      	adds	r3, r7, r4
 800276e:	2280      	movs	r2, #128	; 0x80
 8002770:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002772:	193b      	adds	r3, r7, r4
 8002774:	2203      	movs	r2, #3
 8002776:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002778:	193b      	adds	r3, r7, r4
 800277a:	2200      	movs	r2, #0
 800277c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(V_BAT_IN_GPIO_Port, &GPIO_InitStruct);
 800277e:	193a      	adds	r2, r7, r4
 8002780:	23a0      	movs	r3, #160	; 0xa0
 8002782:	05db      	lsls	r3, r3, #23
 8002784:	0011      	movs	r1, r2
 8002786:	0018      	movs	r0, r3
 8002788:	f001 f868 	bl	800385c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 800278c:	4b19      	ldr	r3, [pc, #100]	; (80027f4 <HAL_ADC_MspInit+0xd0>)
 800278e:	4a1a      	ldr	r2, [pc, #104]	; (80027f8 <HAL_ADC_MspInit+0xd4>)
 8002790:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 8002792:	4b18      	ldr	r3, [pc, #96]	; (80027f4 <HAL_ADC_MspInit+0xd0>)
 8002794:	2200      	movs	r2, #0
 8002796:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002798:	4b16      	ldr	r3, [pc, #88]	; (80027f4 <HAL_ADC_MspInit+0xd0>)
 800279a:	2200      	movs	r2, #0
 800279c:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800279e:	4b15      	ldr	r3, [pc, #84]	; (80027f4 <HAL_ADC_MspInit+0xd0>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80027a4:	4b13      	ldr	r3, [pc, #76]	; (80027f4 <HAL_ADC_MspInit+0xd0>)
 80027a6:	2280      	movs	r2, #128	; 0x80
 80027a8:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80027aa:	4b12      	ldr	r3, [pc, #72]	; (80027f4 <HAL_ADC_MspInit+0xd0>)
 80027ac:	2280      	movs	r2, #128	; 0x80
 80027ae:	0052      	lsls	r2, r2, #1
 80027b0:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80027b2:	4b10      	ldr	r3, [pc, #64]	; (80027f4 <HAL_ADC_MspInit+0xd0>)
 80027b4:	2280      	movs	r2, #128	; 0x80
 80027b6:	00d2      	lsls	r2, r2, #3
 80027b8:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80027ba:	4b0e      	ldr	r3, [pc, #56]	; (80027f4 <HAL_ADC_MspInit+0xd0>)
 80027bc:	2220      	movs	r2, #32
 80027be:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80027c0:	4b0c      	ldr	r3, [pc, #48]	; (80027f4 <HAL_ADC_MspInit+0xd0>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80027c6:	4b0b      	ldr	r3, [pc, #44]	; (80027f4 <HAL_ADC_MspInit+0xd0>)
 80027c8:	0018      	movs	r0, r3
 80027ca:	f000 fe8d 	bl	80034e8 <HAL_DMA_Init>
 80027ce:	1e03      	subs	r3, r0, #0
 80027d0:	d001      	beq.n	80027d6 <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 80027d2:	f7ff fd9f 	bl	8002314 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a06      	ldr	r2, [pc, #24]	; (80027f4 <HAL_ADC_MspInit+0xd0>)
 80027da:	64da      	str	r2, [r3, #76]	; 0x4c
 80027dc:	4b05      	ldr	r3, [pc, #20]	; (80027f4 <HAL_ADC_MspInit+0xd0>)
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80027e2:	46c0      	nop			; (mov r8, r8)
 80027e4:	46bd      	mov	sp, r7
 80027e6:	b009      	add	sp, #36	; 0x24
 80027e8:	bd90      	pop	{r4, r7, pc}
 80027ea:	46c0      	nop			; (mov r8, r8)
 80027ec:	40012400 	.word	0x40012400
 80027f0:	40021000 	.word	0x40021000
 80027f4:	200000fc 	.word	0x200000fc
 80027f8:	40020008 	.word	0x40020008

080027fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027fc:	b590      	push	{r4, r7, lr}
 80027fe:	b089      	sub	sp, #36	; 0x24
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002804:	240c      	movs	r4, #12
 8002806:	193b      	adds	r3, r7, r4
 8002808:	0018      	movs	r0, r3
 800280a:	2314      	movs	r3, #20
 800280c:	001a      	movs	r2, r3
 800280e:	2100      	movs	r1, #0
 8002810:	f003 faa9 	bl	8005d66 <memset>
  if(hi2c->Instance==I2C1)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a18      	ldr	r2, [pc, #96]	; (800287c <HAL_I2C_MspInit+0x80>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d12a      	bne.n	8002874 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800281e:	4b18      	ldr	r3, [pc, #96]	; (8002880 <HAL_I2C_MspInit+0x84>)
 8002820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002822:	4b17      	ldr	r3, [pc, #92]	; (8002880 <HAL_I2C_MspInit+0x84>)
 8002824:	2101      	movs	r1, #1
 8002826:	430a      	orrs	r2, r1
 8002828:	62da      	str	r2, [r3, #44]	; 0x2c
 800282a:	4b15      	ldr	r3, [pc, #84]	; (8002880 <HAL_I2C_MspInit+0x84>)
 800282c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282e:	2201      	movs	r2, #1
 8002830:	4013      	ands	r3, r2
 8002832:	60bb      	str	r3, [r7, #8]
 8002834:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002836:	193b      	adds	r3, r7, r4
 8002838:	22c0      	movs	r2, #192	; 0xc0
 800283a:	00d2      	lsls	r2, r2, #3
 800283c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800283e:	0021      	movs	r1, r4
 8002840:	187b      	adds	r3, r7, r1
 8002842:	2212      	movs	r2, #18
 8002844:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002846:	187b      	adds	r3, r7, r1
 8002848:	2200      	movs	r2, #0
 800284a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800284c:	187b      	adds	r3, r7, r1
 800284e:	2203      	movs	r2, #3
 8002850:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002852:	187b      	adds	r3, r7, r1
 8002854:	2201      	movs	r2, #1
 8002856:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002858:	187a      	adds	r2, r7, r1
 800285a:	23a0      	movs	r3, #160	; 0xa0
 800285c:	05db      	lsls	r3, r3, #23
 800285e:	0011      	movs	r1, r2
 8002860:	0018      	movs	r0, r3
 8002862:	f000 fffb 	bl	800385c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002866:	4b06      	ldr	r3, [pc, #24]	; (8002880 <HAL_I2C_MspInit+0x84>)
 8002868:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800286a:	4b05      	ldr	r3, [pc, #20]	; (8002880 <HAL_I2C_MspInit+0x84>)
 800286c:	2180      	movs	r1, #128	; 0x80
 800286e:	0389      	lsls	r1, r1, #14
 8002870:	430a      	orrs	r2, r1
 8002872:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002874:	46c0      	nop			; (mov r8, r8)
 8002876:	46bd      	mov	sp, r7
 8002878:	b009      	add	sp, #36	; 0x24
 800287a:	bd90      	pop	{r4, r7, pc}
 800287c:	40005400 	.word	0x40005400
 8002880:	40021000 	.word	0x40021000

08002884 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	2380      	movs	r3, #128	; 0x80
 8002892:	05db      	lsls	r3, r3, #23
 8002894:	429a      	cmp	r2, r3
 8002896:	d105      	bne.n	80028a4 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002898:	4b04      	ldr	r3, [pc, #16]	; (80028ac <HAL_TIM_Base_MspInit+0x28>)
 800289a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800289c:	4b03      	ldr	r3, [pc, #12]	; (80028ac <HAL_TIM_Base_MspInit+0x28>)
 800289e:	2101      	movs	r1, #1
 80028a0:	430a      	orrs	r2, r1
 80028a2:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80028a4:	46c0      	nop			; (mov r8, r8)
 80028a6:	46bd      	mov	sp, r7
 80028a8:	b002      	add	sp, #8
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40021000 	.word	0x40021000

080028b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80028b4:	e7fe      	b.n	80028b4 <NMI_Handler+0x4>

080028b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028ba:	e7fe      	b.n	80028ba <HardFault_Handler+0x4>

080028bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80028c0:	46c0      	nop			; (mov r8, r8)
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028ca:	46c0      	nop			; (mov r8, r8)
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028d4:	f000 f92e 	bl	8002b34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028d8:	46c0      	nop			; (mov r8, r8)
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_L_Pin);
 80028e2:	2010      	movs	r0, #16
 80028e4:	f001 f962 	bl	8003bac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_R_Pin);
 80028e8:	2020      	movs	r0, #32
 80028ea:	f001 f95f 	bl	8003bac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DS3231_INT_Pin);
 80028ee:	2380      	movs	r3, #128	; 0x80
 80028f0:	015b      	lsls	r3, r3, #5
 80028f2:	0018      	movs	r0, r3
 80028f4:	f001 f95a 	bl	8003bac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80028f8:	46c0      	nop			; (mov r8, r8)
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
	...

08002900 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8002904:	4b03      	ldr	r3, [pc, #12]	; (8002914 <DMA1_Channel1_IRQHandler+0x14>)
 8002906:	0018      	movs	r0, r3
 8002908:	f000 fecc 	bl	80036a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800290c:	46c0      	nop			; (mov r8, r8)
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	46c0      	nop			; (mov r8, r8)
 8002914:	200000fc 	.word	0x200000fc

08002918 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	0002      	movs	r2, r0
 8002920:	1dbb      	adds	r3, r7, #6
 8002922:	801a      	strh	r2, [r3, #0]
	switch (GPIO_Pin) {
 8002924:	1dbb      	adds	r3, r7, #6
 8002926:	881b      	ldrh	r3, [r3, #0]
 8002928:	2280      	movs	r2, #128	; 0x80
 800292a:	0152      	lsls	r2, r2, #5
 800292c:	4293      	cmp	r3, r2
 800292e:	d030      	beq.n	8002992 <HAL_GPIO_EXTI_Callback+0x7a>
 8002930:	2280      	movs	r2, #128	; 0x80
 8002932:	0152      	lsls	r2, r2, #5
 8002934:	4293      	cmp	r3, r2
 8002936:	dc36      	bgt.n	80029a6 <HAL_GPIO_EXTI_Callback+0x8e>
 8002938:	2b10      	cmp	r3, #16
 800293a:	d002      	beq.n	8002942 <HAL_GPIO_EXTI_Callback+0x2a>
 800293c:	2b20      	cmp	r3, #32
 800293e:	d014      	beq.n	800296a <HAL_GPIO_EXTI_Callback+0x52>
		sleep_timeout_counter = 0;
		SystemClock_Config();
		HAL_ResumeTick();
		break;
	}
}
 8002940:	e031      	b.n	80029a6 <HAL_GPIO_EXTI_Callback+0x8e>
		sleep_timeout_counter = 0;
 8002942:	4b1b      	ldr	r3, [pc, #108]	; (80029b0 <HAL_GPIO_EXTI_Callback+0x98>)
 8002944:	2200      	movs	r2, #0
 8002946:	701a      	strb	r2, [r3, #0]
		SystemClock_Config();
 8002948:	f7ff fa58 	bl	8001dfc <SystemClock_Config>
		HAL_ResumeTick();
 800294c:	f000 f940 	bl	8002bd0 <HAL_ResumeTick>
		left_button_pressed = HAL_GPIO_ReadPin(BTN_L_GPIO_Port, BTN_L_Pin) == GPIO_PIN_SET;
 8002950:	4b18      	ldr	r3, [pc, #96]	; (80029b4 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002952:	2110      	movs	r1, #16
 8002954:	0018      	movs	r0, r3
 8002956:	f001 f8ef 	bl	8003b38 <HAL_GPIO_ReadPin>
 800295a:	0003      	movs	r3, r0
 800295c:	3b01      	subs	r3, #1
 800295e:	425a      	negs	r2, r3
 8002960:	4153      	adcs	r3, r2
 8002962:	b2da      	uxtb	r2, r3
 8002964:	4b14      	ldr	r3, [pc, #80]	; (80029b8 <HAL_GPIO_EXTI_Callback+0xa0>)
 8002966:	701a      	strb	r2, [r3, #0]
		break;
 8002968:	e01d      	b.n	80029a6 <HAL_GPIO_EXTI_Callback+0x8e>
		sleep_timeout_counter = 0;
 800296a:	4b11      	ldr	r3, [pc, #68]	; (80029b0 <HAL_GPIO_EXTI_Callback+0x98>)
 800296c:	2200      	movs	r2, #0
 800296e:	701a      	strb	r2, [r3, #0]
		SystemClock_Config();
 8002970:	f7ff fa44 	bl	8001dfc <SystemClock_Config>
		HAL_ResumeTick();
 8002974:	f000 f92c 	bl	8002bd0 <HAL_ResumeTick>
		right_button_pressed = HAL_GPIO_ReadPin(BTN_R_GPIO_Port, BTN_R_Pin) == GPIO_PIN_SET;
 8002978:	4b0e      	ldr	r3, [pc, #56]	; (80029b4 <HAL_GPIO_EXTI_Callback+0x9c>)
 800297a:	2120      	movs	r1, #32
 800297c:	0018      	movs	r0, r3
 800297e:	f001 f8db 	bl	8003b38 <HAL_GPIO_ReadPin>
 8002982:	0003      	movs	r3, r0
 8002984:	3b01      	subs	r3, #1
 8002986:	425a      	negs	r2, r3
 8002988:	4153      	adcs	r3, r2
 800298a:	b2da      	uxtb	r2, r3
 800298c:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <HAL_GPIO_EXTI_Callback+0xa4>)
 800298e:	701a      	strb	r2, [r3, #0]
		break;
 8002990:	e009      	b.n	80029a6 <HAL_GPIO_EXTI_Callback+0x8e>
		led_green_on();
 8002992:	f7fe fecb 	bl	800172c <led_green_on>
		sleep_timeout_counter = 0;
 8002996:	4b06      	ldr	r3, [pc, #24]	; (80029b0 <HAL_GPIO_EXTI_Callback+0x98>)
 8002998:	2200      	movs	r2, #0
 800299a:	701a      	strb	r2, [r3, #0]
		SystemClock_Config();
 800299c:	f7ff fa2e 	bl	8001dfc <SystemClock_Config>
		HAL_ResumeTick();
 80029a0:	f000 f916 	bl	8002bd0 <HAL_ResumeTick>
		break;
 80029a4:	46c0      	nop			; (mov r8, r8)
}
 80029a6:	46c0      	nop			; (mov r8, r8)
 80029a8:	46bd      	mov	sp, r7
 80029aa:	b002      	add	sp, #8
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	46c0      	nop			; (mov r8, r8)
 80029b0:	20000096 	.word	0x20000096
 80029b4:	50000400 	.word	0x50000400
 80029b8:	20000094 	.word	0x20000094
 80029bc:	20000095 	.word	0x20000095

080029c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029c8:	4a14      	ldr	r2, [pc, #80]	; (8002a1c <_sbrk+0x5c>)
 80029ca:	4b15      	ldr	r3, [pc, #84]	; (8002a20 <_sbrk+0x60>)
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029d4:	4b13      	ldr	r3, [pc, #76]	; (8002a24 <_sbrk+0x64>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d102      	bne.n	80029e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029dc:	4b11      	ldr	r3, [pc, #68]	; (8002a24 <_sbrk+0x64>)
 80029de:	4a12      	ldr	r2, [pc, #72]	; (8002a28 <_sbrk+0x68>)
 80029e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029e2:	4b10      	ldr	r3, [pc, #64]	; (8002a24 <_sbrk+0x64>)
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	18d3      	adds	r3, r2, r3
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d207      	bcs.n	8002a00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029f0:	f003 f986 	bl	8005d00 <__errno>
 80029f4:	0003      	movs	r3, r0
 80029f6:	220c      	movs	r2, #12
 80029f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029fa:	2301      	movs	r3, #1
 80029fc:	425b      	negs	r3, r3
 80029fe:	e009      	b.n	8002a14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a00:	4b08      	ldr	r3, [pc, #32]	; (8002a24 <_sbrk+0x64>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a06:	4b07      	ldr	r3, [pc, #28]	; (8002a24 <_sbrk+0x64>)
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	18d2      	adds	r2, r2, r3
 8002a0e:	4b05      	ldr	r3, [pc, #20]	; (8002a24 <_sbrk+0x64>)
 8002a10:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002a12:	68fb      	ldr	r3, [r7, #12]
}
 8002a14:	0018      	movs	r0, r3
 8002a16:	46bd      	mov	sp, r7
 8002a18:	b006      	add	sp, #24
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	20002000 	.word	0x20002000
 8002a20:	00000400 	.word	0x00000400
 8002a24:	200001d0 	.word	0x200001d0
 8002a28:	200001e8 	.word	0x200001e8

08002a2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a30:	46c0      	nop			; (mov r8, r8)
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
	...

08002a38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002a38:	480d      	ldr	r0, [pc, #52]	; (8002a70 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002a3a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a3c:	480d      	ldr	r0, [pc, #52]	; (8002a74 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a3e:	490e      	ldr	r1, [pc, #56]	; (8002a78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a40:	4a0e      	ldr	r2, [pc, #56]	; (8002a7c <LoopForever+0xe>)
  movs r3, #0
 8002a42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a44:	e002      	b.n	8002a4c <LoopCopyDataInit>

08002a46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a4a:	3304      	adds	r3, #4

08002a4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a50:	d3f9      	bcc.n	8002a46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a52:	4a0b      	ldr	r2, [pc, #44]	; (8002a80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a54:	4c0b      	ldr	r4, [pc, #44]	; (8002a84 <LoopForever+0x16>)
  movs r3, #0
 8002a56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a58:	e001      	b.n	8002a5e <LoopFillZerobss>

08002a5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a5c:	3204      	adds	r2, #4

08002a5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a60:	d3fb      	bcc.n	8002a5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002a62:	f7ff ffe3 	bl	8002a2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a66:	f003 f951 	bl	8005d0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a6a:	f7ff f84d 	bl	8001b08 <main>

08002a6e <LoopForever>:

LoopForever:
    b LoopForever
 8002a6e:	e7fe      	b.n	8002a6e <LoopForever>
   ldr   r0, =_estack
 8002a70:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002a74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a78:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002a7c:	080068cc 	.word	0x080068cc
  ldr r2, =_sbss
 8002a80:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002a84:	200001e8 	.word	0x200001e8

08002a88 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a88:	e7fe      	b.n	8002a88 <ADC1_COMP_IRQHandler>
	...

08002a8c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a92:	1dfb      	adds	r3, r7, #7
 8002a94:	2200      	movs	r2, #0
 8002a96:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002a98:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <HAL_Init+0x3c>)
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	4b0a      	ldr	r3, [pc, #40]	; (8002ac8 <HAL_Init+0x3c>)
 8002a9e:	2140      	movs	r1, #64	; 0x40
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002aa4:	2000      	movs	r0, #0
 8002aa6:	f000 f811 	bl	8002acc <HAL_InitTick>
 8002aaa:	1e03      	subs	r3, r0, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002aae:	1dfb      	adds	r3, r7, #7
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	701a      	strb	r2, [r3, #0]
 8002ab4:	e001      	b.n	8002aba <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ab6:	f7ff fe21 	bl	80026fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002aba:	1dfb      	adds	r3, r7, #7
 8002abc:	781b      	ldrb	r3, [r3, #0]
}
 8002abe:	0018      	movs	r0, r3
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	b002      	add	sp, #8
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	46c0      	nop			; (mov r8, r8)
 8002ac8:	40022000 	.word	0x40022000

08002acc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002acc:	b590      	push	{r4, r7, lr}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ad4:	4b14      	ldr	r3, [pc, #80]	; (8002b28 <HAL_InitTick+0x5c>)
 8002ad6:	681c      	ldr	r4, [r3, #0]
 8002ad8:	4b14      	ldr	r3, [pc, #80]	; (8002b2c <HAL_InitTick+0x60>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	0019      	movs	r1, r3
 8002ade:	23fa      	movs	r3, #250	; 0xfa
 8002ae0:	0098      	lsls	r0, r3, #2
 8002ae2:	f7fd fb1b 	bl	800011c <__udivsi3>
 8002ae6:	0003      	movs	r3, r0
 8002ae8:	0019      	movs	r1, r3
 8002aea:	0020      	movs	r0, r4
 8002aec:	f7fd fb16 	bl	800011c <__udivsi3>
 8002af0:	0003      	movs	r3, r0
 8002af2:	0018      	movs	r0, r3
 8002af4:	f000 fceb 	bl	80034ce <HAL_SYSTICK_Config>
 8002af8:	1e03      	subs	r3, r0, #0
 8002afa:	d001      	beq.n	8002b00 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e00f      	b.n	8002b20 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b03      	cmp	r3, #3
 8002b04:	d80b      	bhi.n	8002b1e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b06:	6879      	ldr	r1, [r7, #4]
 8002b08:	2301      	movs	r3, #1
 8002b0a:	425b      	negs	r3, r3
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	0018      	movs	r0, r3
 8002b10:	f000 fcb8 	bl	8003484 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b14:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <HAL_InitTick+0x64>)
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	e000      	b.n	8002b20 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
}
 8002b20:	0018      	movs	r0, r3
 8002b22:	46bd      	mov	sp, r7
 8002b24:	b003      	add	sp, #12
 8002b26:	bd90      	pop	{r4, r7, pc}
 8002b28:	20000004 	.word	0x20000004
 8002b2c:	2000000c 	.word	0x2000000c
 8002b30:	20000008 	.word	0x20000008

08002b34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b38:	4b05      	ldr	r3, [pc, #20]	; (8002b50 <HAL_IncTick+0x1c>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	001a      	movs	r2, r3
 8002b3e:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <HAL_IncTick+0x20>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	18d2      	adds	r2, r2, r3
 8002b44:	4b03      	ldr	r3, [pc, #12]	; (8002b54 <HAL_IncTick+0x20>)
 8002b46:	601a      	str	r2, [r3, #0]
}
 8002b48:	46c0      	nop			; (mov r8, r8)
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	46c0      	nop			; (mov r8, r8)
 8002b50:	2000000c 	.word	0x2000000c
 8002b54:	200001d4 	.word	0x200001d4

08002b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b5c:	4b02      	ldr	r3, [pc, #8]	; (8002b68 <HAL_GetTick+0x10>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
}
 8002b60:	0018      	movs	r0, r3
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	46c0      	nop			; (mov r8, r8)
 8002b68:	200001d4 	.word	0x200001d4

08002b6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b74:	f7ff fff0 	bl	8002b58 <HAL_GetTick>
 8002b78:	0003      	movs	r3, r0
 8002b7a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	3301      	adds	r3, #1
 8002b84:	d005      	beq.n	8002b92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b86:	4b0a      	ldr	r3, [pc, #40]	; (8002bb0 <HAL_Delay+0x44>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	001a      	movs	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	189b      	adds	r3, r3, r2
 8002b90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b92:	46c0      	nop			; (mov r8, r8)
 8002b94:	f7ff ffe0 	bl	8002b58 <HAL_GetTick>
 8002b98:	0002      	movs	r2, r0
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d8f7      	bhi.n	8002b94 <HAL_Delay+0x28>
  {
  }
}
 8002ba4:	46c0      	nop			; (mov r8, r8)
 8002ba6:	46c0      	nop			; (mov r8, r8)
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	b004      	add	sp, #16
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	46c0      	nop			; (mov r8, r8)
 8002bb0:	2000000c 	.word	0x2000000c

08002bb4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002bb8:	4b04      	ldr	r3, [pc, #16]	; (8002bcc <HAL_SuspendTick+0x18>)
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	4b03      	ldr	r3, [pc, #12]	; (8002bcc <HAL_SuspendTick+0x18>)
 8002bbe:	2102      	movs	r1, #2
 8002bc0:	438a      	bics	r2, r1
 8002bc2:	601a      	str	r2, [r3, #0]
}
 8002bc4:	46c0      	nop			; (mov r8, r8)
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	46c0      	nop			; (mov r8, r8)
 8002bcc:	e000e010 	.word	0xe000e010

08002bd0 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8002bd4:	4b04      	ldr	r3, [pc, #16]	; (8002be8 <HAL_ResumeTick+0x18>)
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	4b03      	ldr	r3, [pc, #12]	; (8002be8 <HAL_ResumeTick+0x18>)
 8002bda:	2102      	movs	r1, #2
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	601a      	str	r2, [r3, #0]
}
 8002be0:	46c0      	nop			; (mov r8, r8)
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	46c0      	nop			; (mov r8, r8)
 8002be8:	e000e010 	.word	0xe000e010

08002bec <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e159      	b.n	8002eb2 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10a      	bne.n	8002c1c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2250      	movs	r2, #80	; 0x50
 8002c10:	2100      	movs	r1, #0
 8002c12:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	0018      	movs	r0, r3
 8002c18:	f7ff fd84 	bl	8002724 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c20:	2210      	movs	r2, #16
 8002c22:	4013      	ands	r3, r2
 8002c24:	2b10      	cmp	r3, #16
 8002c26:	d005      	beq.n	8002c34 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	2204      	movs	r2, #4
 8002c30:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002c32:	d00b      	beq.n	8002c4c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c38:	2210      	movs	r2, #16
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2250      	movs	r2, #80	; 0x50
 8002c44:	2100      	movs	r1, #0
 8002c46:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e132      	b.n	8002eb2 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c50:	4a9a      	ldr	r2, [pc, #616]	; (8002ebc <HAL_ADC_Init+0x2d0>)
 8002c52:	4013      	ands	r3, r2
 8002c54:	2202      	movs	r2, #2
 8002c56:	431a      	orrs	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	2203      	movs	r2, #3
 8002c64:	4013      	ands	r3, r2
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d108      	bne.n	8002c7c <HAL_ADC_Init+0x90>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2201      	movs	r2, #1
 8002c72:	4013      	ands	r3, r2
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d101      	bne.n	8002c7c <HAL_ADC_Init+0x90>
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e000      	b.n	8002c7e <HAL_ADC_Init+0x92>
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d149      	bne.n	8002d16 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	23c0      	movs	r3, #192	; 0xc0
 8002c88:	061b      	lsls	r3, r3, #24
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d00b      	beq.n	8002ca6 <HAL_ADC_Init+0xba>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685a      	ldr	r2, [r3, #4]
 8002c92:	2380      	movs	r3, #128	; 0x80
 8002c94:	05db      	lsls	r3, r3, #23
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d005      	beq.n	8002ca6 <HAL_ADC_Init+0xba>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685a      	ldr	r2, [r3, #4]
 8002c9e:	2380      	movs	r3, #128	; 0x80
 8002ca0:	061b      	lsls	r3, r3, #24
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d111      	bne.n	8002cca <HAL_ADC_Init+0xde>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	691a      	ldr	r2, [r3, #16]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	0092      	lsls	r2, r2, #2
 8002cb2:	0892      	lsrs	r2, r2, #2
 8002cb4:	611a      	str	r2, [r3, #16]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	6919      	ldr	r1, [r3, #16]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	611a      	str	r2, [r3, #16]
 8002cc8:	e014      	b.n	8002cf4 <HAL_ADC_Init+0x108>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	691a      	ldr	r2, [r3, #16]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	0092      	lsls	r2, r2, #2
 8002cd6:	0892      	lsrs	r2, r2, #2
 8002cd8:	611a      	str	r2, [r3, #16]
 8002cda:	4b79      	ldr	r3, [pc, #484]	; (8002ec0 <HAL_ADC_Init+0x2d4>)
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	4b78      	ldr	r3, [pc, #480]	; (8002ec0 <HAL_ADC_Init+0x2d4>)
 8002ce0:	4978      	ldr	r1, [pc, #480]	; (8002ec4 <HAL_ADC_Init+0x2d8>)
 8002ce2:	400a      	ands	r2, r1
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	4b76      	ldr	r3, [pc, #472]	; (8002ec0 <HAL_ADC_Init+0x2d4>)
 8002ce8:	6819      	ldr	r1, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	4b74      	ldr	r3, [pc, #464]	; (8002ec0 <HAL_ADC_Init+0x2d4>)
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68da      	ldr	r2, [r3, #12]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2118      	movs	r1, #24
 8002d00:	438a      	bics	r2, r1
 8002d02:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68d9      	ldr	r1, [r3, #12]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	689a      	ldr	r2, [r3, #8]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8002d16:	4b6a      	ldr	r3, [pc, #424]	; (8002ec0 <HAL_ADC_Init+0x2d4>)
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	4b69      	ldr	r3, [pc, #420]	; (8002ec0 <HAL_ADC_Init+0x2d4>)
 8002d1c:	496a      	ldr	r1, [pc, #424]	; (8002ec8 <HAL_ADC_Init+0x2dc>)
 8002d1e:	400a      	ands	r2, r1
 8002d20:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8002d22:	4b67      	ldr	r3, [pc, #412]	; (8002ec0 <HAL_ADC_Init+0x2d4>)
 8002d24:	6819      	ldr	r1, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d2a:	065a      	lsls	r2, r3, #25
 8002d2c:	4b64      	ldr	r3, [pc, #400]	; (8002ec0 <HAL_ADC_Init+0x2d4>)
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	2380      	movs	r3, #128	; 0x80
 8002d3a:	055b      	lsls	r3, r3, #21
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	d108      	bne.n	8002d52 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689a      	ldr	r2, [r3, #8]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2180      	movs	r1, #128	; 0x80
 8002d4c:	0549      	lsls	r1, r1, #21
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68da      	ldr	r2, [r3, #12]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	495b      	ldr	r1, [pc, #364]	; (8002ecc <HAL_ADC_Init+0x2e0>)
 8002d5e:	400a      	ands	r2, r1
 8002d60:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68d9      	ldr	r1, [r3, #12]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d101      	bne.n	8002d78 <HAL_ADC_Init+0x18c>
 8002d74:	2304      	movs	r3, #4
 8002d76:	e000      	b.n	8002d7a <HAL_ADC_Init+0x18e>
 8002d78:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002d7a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2020      	movs	r0, #32
 8002d80:	5c1b      	ldrb	r3, [r3, r0]
 8002d82:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002d84:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	202c      	movs	r0, #44	; 0x2c
 8002d8a:	5c1b      	ldrb	r3, [r3, r0]
 8002d8c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002d8e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002d94:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8002d9c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	69db      	ldr	r3, [r3, #28]
 8002da2:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002da4:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	430a      	orrs	r2, r1
 8002dac:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002db2:	23c2      	movs	r3, #194	; 0xc2
 8002db4:	33ff      	adds	r3, #255	; 0xff
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d00b      	beq.n	8002dd2 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68d9      	ldr	r1, [r3, #12]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2221      	movs	r2, #33	; 0x21
 8002dd6:	5c9b      	ldrb	r3, [r3, r2]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d11a      	bne.n	8002e12 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2220      	movs	r2, #32
 8002de0:	5c9b      	ldrb	r3, [r3, r2]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d109      	bne.n	8002dfa <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68da      	ldr	r2, [r3, #12]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2180      	movs	r1, #128	; 0x80
 8002df2:	0249      	lsls	r1, r1, #9
 8002df4:	430a      	orrs	r2, r1
 8002df6:	60da      	str	r2, [r3, #12]
 8002df8:	e00b      	b.n	8002e12 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dfe:	2220      	movs	r2, #32
 8002e00:	431a      	orrs	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	431a      	orrs	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d11f      	bne.n	8002e5a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	691a      	ldr	r2, [r3, #16]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	492a      	ldr	r1, [pc, #168]	; (8002ed0 <HAL_ADC_Init+0x2e4>)
 8002e26:	400a      	ands	r2, r1
 8002e28:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6919      	ldr	r1, [r3, #16]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002e38:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8002e3e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	430a      	orrs	r2, r1
 8002e46:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	691a      	ldr	r2, [r3, #16]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2101      	movs	r1, #1
 8002e54:	430a      	orrs	r2, r1
 8002e56:	611a      	str	r2, [r3, #16]
 8002e58:	e00e      	b.n	8002e78 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	2201      	movs	r2, #1
 8002e62:	4013      	ands	r3, r2
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d107      	bne.n	8002e78 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	691a      	ldr	r2, [r3, #16]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2101      	movs	r1, #1
 8002e74:	438a      	bics	r2, r1
 8002e76:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	695a      	ldr	r2, [r3, #20]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2107      	movs	r1, #7
 8002e84:	438a      	bics	r2, r1
 8002e86:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6959      	ldr	r1, [r3, #20]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	430a      	orrs	r2, r1
 8002e98:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea4:	2203      	movs	r2, #3
 8002ea6:	4393      	bics	r3, r2
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	b002      	add	sp, #8
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	fffffefd 	.word	0xfffffefd
 8002ec0:	40012708 	.word	0x40012708
 8002ec4:	ffc3ffff 	.word	0xffc3ffff
 8002ec8:	fdffffff 	.word	0xfdffffff
 8002ecc:	fffe0219 	.word	0xfffe0219
 8002ed0:	fffffc03 	.word	0xfffffc03

08002ed4 <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002ed4:	b590      	push	{r4, r7, lr}
 8002ed6:	b087      	sub	sp, #28
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ee0:	2317      	movs	r3, #23
 8002ee2:	18fb      	adds	r3, r7, r3
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	2204      	movs	r2, #4
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	d15e      	bne.n	8002fb2 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2250      	movs	r2, #80	; 0x50
 8002ef8:	5c9b      	ldrb	r3, [r3, r2]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d101      	bne.n	8002f02 <HAL_ADC_Start_DMA+0x2e>
 8002efe:	2302      	movs	r3, #2
 8002f00:	e05e      	b.n	8002fc0 <HAL_ADC_Start_DMA+0xec>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2250      	movs	r2, #80	; 0x50
 8002f06:	2101      	movs	r1, #1
 8002f08:	5499      	strb	r1, [r3, r2]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68da      	ldr	r2, [r3, #12]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2101      	movs	r1, #1
 8002f16:	430a      	orrs	r2, r1
 8002f18:	60da      	str	r2, [r3, #12]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d007      	beq.n	8002f32 <HAL_ADC_Start_DMA+0x5e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002f22:	2317      	movs	r3, #23
 8002f24:	18fc      	adds	r4, r7, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	0018      	movs	r0, r3
 8002f2a:	f000 f8f3 	bl	8003114 <ADC_Enable>
 8002f2e:	0003      	movs	r3, r0
 8002f30:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002f32:	2317      	movs	r3, #23
 8002f34:	18fb      	adds	r3, r7, r3
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d13e      	bne.n	8002fba <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f40:	4a21      	ldr	r2, [pc, #132]	; (8002fc8 <HAL_ADC_Start_DMA+0xf4>)
 8002f42:	4013      	ands	r3, r2
 8002f44:	2280      	movs	r2, #128	; 0x80
 8002f46:	0052      	lsls	r2, r2, #1
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2250      	movs	r2, #80	; 0x50
 8002f58:	2100      	movs	r1, #0
 8002f5a:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f60:	4a1a      	ldr	r2, [pc, #104]	; (8002fcc <HAL_ADC_Start_DMA+0xf8>)
 8002f62:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f68:	4a19      	ldr	r2, [pc, #100]	; (8002fd0 <HAL_ADC_Start_DMA+0xfc>)
 8002f6a:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f70:	4a18      	ldr	r2, [pc, #96]	; (8002fd4 <HAL_ADC_Start_DMA+0x100>)
 8002f72:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	221c      	movs	r2, #28
 8002f7a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2110      	movs	r1, #16
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	605a      	str	r2, [r3, #4]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	3340      	adds	r3, #64	; 0x40
 8002f96:	0019      	movs	r1, r3
 8002f98:	68ba      	ldr	r2, [r7, #8]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f000 fb1c 	bl	80035d8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689a      	ldr	r2, [r3, #8]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2104      	movs	r1, #4
 8002fac:	430a      	orrs	r2, r1
 8002fae:	609a      	str	r2, [r3, #8]
 8002fb0:	e003      	b.n	8002fba <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002fb2:	2317      	movs	r3, #23
 8002fb4:	18fb      	adds	r3, r7, r3
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002fba:	2317      	movs	r3, #23
 8002fbc:	18fb      	adds	r3, r7, r3
 8002fbe:	781b      	ldrb	r3, [r3, #0]
}
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	b007      	add	sp, #28
 8002fc6:	bd90      	pop	{r4, r7, pc}
 8002fc8:	fffff0fe 	.word	0xfffff0fe
 8002fcc:	080031e5 	.word	0x080031e5
 8002fd0:	08003299 	.word	0x08003299
 8002fd4:	080032b7 	.word	0x080032b7

08002fd8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002fe0:	46c0      	nop			; (mov r8, r8)
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	b002      	add	sp, #8
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002ff0:	46c0      	nop			; (mov r8, r8)
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	b002      	add	sp, #8
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003000:	46c0      	nop			; (mov r8, r8)
 8003002:	46bd      	mov	sp, r7
 8003004:	b002      	add	sp, #8
 8003006:	bd80      	pop	{r7, pc}

08003008 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2250      	movs	r2, #80	; 0x50
 8003016:	5c9b      	ldrb	r3, [r3, r2]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d101      	bne.n	8003020 <HAL_ADC_ConfigChannel+0x18>
 800301c:	2302      	movs	r3, #2
 800301e:	e06c      	b.n	80030fa <HAL_ADC_ConfigChannel+0xf2>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2250      	movs	r2, #80	; 0x50
 8003024:	2101      	movs	r1, #1
 8003026:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	2204      	movs	r2, #4
 8003030:	4013      	ands	r3, r2
 8003032:	d00b      	beq.n	800304c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003038:	2220      	movs	r2, #32
 800303a:	431a      	orrs	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2250      	movs	r2, #80	; 0x50
 8003044:	2100      	movs	r1, #0
 8003046:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e056      	b.n	80030fa <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	4a2c      	ldr	r2, [pc, #176]	; (8003104 <HAL_ADC_ConfigChannel+0xfc>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d028      	beq.n	80030a8 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	035b      	lsls	r3, r3, #13
 8003062:	0b5a      	lsrs	r2, r3, #13
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	430a      	orrs	r2, r1
 800306a:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	2380      	movs	r3, #128	; 0x80
 8003072:	02db      	lsls	r3, r3, #11
 8003074:	4013      	ands	r3, r2
 8003076:	d009      	beq.n	800308c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8003078:	4b23      	ldr	r3, [pc, #140]	; (8003108 <HAL_ADC_ConfigChannel+0x100>)
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	4b22      	ldr	r3, [pc, #136]	; (8003108 <HAL_ADC_ConfigChannel+0x100>)
 800307e:	2180      	movs	r1, #128	; 0x80
 8003080:	0409      	lsls	r1, r1, #16
 8003082:	430a      	orrs	r2, r1
 8003084:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8003086:	200a      	movs	r0, #10
 8003088:	f000 f930 	bl	80032ec <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	2380      	movs	r3, #128	; 0x80
 8003092:	029b      	lsls	r3, r3, #10
 8003094:	4013      	ands	r3, r2
 8003096:	d02b      	beq.n	80030f0 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8003098:	4b1b      	ldr	r3, [pc, #108]	; (8003108 <HAL_ADC_ConfigChannel+0x100>)
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	4b1a      	ldr	r3, [pc, #104]	; (8003108 <HAL_ADC_ConfigChannel+0x100>)
 800309e:	2180      	movs	r1, #128	; 0x80
 80030a0:	03c9      	lsls	r1, r1, #15
 80030a2:	430a      	orrs	r2, r1
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	e023      	b.n	80030f0 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	035b      	lsls	r3, r3, #13
 80030b4:	0b5b      	lsrs	r3, r3, #13
 80030b6:	43d9      	mvns	r1, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	400a      	ands	r2, r1
 80030be:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	2380      	movs	r3, #128	; 0x80
 80030c6:	02db      	lsls	r3, r3, #11
 80030c8:	4013      	ands	r3, r2
 80030ca:	d005      	beq.n	80030d8 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80030cc:	4b0e      	ldr	r3, [pc, #56]	; (8003108 <HAL_ADC_ConfigChannel+0x100>)
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	4b0d      	ldr	r3, [pc, #52]	; (8003108 <HAL_ADC_ConfigChannel+0x100>)
 80030d2:	490e      	ldr	r1, [pc, #56]	; (800310c <HAL_ADC_ConfigChannel+0x104>)
 80030d4:	400a      	ands	r2, r1
 80030d6:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	2380      	movs	r3, #128	; 0x80
 80030de:	029b      	lsls	r3, r3, #10
 80030e0:	4013      	ands	r3, r2
 80030e2:	d005      	beq.n	80030f0 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80030e4:	4b08      	ldr	r3, [pc, #32]	; (8003108 <HAL_ADC_ConfigChannel+0x100>)
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	4b07      	ldr	r3, [pc, #28]	; (8003108 <HAL_ADC_ConfigChannel+0x100>)
 80030ea:	4909      	ldr	r1, [pc, #36]	; (8003110 <HAL_ADC_ConfigChannel+0x108>)
 80030ec:	400a      	ands	r2, r1
 80030ee:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2250      	movs	r2, #80	; 0x50
 80030f4:	2100      	movs	r1, #0
 80030f6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	0018      	movs	r0, r3
 80030fc:	46bd      	mov	sp, r7
 80030fe:	b002      	add	sp, #8
 8003100:	bd80      	pop	{r7, pc}
 8003102:	46c0      	nop			; (mov r8, r8)
 8003104:	00001001 	.word	0x00001001
 8003108:	40012708 	.word	0x40012708
 800310c:	ff7fffff 	.word	0xff7fffff
 8003110:	ffbfffff 	.word	0xffbfffff

08003114 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800311c:	2300      	movs	r3, #0
 800311e:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	2203      	movs	r2, #3
 8003128:	4013      	ands	r3, r2
 800312a:	2b01      	cmp	r3, #1
 800312c:	d108      	bne.n	8003140 <ADC_Enable+0x2c>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2201      	movs	r2, #1
 8003136:	4013      	ands	r3, r2
 8003138:	2b01      	cmp	r3, #1
 800313a:	d101      	bne.n	8003140 <ADC_Enable+0x2c>
 800313c:	2301      	movs	r3, #1
 800313e:	e000      	b.n	8003142 <ADC_Enable+0x2e>
 8003140:	2300      	movs	r3, #0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d146      	bne.n	80031d4 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	4a24      	ldr	r2, [pc, #144]	; (80031e0 <ADC_Enable+0xcc>)
 800314e:	4013      	ands	r3, r2
 8003150:	d00d      	beq.n	800316e <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003156:	2210      	movs	r2, #16
 8003158:	431a      	orrs	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003162:	2201      	movs	r2, #1
 8003164:	431a      	orrs	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e033      	b.n	80031d6 <ADC_Enable+0xc2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2101      	movs	r1, #1
 800317a:	430a      	orrs	r2, r1
 800317c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800317e:	2001      	movs	r0, #1
 8003180:	f000 f8b4 	bl	80032ec <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003184:	f7ff fce8 	bl	8002b58 <HAL_GetTick>
 8003188:	0003      	movs	r3, r0
 800318a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800318c:	e01b      	b.n	80031c6 <ADC_Enable+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800318e:	f7ff fce3 	bl	8002b58 <HAL_GetTick>
 8003192:	0002      	movs	r2, r0
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b0a      	cmp	r3, #10
 800319a:	d914      	bls.n	80031c6 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2201      	movs	r2, #1
 80031a4:	4013      	ands	r3, r2
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d00d      	beq.n	80031c6 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ae:	2210      	movs	r2, #16
 80031b0:	431a      	orrs	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ba:	2201      	movs	r2, #1
 80031bc:	431a      	orrs	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e007      	b.n	80031d6 <ADC_Enable+0xc2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2201      	movs	r2, #1
 80031ce:	4013      	ands	r3, r2
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d1dc      	bne.n	800318e <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	0018      	movs	r0, r3
 80031d8:	46bd      	mov	sp, r7
 80031da:	b004      	add	sp, #16
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	46c0      	nop			; (mov r8, r8)
 80031e0:	80000017 	.word	0x80000017

080031e4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f6:	2250      	movs	r2, #80	; 0x50
 80031f8:	4013      	ands	r3, r2
 80031fa:	d141      	bne.n	8003280 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003200:	2280      	movs	r2, #128	; 0x80
 8003202:	0092      	lsls	r2, r2, #2
 8003204:	431a      	orrs	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68da      	ldr	r2, [r3, #12]
 8003210:	23c0      	movs	r3, #192	; 0xc0
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	4013      	ands	r3, r2
 8003216:	d12e      	bne.n	8003276 <ADC_DMAConvCplt+0x92>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2220      	movs	r2, #32
 800321c:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800321e:	2b00      	cmp	r3, #0
 8003220:	d129      	bne.n	8003276 <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2208      	movs	r2, #8
 800322a:	4013      	ands	r3, r2
 800322c:	2b08      	cmp	r3, #8
 800322e:	d122      	bne.n	8003276 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	2204      	movs	r2, #4
 8003238:	4013      	ands	r3, r2
 800323a:	d110      	bne.n	800325e <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	210c      	movs	r1, #12
 8003248:	438a      	bics	r2, r1
 800324a:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003250:	4a10      	ldr	r2, [pc, #64]	; (8003294 <ADC_DMAConvCplt+0xb0>)
 8003252:	4013      	ands	r3, r2
 8003254:	2201      	movs	r2, #1
 8003256:	431a      	orrs	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	655a      	str	r2, [r3, #84]	; 0x54
 800325c:	e00b      	b.n	8003276 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003262:	2220      	movs	r2, #32
 8003264:	431a      	orrs	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800326e:	2201      	movs	r2, #1
 8003270:	431a      	orrs	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	0018      	movs	r0, r3
 800327a:	f7ff fead 	bl	8002fd8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800327e:	e005      	b.n	800328c <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	0010      	movs	r0, r2
 800328a:	4798      	blx	r3
}
 800328c:	46c0      	nop			; (mov r8, r8)
 800328e:	46bd      	mov	sp, r7
 8003290:	b004      	add	sp, #16
 8003292:	bd80      	pop	{r7, pc}
 8003294:	fffffefe 	.word	0xfffffefe

08003298 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a4:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	0018      	movs	r0, r3
 80032aa:	f7ff fe9d 	bl	8002fe8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032ae:	46c0      	nop			; (mov r8, r8)
 80032b0:	46bd      	mov	sp, r7
 80032b2:	b004      	add	sp, #16
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b084      	sub	sp, #16
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c8:	2240      	movs	r2, #64	; 0x40
 80032ca:	431a      	orrs	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d4:	2204      	movs	r2, #4
 80032d6:	431a      	orrs	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	0018      	movs	r0, r3
 80032e0:	f7ff fe8a 	bl	8002ff8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032e4:	46c0      	nop			; (mov r8, r8)
 80032e6:	46bd      	mov	sp, r7
 80032e8:	b004      	add	sp, #16
 80032ea:	bd80      	pop	{r7, pc}

080032ec <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80032f4:	4b0b      	ldr	r3, [pc, #44]	; (8003324 <ADC_DelayMicroSecond+0x38>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	490b      	ldr	r1, [pc, #44]	; (8003328 <ADC_DelayMicroSecond+0x3c>)
 80032fa:	0018      	movs	r0, r3
 80032fc:	f7fc ff0e 	bl	800011c <__udivsi3>
 8003300:	0003      	movs	r3, r0
 8003302:	001a      	movs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4353      	muls	r3, r2
 8003308:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 800330a:	e002      	b.n	8003312 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	3b01      	subs	r3, #1
 8003310:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1f9      	bne.n	800330c <ADC_DelayMicroSecond+0x20>
  } 
}
 8003318:	46c0      	nop			; (mov r8, r8)
 800331a:	46c0      	nop			; (mov r8, r8)
 800331c:	46bd      	mov	sp, r7
 800331e:	b004      	add	sp, #16
 8003320:	bd80      	pop	{r7, pc}
 8003322:	46c0      	nop			; (mov r8, r8)
 8003324:	20000004 	.word	0x20000004
 8003328:	000f4240 	.word	0x000f4240

0800332c <__NVIC_EnableIRQ>:
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	0002      	movs	r2, r0
 8003334:	1dfb      	adds	r3, r7, #7
 8003336:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003338:	1dfb      	adds	r3, r7, #7
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	2b7f      	cmp	r3, #127	; 0x7f
 800333e:	d809      	bhi.n	8003354 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003340:	1dfb      	adds	r3, r7, #7
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	001a      	movs	r2, r3
 8003346:	231f      	movs	r3, #31
 8003348:	401a      	ands	r2, r3
 800334a:	4b04      	ldr	r3, [pc, #16]	; (800335c <__NVIC_EnableIRQ+0x30>)
 800334c:	2101      	movs	r1, #1
 800334e:	4091      	lsls	r1, r2
 8003350:	000a      	movs	r2, r1
 8003352:	601a      	str	r2, [r3, #0]
}
 8003354:	46c0      	nop			; (mov r8, r8)
 8003356:	46bd      	mov	sp, r7
 8003358:	b002      	add	sp, #8
 800335a:	bd80      	pop	{r7, pc}
 800335c:	e000e100 	.word	0xe000e100

08003360 <__NVIC_SetPriority>:
{
 8003360:	b590      	push	{r4, r7, lr}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	0002      	movs	r2, r0
 8003368:	6039      	str	r1, [r7, #0]
 800336a:	1dfb      	adds	r3, r7, #7
 800336c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800336e:	1dfb      	adds	r3, r7, #7
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	2b7f      	cmp	r3, #127	; 0x7f
 8003374:	d828      	bhi.n	80033c8 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003376:	4a2f      	ldr	r2, [pc, #188]	; (8003434 <__NVIC_SetPriority+0xd4>)
 8003378:	1dfb      	adds	r3, r7, #7
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	b25b      	sxtb	r3, r3
 800337e:	089b      	lsrs	r3, r3, #2
 8003380:	33c0      	adds	r3, #192	; 0xc0
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	589b      	ldr	r3, [r3, r2]
 8003386:	1dfa      	adds	r2, r7, #7
 8003388:	7812      	ldrb	r2, [r2, #0]
 800338a:	0011      	movs	r1, r2
 800338c:	2203      	movs	r2, #3
 800338e:	400a      	ands	r2, r1
 8003390:	00d2      	lsls	r2, r2, #3
 8003392:	21ff      	movs	r1, #255	; 0xff
 8003394:	4091      	lsls	r1, r2
 8003396:	000a      	movs	r2, r1
 8003398:	43d2      	mvns	r2, r2
 800339a:	401a      	ands	r2, r3
 800339c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	019b      	lsls	r3, r3, #6
 80033a2:	22ff      	movs	r2, #255	; 0xff
 80033a4:	401a      	ands	r2, r3
 80033a6:	1dfb      	adds	r3, r7, #7
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	0018      	movs	r0, r3
 80033ac:	2303      	movs	r3, #3
 80033ae:	4003      	ands	r3, r0
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033b4:	481f      	ldr	r0, [pc, #124]	; (8003434 <__NVIC_SetPriority+0xd4>)
 80033b6:	1dfb      	adds	r3, r7, #7
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	b25b      	sxtb	r3, r3
 80033bc:	089b      	lsrs	r3, r3, #2
 80033be:	430a      	orrs	r2, r1
 80033c0:	33c0      	adds	r3, #192	; 0xc0
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	501a      	str	r2, [r3, r0]
}
 80033c6:	e031      	b.n	800342c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033c8:	4a1b      	ldr	r2, [pc, #108]	; (8003438 <__NVIC_SetPriority+0xd8>)
 80033ca:	1dfb      	adds	r3, r7, #7
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	0019      	movs	r1, r3
 80033d0:	230f      	movs	r3, #15
 80033d2:	400b      	ands	r3, r1
 80033d4:	3b08      	subs	r3, #8
 80033d6:	089b      	lsrs	r3, r3, #2
 80033d8:	3306      	adds	r3, #6
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	18d3      	adds	r3, r2, r3
 80033de:	3304      	adds	r3, #4
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	1dfa      	adds	r2, r7, #7
 80033e4:	7812      	ldrb	r2, [r2, #0]
 80033e6:	0011      	movs	r1, r2
 80033e8:	2203      	movs	r2, #3
 80033ea:	400a      	ands	r2, r1
 80033ec:	00d2      	lsls	r2, r2, #3
 80033ee:	21ff      	movs	r1, #255	; 0xff
 80033f0:	4091      	lsls	r1, r2
 80033f2:	000a      	movs	r2, r1
 80033f4:	43d2      	mvns	r2, r2
 80033f6:	401a      	ands	r2, r3
 80033f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	019b      	lsls	r3, r3, #6
 80033fe:	22ff      	movs	r2, #255	; 0xff
 8003400:	401a      	ands	r2, r3
 8003402:	1dfb      	adds	r3, r7, #7
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	0018      	movs	r0, r3
 8003408:	2303      	movs	r3, #3
 800340a:	4003      	ands	r3, r0
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003410:	4809      	ldr	r0, [pc, #36]	; (8003438 <__NVIC_SetPriority+0xd8>)
 8003412:	1dfb      	adds	r3, r7, #7
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	001c      	movs	r4, r3
 8003418:	230f      	movs	r3, #15
 800341a:	4023      	ands	r3, r4
 800341c:	3b08      	subs	r3, #8
 800341e:	089b      	lsrs	r3, r3, #2
 8003420:	430a      	orrs	r2, r1
 8003422:	3306      	adds	r3, #6
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	18c3      	adds	r3, r0, r3
 8003428:	3304      	adds	r3, #4
 800342a:	601a      	str	r2, [r3, #0]
}
 800342c:	46c0      	nop			; (mov r8, r8)
 800342e:	46bd      	mov	sp, r7
 8003430:	b003      	add	sp, #12
 8003432:	bd90      	pop	{r4, r7, pc}
 8003434:	e000e100 	.word	0xe000e100
 8003438:	e000ed00 	.word	0xe000ed00

0800343c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	1e5a      	subs	r2, r3, #1
 8003448:	2380      	movs	r3, #128	; 0x80
 800344a:	045b      	lsls	r3, r3, #17
 800344c:	429a      	cmp	r2, r3
 800344e:	d301      	bcc.n	8003454 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003450:	2301      	movs	r3, #1
 8003452:	e010      	b.n	8003476 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003454:	4b0a      	ldr	r3, [pc, #40]	; (8003480 <SysTick_Config+0x44>)
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	3a01      	subs	r2, #1
 800345a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800345c:	2301      	movs	r3, #1
 800345e:	425b      	negs	r3, r3
 8003460:	2103      	movs	r1, #3
 8003462:	0018      	movs	r0, r3
 8003464:	f7ff ff7c 	bl	8003360 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003468:	4b05      	ldr	r3, [pc, #20]	; (8003480 <SysTick_Config+0x44>)
 800346a:	2200      	movs	r2, #0
 800346c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800346e:	4b04      	ldr	r3, [pc, #16]	; (8003480 <SysTick_Config+0x44>)
 8003470:	2207      	movs	r2, #7
 8003472:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003474:	2300      	movs	r3, #0
}
 8003476:	0018      	movs	r0, r3
 8003478:	46bd      	mov	sp, r7
 800347a:	b002      	add	sp, #8
 800347c:	bd80      	pop	{r7, pc}
 800347e:	46c0      	nop			; (mov r8, r8)
 8003480:	e000e010 	.word	0xe000e010

08003484 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	60b9      	str	r1, [r7, #8]
 800348c:	607a      	str	r2, [r7, #4]
 800348e:	210f      	movs	r1, #15
 8003490:	187b      	adds	r3, r7, r1
 8003492:	1c02      	adds	r2, r0, #0
 8003494:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003496:	68ba      	ldr	r2, [r7, #8]
 8003498:	187b      	adds	r3, r7, r1
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	b25b      	sxtb	r3, r3
 800349e:	0011      	movs	r1, r2
 80034a0:	0018      	movs	r0, r3
 80034a2:	f7ff ff5d 	bl	8003360 <__NVIC_SetPriority>
}
 80034a6:	46c0      	nop			; (mov r8, r8)
 80034a8:	46bd      	mov	sp, r7
 80034aa:	b004      	add	sp, #16
 80034ac:	bd80      	pop	{r7, pc}

080034ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b082      	sub	sp, #8
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	0002      	movs	r2, r0
 80034b6:	1dfb      	adds	r3, r7, #7
 80034b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034ba:	1dfb      	adds	r3, r7, #7
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	b25b      	sxtb	r3, r3
 80034c0:	0018      	movs	r0, r3
 80034c2:	f7ff ff33 	bl	800332c <__NVIC_EnableIRQ>
}
 80034c6:	46c0      	nop			; (mov r8, r8)
 80034c8:	46bd      	mov	sp, r7
 80034ca:	b002      	add	sp, #8
 80034cc:	bd80      	pop	{r7, pc}

080034ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b082      	sub	sp, #8
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	0018      	movs	r0, r3
 80034da:	f7ff ffaf 	bl	800343c <SysTick_Config>
 80034de:	0003      	movs	r3, r0
}
 80034e0:	0018      	movs	r0, r3
 80034e2:	46bd      	mov	sp, r7
 80034e4:	b002      	add	sp, #8
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e061      	b.n	80035be <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a32      	ldr	r2, [pc, #200]	; (80035c8 <HAL_DMA_Init+0xe0>)
 8003500:	4694      	mov	ip, r2
 8003502:	4463      	add	r3, ip
 8003504:	2114      	movs	r1, #20
 8003506:	0018      	movs	r0, r3
 8003508:	f7fc fe08 	bl	800011c <__udivsi3>
 800350c:	0003      	movs	r3, r0
 800350e:	009a      	lsls	r2, r3, #2
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a2d      	ldr	r2, [pc, #180]	; (80035cc <HAL_DMA_Init+0xe4>)
 8003518:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2225      	movs	r2, #37	; 0x25
 800351e:	2102      	movs	r1, #2
 8003520:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	4a28      	ldr	r2, [pc, #160]	; (80035d0 <HAL_DMA_Init+0xe8>)
 800352e:	4013      	ands	r3, r2
 8003530:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800353a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003546:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003552:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	4313      	orrs	r3, r2
 800355e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689a      	ldr	r2, [r3, #8]
 800356c:	2380      	movs	r3, #128	; 0x80
 800356e:	01db      	lsls	r3, r3, #7
 8003570:	429a      	cmp	r2, r3
 8003572:	d018      	beq.n	80035a6 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003574:	4b17      	ldr	r3, [pc, #92]	; (80035d4 <HAL_DMA_Init+0xec>)
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357c:	211c      	movs	r1, #28
 800357e:	400b      	ands	r3, r1
 8003580:	210f      	movs	r1, #15
 8003582:	4099      	lsls	r1, r3
 8003584:	000b      	movs	r3, r1
 8003586:	43d9      	mvns	r1, r3
 8003588:	4b12      	ldr	r3, [pc, #72]	; (80035d4 <HAL_DMA_Init+0xec>)
 800358a:	400a      	ands	r2, r1
 800358c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800358e:	4b11      	ldr	r3, [pc, #68]	; (80035d4 <HAL_DMA_Init+0xec>)
 8003590:	6819      	ldr	r1, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685a      	ldr	r2, [r3, #4]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359a:	201c      	movs	r0, #28
 800359c:	4003      	ands	r3, r0
 800359e:	409a      	lsls	r2, r3
 80035a0:	4b0c      	ldr	r3, [pc, #48]	; (80035d4 <HAL_DMA_Init+0xec>)
 80035a2:	430a      	orrs	r2, r1
 80035a4:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2225      	movs	r2, #37	; 0x25
 80035b0:	2101      	movs	r1, #1
 80035b2:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2224      	movs	r2, #36	; 0x24
 80035b8:	2100      	movs	r1, #0
 80035ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	0018      	movs	r0, r3
 80035c0:	46bd      	mov	sp, r7
 80035c2:	b004      	add	sp, #16
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	46c0      	nop			; (mov r8, r8)
 80035c8:	bffdfff8 	.word	0xbffdfff8
 80035cc:	40020000 	.word	0x40020000
 80035d0:	ffff800f 	.word	0xffff800f
 80035d4:	400200a8 	.word	0x400200a8

080035d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
 80035e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035e6:	2317      	movs	r3, #23
 80035e8:	18fb      	adds	r3, r7, r3
 80035ea:	2200      	movs	r2, #0
 80035ec:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2224      	movs	r2, #36	; 0x24
 80035f2:	5c9b      	ldrb	r3, [r3, r2]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d101      	bne.n	80035fc <HAL_DMA_Start_IT+0x24>
 80035f8:	2302      	movs	r3, #2
 80035fa:	e04f      	b.n	800369c <HAL_DMA_Start_IT+0xc4>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2224      	movs	r2, #36	; 0x24
 8003600:	2101      	movs	r1, #1
 8003602:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2225      	movs	r2, #37	; 0x25
 8003608:	5c9b      	ldrb	r3, [r3, r2]
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b01      	cmp	r3, #1
 800360e:	d13a      	bne.n	8003686 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2225      	movs	r2, #37	; 0x25
 8003614:	2102      	movs	r1, #2
 8003616:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2101      	movs	r1, #1
 800362a:	438a      	bics	r2, r1
 800362c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	68b9      	ldr	r1, [r7, #8]
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f000 f8e3 	bl	8003800 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363e:	2b00      	cmp	r3, #0
 8003640:	d008      	beq.n	8003654 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	210e      	movs	r1, #14
 800364e:	430a      	orrs	r2, r1
 8003650:	601a      	str	r2, [r3, #0]
 8003652:	e00f      	b.n	8003674 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2104      	movs	r1, #4
 8003660:	438a      	bics	r2, r1
 8003662:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	210a      	movs	r1, #10
 8003670:	430a      	orrs	r2, r1
 8003672:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2101      	movs	r1, #1
 8003680:	430a      	orrs	r2, r1
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	e007      	b.n	8003696 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2224      	movs	r2, #36	; 0x24
 800368a:	2100      	movs	r1, #0
 800368c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800368e:	2317      	movs	r3, #23
 8003690:	18fb      	adds	r3, r7, r3
 8003692:	2202      	movs	r2, #2
 8003694:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8003696:	2317      	movs	r3, #23
 8003698:	18fb      	adds	r3, r7, r3
 800369a:	781b      	ldrb	r3, [r3, #0]
}
 800369c:	0018      	movs	r0, r3
 800369e:	46bd      	mov	sp, r7
 80036a0:	b006      	add	sp, #24
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c0:	221c      	movs	r2, #28
 80036c2:	4013      	ands	r3, r2
 80036c4:	2204      	movs	r2, #4
 80036c6:	409a      	lsls	r2, r3
 80036c8:	0013      	movs	r3, r2
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	4013      	ands	r3, r2
 80036ce:	d026      	beq.n	800371e <HAL_DMA_IRQHandler+0x7a>
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	2204      	movs	r2, #4
 80036d4:	4013      	ands	r3, r2
 80036d6:	d022      	beq.n	800371e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2220      	movs	r2, #32
 80036e0:	4013      	ands	r3, r2
 80036e2:	d107      	bne.n	80036f4 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2104      	movs	r1, #4
 80036f0:	438a      	bics	r2, r1
 80036f2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f8:	221c      	movs	r2, #28
 80036fa:	401a      	ands	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003700:	2104      	movs	r1, #4
 8003702:	4091      	lsls	r1, r2
 8003704:	000a      	movs	r2, r1
 8003706:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370c:	2b00      	cmp	r3, #0
 800370e:	d100      	bne.n	8003712 <HAL_DMA_IRQHandler+0x6e>
 8003710:	e071      	b.n	80037f6 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	0010      	movs	r0, r2
 800371a:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800371c:	e06b      	b.n	80037f6 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003722:	221c      	movs	r2, #28
 8003724:	4013      	ands	r3, r2
 8003726:	2202      	movs	r2, #2
 8003728:	409a      	lsls	r2, r3
 800372a:	0013      	movs	r3, r2
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	4013      	ands	r3, r2
 8003730:	d02d      	beq.n	800378e <HAL_DMA_IRQHandler+0xea>
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	2202      	movs	r2, #2
 8003736:	4013      	ands	r3, r2
 8003738:	d029      	beq.n	800378e <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2220      	movs	r2, #32
 8003742:	4013      	ands	r3, r2
 8003744:	d10b      	bne.n	800375e <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	210a      	movs	r1, #10
 8003752:	438a      	bics	r2, r1
 8003754:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2225      	movs	r2, #37	; 0x25
 800375a:	2101      	movs	r1, #1
 800375c:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003762:	221c      	movs	r2, #28
 8003764:	401a      	ands	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376a:	2102      	movs	r1, #2
 800376c:	4091      	lsls	r1, r2
 800376e:	000a      	movs	r2, r1
 8003770:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2224      	movs	r2, #36	; 0x24
 8003776:	2100      	movs	r1, #0
 8003778:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377e:	2b00      	cmp	r3, #0
 8003780:	d039      	beq.n	80037f6 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	0010      	movs	r0, r2
 800378a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800378c:	e033      	b.n	80037f6 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003792:	221c      	movs	r2, #28
 8003794:	4013      	ands	r3, r2
 8003796:	2208      	movs	r2, #8
 8003798:	409a      	lsls	r2, r3
 800379a:	0013      	movs	r3, r2
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	4013      	ands	r3, r2
 80037a0:	d02a      	beq.n	80037f8 <HAL_DMA_IRQHandler+0x154>
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	2208      	movs	r2, #8
 80037a6:	4013      	ands	r3, r2
 80037a8:	d026      	beq.n	80037f8 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	210e      	movs	r1, #14
 80037b6:	438a      	bics	r2, r1
 80037b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037be:	221c      	movs	r2, #28
 80037c0:	401a      	ands	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	2101      	movs	r1, #1
 80037c8:	4091      	lsls	r1, r2
 80037ca:	000a      	movs	r2, r1
 80037cc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2201      	movs	r2, #1
 80037d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2225      	movs	r2, #37	; 0x25
 80037d8:	2101      	movs	r1, #1
 80037da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2224      	movs	r2, #36	; 0x24
 80037e0:	2100      	movs	r1, #0
 80037e2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d005      	beq.n	80037f8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	0010      	movs	r0, r2
 80037f4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80037f6:	46c0      	nop			; (mov r8, r8)
 80037f8:	46c0      	nop			; (mov r8, r8)
}
 80037fa:	46bd      	mov	sp, r7
 80037fc:	b004      	add	sp, #16
 80037fe:	bd80      	pop	{r7, pc}

08003800 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
 800380c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003812:	221c      	movs	r2, #28
 8003814:	401a      	ands	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	2101      	movs	r1, #1
 800381c:	4091      	lsls	r1, r2
 800381e:	000a      	movs	r2, r1
 8003820:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	2b10      	cmp	r3, #16
 8003830:	d108      	bne.n	8003844 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003842:	e007      	b.n	8003854 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	60da      	str	r2, [r3, #12]
}
 8003854:	46c0      	nop			; (mov r8, r8)
 8003856:	46bd      	mov	sp, r7
 8003858:	b004      	add	sp, #16
 800385a:	bd80      	pop	{r7, pc}

0800385c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003866:	2300      	movs	r3, #0
 8003868:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800386a:	2300      	movs	r3, #0
 800386c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800386e:	2300      	movs	r3, #0
 8003870:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003872:	e149      	b.n	8003b08 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2101      	movs	r1, #1
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	4091      	lsls	r1, r2
 800387e:	000a      	movs	r2, r1
 8003880:	4013      	ands	r3, r2
 8003882:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d100      	bne.n	800388c <HAL_GPIO_Init+0x30>
 800388a:	e13a      	b.n	8003b02 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	2203      	movs	r2, #3
 8003892:	4013      	ands	r3, r2
 8003894:	2b01      	cmp	r3, #1
 8003896:	d005      	beq.n	80038a4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	2203      	movs	r2, #3
 800389e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d130      	bne.n	8003906 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	2203      	movs	r2, #3
 80038b0:	409a      	lsls	r2, r3
 80038b2:	0013      	movs	r3, r2
 80038b4:	43da      	mvns	r2, r3
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	4013      	ands	r3, r2
 80038ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	68da      	ldr	r2, [r3, #12]
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	409a      	lsls	r2, r3
 80038c6:	0013      	movs	r3, r2
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038da:	2201      	movs	r2, #1
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	409a      	lsls	r2, r3
 80038e0:	0013      	movs	r3, r2
 80038e2:	43da      	mvns	r2, r3
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	4013      	ands	r3, r2
 80038e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	091b      	lsrs	r3, r3, #4
 80038f0:	2201      	movs	r2, #1
 80038f2:	401a      	ands	r2, r3
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	409a      	lsls	r2, r3
 80038f8:	0013      	movs	r3, r2
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2203      	movs	r2, #3
 800390c:	4013      	ands	r3, r2
 800390e:	2b03      	cmp	r3, #3
 8003910:	d017      	beq.n	8003942 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	2203      	movs	r2, #3
 800391e:	409a      	lsls	r2, r3
 8003920:	0013      	movs	r3, r2
 8003922:	43da      	mvns	r2, r3
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	4013      	ands	r3, r2
 8003928:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	689a      	ldr	r2, [r3, #8]
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	409a      	lsls	r2, r3
 8003934:	0013      	movs	r3, r2
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	4313      	orrs	r3, r2
 800393a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	2203      	movs	r2, #3
 8003948:	4013      	ands	r3, r2
 800394a:	2b02      	cmp	r3, #2
 800394c:	d123      	bne.n	8003996 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	08da      	lsrs	r2, r3, #3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	3208      	adds	r2, #8
 8003956:	0092      	lsls	r2, r2, #2
 8003958:	58d3      	ldr	r3, [r2, r3]
 800395a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	2207      	movs	r2, #7
 8003960:	4013      	ands	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	220f      	movs	r2, #15
 8003966:	409a      	lsls	r2, r3
 8003968:	0013      	movs	r3, r2
 800396a:	43da      	mvns	r2, r3
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	4013      	ands	r3, r2
 8003970:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	691a      	ldr	r2, [r3, #16]
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	2107      	movs	r1, #7
 800397a:	400b      	ands	r3, r1
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	409a      	lsls	r2, r3
 8003980:	0013      	movs	r3, r2
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	4313      	orrs	r3, r2
 8003986:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	08da      	lsrs	r2, r3, #3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	3208      	adds	r2, #8
 8003990:	0092      	lsls	r2, r2, #2
 8003992:	6939      	ldr	r1, [r7, #16]
 8003994:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	2203      	movs	r2, #3
 80039a2:	409a      	lsls	r2, r3
 80039a4:	0013      	movs	r3, r2
 80039a6:	43da      	mvns	r2, r3
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	4013      	ands	r3, r2
 80039ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	2203      	movs	r2, #3
 80039b4:	401a      	ands	r2, r3
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	409a      	lsls	r2, r3
 80039bc:	0013      	movs	r3, r2
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685a      	ldr	r2, [r3, #4]
 80039ce:	23c0      	movs	r3, #192	; 0xc0
 80039d0:	029b      	lsls	r3, r3, #10
 80039d2:	4013      	ands	r3, r2
 80039d4:	d100      	bne.n	80039d8 <HAL_GPIO_Init+0x17c>
 80039d6:	e094      	b.n	8003b02 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039d8:	4b51      	ldr	r3, [pc, #324]	; (8003b20 <HAL_GPIO_Init+0x2c4>)
 80039da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039dc:	4b50      	ldr	r3, [pc, #320]	; (8003b20 <HAL_GPIO_Init+0x2c4>)
 80039de:	2101      	movs	r1, #1
 80039e0:	430a      	orrs	r2, r1
 80039e2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80039e4:	4a4f      	ldr	r2, [pc, #316]	; (8003b24 <HAL_GPIO_Init+0x2c8>)
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	089b      	lsrs	r3, r3, #2
 80039ea:	3302      	adds	r3, #2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	589b      	ldr	r3, [r3, r2]
 80039f0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	2203      	movs	r2, #3
 80039f6:	4013      	ands	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	220f      	movs	r2, #15
 80039fc:	409a      	lsls	r2, r3
 80039fe:	0013      	movs	r3, r2
 8003a00:	43da      	mvns	r2, r3
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	4013      	ands	r3, r2
 8003a06:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	23a0      	movs	r3, #160	; 0xa0
 8003a0c:	05db      	lsls	r3, r3, #23
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d013      	beq.n	8003a3a <HAL_GPIO_Init+0x1de>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a44      	ldr	r2, [pc, #272]	; (8003b28 <HAL_GPIO_Init+0x2cc>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d00d      	beq.n	8003a36 <HAL_GPIO_Init+0x1da>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a43      	ldr	r2, [pc, #268]	; (8003b2c <HAL_GPIO_Init+0x2d0>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d007      	beq.n	8003a32 <HAL_GPIO_Init+0x1d6>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a42      	ldr	r2, [pc, #264]	; (8003b30 <HAL_GPIO_Init+0x2d4>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d101      	bne.n	8003a2e <HAL_GPIO_Init+0x1d2>
 8003a2a:	2305      	movs	r3, #5
 8003a2c:	e006      	b.n	8003a3c <HAL_GPIO_Init+0x1e0>
 8003a2e:	2306      	movs	r3, #6
 8003a30:	e004      	b.n	8003a3c <HAL_GPIO_Init+0x1e0>
 8003a32:	2302      	movs	r3, #2
 8003a34:	e002      	b.n	8003a3c <HAL_GPIO_Init+0x1e0>
 8003a36:	2301      	movs	r3, #1
 8003a38:	e000      	b.n	8003a3c <HAL_GPIO_Init+0x1e0>
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	2103      	movs	r1, #3
 8003a40:	400a      	ands	r2, r1
 8003a42:	0092      	lsls	r2, r2, #2
 8003a44:	4093      	lsls	r3, r2
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a4c:	4935      	ldr	r1, [pc, #212]	; (8003b24 <HAL_GPIO_Init+0x2c8>)
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	089b      	lsrs	r3, r3, #2
 8003a52:	3302      	adds	r3, #2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a5a:	4b36      	ldr	r3, [pc, #216]	; (8003b34 <HAL_GPIO_Init+0x2d8>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	43da      	mvns	r2, r3
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	4013      	ands	r3, r2
 8003a68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	685a      	ldr	r2, [r3, #4]
 8003a6e:	2380      	movs	r3, #128	; 0x80
 8003a70:	025b      	lsls	r3, r3, #9
 8003a72:	4013      	ands	r3, r2
 8003a74:	d003      	beq.n	8003a7e <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003a7e:	4b2d      	ldr	r3, [pc, #180]	; (8003b34 <HAL_GPIO_Init+0x2d8>)
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003a84:	4b2b      	ldr	r3, [pc, #172]	; (8003b34 <HAL_GPIO_Init+0x2d8>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	43da      	mvns	r2, r3
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	4013      	ands	r3, r2
 8003a92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685a      	ldr	r2, [r3, #4]
 8003a98:	2380      	movs	r3, #128	; 0x80
 8003a9a:	029b      	lsls	r3, r3, #10
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	d003      	beq.n	8003aa8 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003aa8:	4b22      	ldr	r3, [pc, #136]	; (8003b34 <HAL_GPIO_Init+0x2d8>)
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003aae:	4b21      	ldr	r3, [pc, #132]	; (8003b34 <HAL_GPIO_Init+0x2d8>)
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	43da      	mvns	r2, r3
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	4013      	ands	r3, r2
 8003abc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	2380      	movs	r3, #128	; 0x80
 8003ac4:	035b      	lsls	r3, r3, #13
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	d003      	beq.n	8003ad2 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003ad2:	4b18      	ldr	r3, [pc, #96]	; (8003b34 <HAL_GPIO_Init+0x2d8>)
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003ad8:	4b16      	ldr	r3, [pc, #88]	; (8003b34 <HAL_GPIO_Init+0x2d8>)
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	43da      	mvns	r2, r3
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685a      	ldr	r2, [r3, #4]
 8003aec:	2380      	movs	r3, #128	; 0x80
 8003aee:	039b      	lsls	r3, r3, #14
 8003af0:	4013      	ands	r3, r2
 8003af2:	d003      	beq.n	8003afc <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003afc:	4b0d      	ldr	r3, [pc, #52]	; (8003b34 <HAL_GPIO_Init+0x2d8>)
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	3301      	adds	r3, #1
 8003b06:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	40da      	lsrs	r2, r3
 8003b10:	1e13      	subs	r3, r2, #0
 8003b12:	d000      	beq.n	8003b16 <HAL_GPIO_Init+0x2ba>
 8003b14:	e6ae      	b.n	8003874 <HAL_GPIO_Init+0x18>
  }
}
 8003b16:	46c0      	nop			; (mov r8, r8)
 8003b18:	46c0      	nop			; (mov r8, r8)
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	b006      	add	sp, #24
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40021000 	.word	0x40021000
 8003b24:	40010000 	.word	0x40010000
 8003b28:	50000400 	.word	0x50000400
 8003b2c:	50000800 	.word	0x50000800
 8003b30:	50001c00 	.word	0x50001c00
 8003b34:	40010400 	.word	0x40010400

08003b38 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	000a      	movs	r2, r1
 8003b42:	1cbb      	adds	r3, r7, #2
 8003b44:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	1cba      	adds	r2, r7, #2
 8003b4c:	8812      	ldrh	r2, [r2, #0]
 8003b4e:	4013      	ands	r3, r2
 8003b50:	d004      	beq.n	8003b5c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003b52:	230f      	movs	r3, #15
 8003b54:	18fb      	adds	r3, r7, r3
 8003b56:	2201      	movs	r2, #1
 8003b58:	701a      	strb	r2, [r3, #0]
 8003b5a:	e003      	b.n	8003b64 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b5c:	230f      	movs	r3, #15
 8003b5e:	18fb      	adds	r3, r7, r3
 8003b60:	2200      	movs	r2, #0
 8003b62:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003b64:	230f      	movs	r3, #15
 8003b66:	18fb      	adds	r3, r7, r3
 8003b68:	781b      	ldrb	r3, [r3, #0]
}
 8003b6a:	0018      	movs	r0, r3
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	b004      	add	sp, #16
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b082      	sub	sp, #8
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
 8003b7a:	0008      	movs	r0, r1
 8003b7c:	0011      	movs	r1, r2
 8003b7e:	1cbb      	adds	r3, r7, #2
 8003b80:	1c02      	adds	r2, r0, #0
 8003b82:	801a      	strh	r2, [r3, #0]
 8003b84:	1c7b      	adds	r3, r7, #1
 8003b86:	1c0a      	adds	r2, r1, #0
 8003b88:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b8a:	1c7b      	adds	r3, r7, #1
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d004      	beq.n	8003b9c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b92:	1cbb      	adds	r3, r7, #2
 8003b94:	881a      	ldrh	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003b9a:	e003      	b.n	8003ba4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8003b9c:	1cbb      	adds	r3, r7, #2
 8003b9e:	881a      	ldrh	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ba4:	46c0      	nop			; (mov r8, r8)
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	b002      	add	sp, #8
 8003baa:	bd80      	pop	{r7, pc}

08003bac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	0002      	movs	r2, r0
 8003bb4:	1dbb      	adds	r3, r7, #6
 8003bb6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003bb8:	4b09      	ldr	r3, [pc, #36]	; (8003be0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	1dba      	adds	r2, r7, #6
 8003bbe:	8812      	ldrh	r2, [r2, #0]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	d008      	beq.n	8003bd6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003bc4:	4b06      	ldr	r3, [pc, #24]	; (8003be0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003bc6:	1dba      	adds	r2, r7, #6
 8003bc8:	8812      	ldrh	r2, [r2, #0]
 8003bca:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003bcc:	1dbb      	adds	r3, r7, #6
 8003bce:	881b      	ldrh	r3, [r3, #0]
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	f7fe fea1 	bl	8002918 <HAL_GPIO_EXTI_Callback>
  }
}
 8003bd6:	46c0      	nop			; (mov r8, r8)
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	b002      	add	sp, #8
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	46c0      	nop			; (mov r8, r8)
 8003be0:	40010400 	.word	0x40010400

08003be4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e082      	b.n	8003cfc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2241      	movs	r2, #65	; 0x41
 8003bfa:	5c9b      	ldrb	r3, [r3, r2]
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d107      	bne.n	8003c12 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2240      	movs	r2, #64	; 0x40
 8003c06:	2100      	movs	r1, #0
 8003c08:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	0018      	movs	r0, r3
 8003c0e:	f7fe fdf5 	bl	80027fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2241      	movs	r2, #65	; 0x41
 8003c16:	2124      	movs	r1, #36	; 0x24
 8003c18:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2101      	movs	r1, #1
 8003c26:	438a      	bics	r2, r1
 8003c28:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4934      	ldr	r1, [pc, #208]	; (8003d04 <HAL_I2C_Init+0x120>)
 8003c34:	400a      	ands	r2, r1
 8003c36:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	689a      	ldr	r2, [r3, #8]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4931      	ldr	r1, [pc, #196]	; (8003d08 <HAL_I2C_Init+0x124>)
 8003c44:	400a      	ands	r2, r1
 8003c46:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d108      	bne.n	8003c62 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689a      	ldr	r2, [r3, #8]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2180      	movs	r1, #128	; 0x80
 8003c5a:	0209      	lsls	r1, r1, #8
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	609a      	str	r2, [r3, #8]
 8003c60:	e007      	b.n	8003c72 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	689a      	ldr	r2, [r3, #8]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2184      	movs	r1, #132	; 0x84
 8003c6c:	0209      	lsls	r1, r1, #8
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d104      	bne.n	8003c84 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2280      	movs	r2, #128	; 0x80
 8003c80:	0112      	lsls	r2, r2, #4
 8003c82:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	491f      	ldr	r1, [pc, #124]	; (8003d0c <HAL_I2C_Init+0x128>)
 8003c90:	430a      	orrs	r2, r1
 8003c92:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68da      	ldr	r2, [r3, #12]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	491a      	ldr	r1, [pc, #104]	; (8003d08 <HAL_I2C_Init+0x124>)
 8003ca0:	400a      	ands	r2, r1
 8003ca2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	691a      	ldr	r2, [r3, #16]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	431a      	orrs	r2, r3
 8003cae:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	69d9      	ldr	r1, [r3, #28]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a1a      	ldr	r2, [r3, #32]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2101      	movs	r1, #1
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2241      	movs	r2, #65	; 0x41
 8003ce8:	2120      	movs	r1, #32
 8003cea:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2242      	movs	r2, #66	; 0x42
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	b002      	add	sp, #8
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	f0ffffff 	.word	0xf0ffffff
 8003d08:	ffff7fff 	.word	0xffff7fff
 8003d0c:	02008000 	.word	0x02008000

08003d10 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d10:	b590      	push	{r4, r7, lr}
 8003d12:	b089      	sub	sp, #36	; 0x24
 8003d14:	af02      	add	r7, sp, #8
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	000c      	movs	r4, r1
 8003d1a:	0010      	movs	r0, r2
 8003d1c:	0019      	movs	r1, r3
 8003d1e:	230a      	movs	r3, #10
 8003d20:	18fb      	adds	r3, r7, r3
 8003d22:	1c22      	adds	r2, r4, #0
 8003d24:	801a      	strh	r2, [r3, #0]
 8003d26:	2308      	movs	r3, #8
 8003d28:	18fb      	adds	r3, r7, r3
 8003d2a:	1c02      	adds	r2, r0, #0
 8003d2c:	801a      	strh	r2, [r3, #0]
 8003d2e:	1dbb      	adds	r3, r7, #6
 8003d30:	1c0a      	adds	r2, r1, #0
 8003d32:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2241      	movs	r2, #65	; 0x41
 8003d38:	5c9b      	ldrb	r3, [r3, r2]
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b20      	cmp	r3, #32
 8003d3e:	d000      	beq.n	8003d42 <HAL_I2C_Mem_Write+0x32>
 8003d40:	e10c      	b.n	8003f5c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d004      	beq.n	8003d52 <HAL_I2C_Mem_Write+0x42>
 8003d48:	232c      	movs	r3, #44	; 0x2c
 8003d4a:	18fb      	adds	r3, r7, r3
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d105      	bne.n	8003d5e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2280      	movs	r2, #128	; 0x80
 8003d56:	0092      	lsls	r2, r2, #2
 8003d58:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e0ff      	b.n	8003f5e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2240      	movs	r2, #64	; 0x40
 8003d62:	5c9b      	ldrb	r3, [r3, r2]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d101      	bne.n	8003d6c <HAL_I2C_Mem_Write+0x5c>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	e0f8      	b.n	8003f5e <HAL_I2C_Mem_Write+0x24e>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2240      	movs	r2, #64	; 0x40
 8003d70:	2101      	movs	r1, #1
 8003d72:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d74:	f7fe fef0 	bl	8002b58 <HAL_GetTick>
 8003d78:	0003      	movs	r3, r0
 8003d7a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d7c:	2380      	movs	r3, #128	; 0x80
 8003d7e:	0219      	lsls	r1, r3, #8
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	9300      	str	r3, [sp, #0]
 8003d86:	2319      	movs	r3, #25
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f000 fc25 	bl	80045d8 <I2C_WaitOnFlagUntilTimeout>
 8003d8e:	1e03      	subs	r3, r0, #0
 8003d90:	d001      	beq.n	8003d96 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e0e3      	b.n	8003f5e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2241      	movs	r2, #65	; 0x41
 8003d9a:	2121      	movs	r1, #33	; 0x21
 8003d9c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2242      	movs	r2, #66	; 0x42
 8003da2:	2140      	movs	r1, #64	; 0x40
 8003da4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003db0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	222c      	movs	r2, #44	; 0x2c
 8003db6:	18ba      	adds	r2, r7, r2
 8003db8:	8812      	ldrh	r2, [r2, #0]
 8003dba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003dc2:	1dbb      	adds	r3, r7, #6
 8003dc4:	881c      	ldrh	r4, [r3, #0]
 8003dc6:	2308      	movs	r3, #8
 8003dc8:	18fb      	adds	r3, r7, r3
 8003dca:	881a      	ldrh	r2, [r3, #0]
 8003dcc:	230a      	movs	r3, #10
 8003dce:	18fb      	adds	r3, r7, r3
 8003dd0:	8819      	ldrh	r1, [r3, #0]
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	9301      	str	r3, [sp, #4]
 8003dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dda:	9300      	str	r3, [sp, #0]
 8003ddc:	0023      	movs	r3, r4
 8003dde:	f000 fb13 	bl	8004408 <I2C_RequestMemoryWrite>
 8003de2:	1e03      	subs	r3, r0, #0
 8003de4:	d005      	beq.n	8003df2 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2240      	movs	r2, #64	; 0x40
 8003dea:	2100      	movs	r1, #0
 8003dec:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e0b5      	b.n	8003f5e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	2bff      	cmp	r3, #255	; 0xff
 8003dfa:	d911      	bls.n	8003e20 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	22ff      	movs	r2, #255	; 0xff
 8003e00:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e06:	b2da      	uxtb	r2, r3
 8003e08:	2380      	movs	r3, #128	; 0x80
 8003e0a:	045c      	lsls	r4, r3, #17
 8003e0c:	230a      	movs	r3, #10
 8003e0e:	18fb      	adds	r3, r7, r3
 8003e10:	8819      	ldrh	r1, [r3, #0]
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	2300      	movs	r3, #0
 8003e16:	9300      	str	r3, [sp, #0]
 8003e18:	0023      	movs	r3, r4
 8003e1a:	f000 fd11 	bl	8004840 <I2C_TransferConfig>
 8003e1e:	e012      	b.n	8003e46 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e2e:	b2da      	uxtb	r2, r3
 8003e30:	2380      	movs	r3, #128	; 0x80
 8003e32:	049c      	lsls	r4, r3, #18
 8003e34:	230a      	movs	r3, #10
 8003e36:	18fb      	adds	r3, r7, r3
 8003e38:	8819      	ldrh	r1, [r3, #0]
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	9300      	str	r3, [sp, #0]
 8003e40:	0023      	movs	r3, r4
 8003e42:	f000 fcfd 	bl	8004840 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	0018      	movs	r0, r3
 8003e4e:	f000 fc02 	bl	8004656 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e52:	1e03      	subs	r3, r0, #0
 8003e54:	d001      	beq.n	8003e5a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e081      	b.n	8003f5e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5e:	781a      	ldrb	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6a:	1c5a      	adds	r2, r3, #1
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	3b01      	subs	r3, #1
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e82:	3b01      	subs	r3, #1
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d03a      	beq.n	8003f0a <HAL_I2C_Mem_Write+0x1fa>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d136      	bne.n	8003f0a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	9300      	str	r3, [sp, #0]
 8003ea4:	0013      	movs	r3, r2
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	2180      	movs	r1, #128	; 0x80
 8003eaa:	f000 fb95 	bl	80045d8 <I2C_WaitOnFlagUntilTimeout>
 8003eae:	1e03      	subs	r3, r0, #0
 8003eb0:	d001      	beq.n	8003eb6 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e053      	b.n	8003f5e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	2bff      	cmp	r3, #255	; 0xff
 8003ebe:	d911      	bls.n	8003ee4 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	22ff      	movs	r2, #255	; 0xff
 8003ec4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eca:	b2da      	uxtb	r2, r3
 8003ecc:	2380      	movs	r3, #128	; 0x80
 8003ece:	045c      	lsls	r4, r3, #17
 8003ed0:	230a      	movs	r3, #10
 8003ed2:	18fb      	adds	r3, r7, r3
 8003ed4:	8819      	ldrh	r1, [r3, #0]
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	2300      	movs	r3, #0
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	0023      	movs	r3, r4
 8003ede:	f000 fcaf 	bl	8004840 <I2C_TransferConfig>
 8003ee2:	e012      	b.n	8003f0a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef2:	b2da      	uxtb	r2, r3
 8003ef4:	2380      	movs	r3, #128	; 0x80
 8003ef6:	049c      	lsls	r4, r3, #18
 8003ef8:	230a      	movs	r3, #10
 8003efa:	18fb      	adds	r3, r7, r3
 8003efc:	8819      	ldrh	r1, [r3, #0]
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	2300      	movs	r3, #0
 8003f02:	9300      	str	r3, [sp, #0]
 8003f04:	0023      	movs	r3, r4
 8003f06:	f000 fc9b 	bl	8004840 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d198      	bne.n	8003e46 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	f000 fbda 	bl	80046d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f20:	1e03      	subs	r3, r0, #0
 8003f22:	d001      	beq.n	8003f28 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e01a      	b.n	8003f5e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	685a      	ldr	r2, [r3, #4]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	490b      	ldr	r1, [pc, #44]	; (8003f68 <HAL_I2C_Mem_Write+0x258>)
 8003f3c:	400a      	ands	r2, r1
 8003f3e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2241      	movs	r2, #65	; 0x41
 8003f44:	2120      	movs	r1, #32
 8003f46:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2242      	movs	r2, #66	; 0x42
 8003f4c:	2100      	movs	r1, #0
 8003f4e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2240      	movs	r2, #64	; 0x40
 8003f54:	2100      	movs	r1, #0
 8003f56:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	e000      	b.n	8003f5e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003f5c:	2302      	movs	r3, #2
  }
}
 8003f5e:	0018      	movs	r0, r3
 8003f60:	46bd      	mov	sp, r7
 8003f62:	b007      	add	sp, #28
 8003f64:	bd90      	pop	{r4, r7, pc}
 8003f66:	46c0      	nop			; (mov r8, r8)
 8003f68:	fe00e800 	.word	0xfe00e800

08003f6c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f6c:	b590      	push	{r4, r7, lr}
 8003f6e:	b089      	sub	sp, #36	; 0x24
 8003f70:	af02      	add	r7, sp, #8
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	000c      	movs	r4, r1
 8003f76:	0010      	movs	r0, r2
 8003f78:	0019      	movs	r1, r3
 8003f7a:	230a      	movs	r3, #10
 8003f7c:	18fb      	adds	r3, r7, r3
 8003f7e:	1c22      	adds	r2, r4, #0
 8003f80:	801a      	strh	r2, [r3, #0]
 8003f82:	2308      	movs	r3, #8
 8003f84:	18fb      	adds	r3, r7, r3
 8003f86:	1c02      	adds	r2, r0, #0
 8003f88:	801a      	strh	r2, [r3, #0]
 8003f8a:	1dbb      	adds	r3, r7, #6
 8003f8c:	1c0a      	adds	r2, r1, #0
 8003f8e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2241      	movs	r2, #65	; 0x41
 8003f94:	5c9b      	ldrb	r3, [r3, r2]
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2b20      	cmp	r3, #32
 8003f9a:	d000      	beq.n	8003f9e <HAL_I2C_Mem_Read+0x32>
 8003f9c:	e110      	b.n	80041c0 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d004      	beq.n	8003fae <HAL_I2C_Mem_Read+0x42>
 8003fa4:	232c      	movs	r3, #44	; 0x2c
 8003fa6:	18fb      	adds	r3, r7, r3
 8003fa8:	881b      	ldrh	r3, [r3, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d105      	bne.n	8003fba <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2280      	movs	r2, #128	; 0x80
 8003fb2:	0092      	lsls	r2, r2, #2
 8003fb4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e103      	b.n	80041c2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2240      	movs	r2, #64	; 0x40
 8003fbe:	5c9b      	ldrb	r3, [r3, r2]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d101      	bne.n	8003fc8 <HAL_I2C_Mem_Read+0x5c>
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	e0fc      	b.n	80041c2 <HAL_I2C_Mem_Read+0x256>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2240      	movs	r2, #64	; 0x40
 8003fcc:	2101      	movs	r1, #1
 8003fce:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003fd0:	f7fe fdc2 	bl	8002b58 <HAL_GetTick>
 8003fd4:	0003      	movs	r3, r0
 8003fd6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003fd8:	2380      	movs	r3, #128	; 0x80
 8003fda:	0219      	lsls	r1, r3, #8
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	2319      	movs	r3, #25
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f000 faf7 	bl	80045d8 <I2C_WaitOnFlagUntilTimeout>
 8003fea:	1e03      	subs	r3, r0, #0
 8003fec:	d001      	beq.n	8003ff2 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e0e7      	b.n	80041c2 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2241      	movs	r2, #65	; 0x41
 8003ff6:	2122      	movs	r1, #34	; 0x22
 8003ff8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2242      	movs	r2, #66	; 0x42
 8003ffe:	2140      	movs	r1, #64	; 0x40
 8004000:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800400c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	222c      	movs	r2, #44	; 0x2c
 8004012:	18ba      	adds	r2, r7, r2
 8004014:	8812      	ldrh	r2, [r2, #0]
 8004016:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800401e:	1dbb      	adds	r3, r7, #6
 8004020:	881c      	ldrh	r4, [r3, #0]
 8004022:	2308      	movs	r3, #8
 8004024:	18fb      	adds	r3, r7, r3
 8004026:	881a      	ldrh	r2, [r3, #0]
 8004028:	230a      	movs	r3, #10
 800402a:	18fb      	adds	r3, r7, r3
 800402c:	8819      	ldrh	r1, [r3, #0]
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	9301      	str	r3, [sp, #4]
 8004034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004036:	9300      	str	r3, [sp, #0]
 8004038:	0023      	movs	r3, r4
 800403a:	f000 fa49 	bl	80044d0 <I2C_RequestMemoryRead>
 800403e:	1e03      	subs	r3, r0, #0
 8004040:	d005      	beq.n	800404e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2240      	movs	r2, #64	; 0x40
 8004046:	2100      	movs	r1, #0
 8004048:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e0b9      	b.n	80041c2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004052:	b29b      	uxth	r3, r3
 8004054:	2bff      	cmp	r3, #255	; 0xff
 8004056:	d911      	bls.n	800407c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	22ff      	movs	r2, #255	; 0xff
 800405c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004062:	b2da      	uxtb	r2, r3
 8004064:	2380      	movs	r3, #128	; 0x80
 8004066:	045c      	lsls	r4, r3, #17
 8004068:	230a      	movs	r3, #10
 800406a:	18fb      	adds	r3, r7, r3
 800406c:	8819      	ldrh	r1, [r3, #0]
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	4b56      	ldr	r3, [pc, #344]	; (80041cc <HAL_I2C_Mem_Read+0x260>)
 8004072:	9300      	str	r3, [sp, #0]
 8004074:	0023      	movs	r3, r4
 8004076:	f000 fbe3 	bl	8004840 <I2C_TransferConfig>
 800407a:	e012      	b.n	80040a2 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004080:	b29a      	uxth	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800408a:	b2da      	uxtb	r2, r3
 800408c:	2380      	movs	r3, #128	; 0x80
 800408e:	049c      	lsls	r4, r3, #18
 8004090:	230a      	movs	r3, #10
 8004092:	18fb      	adds	r3, r7, r3
 8004094:	8819      	ldrh	r1, [r3, #0]
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	4b4c      	ldr	r3, [pc, #304]	; (80041cc <HAL_I2C_Mem_Read+0x260>)
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	0023      	movs	r3, r4
 800409e:	f000 fbcf 	bl	8004840 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80040a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	9300      	str	r3, [sp, #0]
 80040aa:	0013      	movs	r3, r2
 80040ac:	2200      	movs	r2, #0
 80040ae:	2104      	movs	r1, #4
 80040b0:	f000 fa92 	bl	80045d8 <I2C_WaitOnFlagUntilTimeout>
 80040b4:	1e03      	subs	r3, r0, #0
 80040b6:	d001      	beq.n	80040bc <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e082      	b.n	80041c2 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c6:	b2d2      	uxtb	r2, r2
 80040c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ce:	1c5a      	adds	r2, r3, #1
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d8:	3b01      	subs	r3, #1
 80040da:	b29a      	uxth	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	3b01      	subs	r3, #1
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d03a      	beq.n	800416e <HAL_I2C_Mem_Read+0x202>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d136      	bne.n	800416e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004100:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	9300      	str	r3, [sp, #0]
 8004108:	0013      	movs	r3, r2
 800410a:	2200      	movs	r2, #0
 800410c:	2180      	movs	r1, #128	; 0x80
 800410e:	f000 fa63 	bl	80045d8 <I2C_WaitOnFlagUntilTimeout>
 8004112:	1e03      	subs	r3, r0, #0
 8004114:	d001      	beq.n	800411a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e053      	b.n	80041c2 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800411e:	b29b      	uxth	r3, r3
 8004120:	2bff      	cmp	r3, #255	; 0xff
 8004122:	d911      	bls.n	8004148 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	22ff      	movs	r2, #255	; 0xff
 8004128:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800412e:	b2da      	uxtb	r2, r3
 8004130:	2380      	movs	r3, #128	; 0x80
 8004132:	045c      	lsls	r4, r3, #17
 8004134:	230a      	movs	r3, #10
 8004136:	18fb      	adds	r3, r7, r3
 8004138:	8819      	ldrh	r1, [r3, #0]
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	2300      	movs	r3, #0
 800413e:	9300      	str	r3, [sp, #0]
 8004140:	0023      	movs	r3, r4
 8004142:	f000 fb7d 	bl	8004840 <I2C_TransferConfig>
 8004146:	e012      	b.n	800416e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800414c:	b29a      	uxth	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004156:	b2da      	uxtb	r2, r3
 8004158:	2380      	movs	r3, #128	; 0x80
 800415a:	049c      	lsls	r4, r3, #18
 800415c:	230a      	movs	r3, #10
 800415e:	18fb      	adds	r3, r7, r3
 8004160:	8819      	ldrh	r1, [r3, #0]
 8004162:	68f8      	ldr	r0, [r7, #12]
 8004164:	2300      	movs	r3, #0
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	0023      	movs	r3, r4
 800416a:	f000 fb69 	bl	8004840 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004172:	b29b      	uxth	r3, r3
 8004174:	2b00      	cmp	r3, #0
 8004176:	d194      	bne.n	80040a2 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004178:	697a      	ldr	r2, [r7, #20]
 800417a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	0018      	movs	r0, r3
 8004180:	f000 faa8 	bl	80046d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004184:	1e03      	subs	r3, r0, #0
 8004186:	d001      	beq.n	800418c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e01a      	b.n	80041c2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2220      	movs	r2, #32
 8004192:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	490c      	ldr	r1, [pc, #48]	; (80041d0 <HAL_I2C_Mem_Read+0x264>)
 80041a0:	400a      	ands	r2, r1
 80041a2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2241      	movs	r2, #65	; 0x41
 80041a8:	2120      	movs	r1, #32
 80041aa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2242      	movs	r2, #66	; 0x42
 80041b0:	2100      	movs	r1, #0
 80041b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2240      	movs	r2, #64	; 0x40
 80041b8:	2100      	movs	r1, #0
 80041ba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80041bc:	2300      	movs	r3, #0
 80041be:	e000      	b.n	80041c2 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80041c0:	2302      	movs	r3, #2
  }
}
 80041c2:	0018      	movs	r0, r3
 80041c4:	46bd      	mov	sp, r7
 80041c6:	b007      	add	sp, #28
 80041c8:	bd90      	pop	{r4, r7, pc}
 80041ca:	46c0      	nop			; (mov r8, r8)
 80041cc:	80002400 	.word	0x80002400
 80041d0:	fe00e800 	.word	0xfe00e800

080041d4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b08a      	sub	sp, #40	; 0x28
 80041d8:	af02      	add	r7, sp, #8
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	607a      	str	r2, [r7, #4]
 80041de:	603b      	str	r3, [r7, #0]
 80041e0:	230a      	movs	r3, #10
 80041e2:	18fb      	adds	r3, r7, r3
 80041e4:	1c0a      	adds	r2, r1, #0
 80041e6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80041e8:	2300      	movs	r3, #0
 80041ea:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2241      	movs	r2, #65	; 0x41
 80041f0:	5c9b      	ldrb	r3, [r3, r2]
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	2b20      	cmp	r3, #32
 80041f6:	d000      	beq.n	80041fa <HAL_I2C_IsDeviceReady+0x26>
 80041f8:	e0fe      	b.n	80043f8 <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	699a      	ldr	r2, [r3, #24]
 8004200:	2380      	movs	r3, #128	; 0x80
 8004202:	021b      	lsls	r3, r3, #8
 8004204:	401a      	ands	r2, r3
 8004206:	2380      	movs	r3, #128	; 0x80
 8004208:	021b      	lsls	r3, r3, #8
 800420a:	429a      	cmp	r2, r3
 800420c:	d101      	bne.n	8004212 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 800420e:	2302      	movs	r3, #2
 8004210:	e0f3      	b.n	80043fa <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2240      	movs	r2, #64	; 0x40
 8004216:	5c9b      	ldrb	r3, [r3, r2]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d101      	bne.n	8004220 <HAL_I2C_IsDeviceReady+0x4c>
 800421c:	2302      	movs	r3, #2
 800421e:	e0ec      	b.n	80043fa <HAL_I2C_IsDeviceReady+0x226>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2240      	movs	r2, #64	; 0x40
 8004224:	2101      	movs	r1, #1
 8004226:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2241      	movs	r2, #65	; 0x41
 800422c:	2124      	movs	r1, #36	; 0x24
 800422e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d107      	bne.n	800424e <HAL_I2C_IsDeviceReady+0x7a>
 800423e:	230a      	movs	r3, #10
 8004240:	18fb      	adds	r3, r7, r3
 8004242:	881b      	ldrh	r3, [r3, #0]
 8004244:	059b      	lsls	r3, r3, #22
 8004246:	0d9b      	lsrs	r3, r3, #22
 8004248:	4a6e      	ldr	r2, [pc, #440]	; (8004404 <HAL_I2C_IsDeviceReady+0x230>)
 800424a:	431a      	orrs	r2, r3
 800424c:	e007      	b.n	800425e <HAL_I2C_IsDeviceReady+0x8a>
 800424e:	230a      	movs	r3, #10
 8004250:	18fb      	adds	r3, r7, r3
 8004252:	881b      	ldrh	r3, [r3, #0]
 8004254:	059b      	lsls	r3, r3, #22
 8004256:	0d9b      	lsrs	r3, r3, #22
 8004258:	22a0      	movs	r2, #160	; 0xa0
 800425a:	0192      	lsls	r2, r2, #6
 800425c:	431a      	orrs	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004264:	f7fe fc78 	bl	8002b58 <HAL_GetTick>
 8004268:	0003      	movs	r3, r0
 800426a:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	2220      	movs	r2, #32
 8004274:	4013      	ands	r3, r2
 8004276:	3b20      	subs	r3, #32
 8004278:	425a      	negs	r2, r3
 800427a:	4153      	adcs	r3, r2
 800427c:	b2da      	uxtb	r2, r3
 800427e:	231f      	movs	r3, #31
 8004280:	18fb      	adds	r3, r7, r3
 8004282:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	2210      	movs	r2, #16
 800428c:	4013      	ands	r3, r2
 800428e:	3b10      	subs	r3, #16
 8004290:	425a      	negs	r2, r3
 8004292:	4153      	adcs	r3, r2
 8004294:	b2da      	uxtb	r2, r3
 8004296:	231e      	movs	r3, #30
 8004298:	18fb      	adds	r3, r7, r3
 800429a:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800429c:	e035      	b.n	800430a <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	3301      	adds	r3, #1
 80042a2:	d01a      	beq.n	80042da <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80042a4:	f7fe fc58 	bl	8002b58 <HAL_GetTick>
 80042a8:	0002      	movs	r2, r0
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	683a      	ldr	r2, [r7, #0]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d302      	bcc.n	80042ba <HAL_I2C_IsDeviceReady+0xe6>
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10f      	bne.n	80042da <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2241      	movs	r2, #65	; 0x41
 80042be:	2120      	movs	r1, #32
 80042c0:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c6:	2220      	movs	r2, #32
 80042c8:	431a      	orrs	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2240      	movs	r2, #64	; 0x40
 80042d2:	2100      	movs	r1, #0
 80042d4:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e08f      	b.n	80043fa <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	2220      	movs	r2, #32
 80042e2:	4013      	ands	r3, r2
 80042e4:	3b20      	subs	r3, #32
 80042e6:	425a      	negs	r2, r3
 80042e8:	4153      	adcs	r3, r2
 80042ea:	b2da      	uxtb	r2, r3
 80042ec:	231f      	movs	r3, #31
 80042ee:	18fb      	adds	r3, r7, r3
 80042f0:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	2210      	movs	r2, #16
 80042fa:	4013      	ands	r3, r2
 80042fc:	3b10      	subs	r3, #16
 80042fe:	425a      	negs	r2, r3
 8004300:	4153      	adcs	r3, r2
 8004302:	b2da      	uxtb	r2, r3
 8004304:	231e      	movs	r3, #30
 8004306:	18fb      	adds	r3, r7, r3
 8004308:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800430a:	231f      	movs	r3, #31
 800430c:	18fb      	adds	r3, r7, r3
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d104      	bne.n	800431e <HAL_I2C_IsDeviceReady+0x14a>
 8004314:	231e      	movs	r3, #30
 8004316:	18fb      	adds	r3, r7, r3
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d0bf      	beq.n	800429e <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	2210      	movs	r2, #16
 8004326:	4013      	ands	r3, r2
 8004328:	2b10      	cmp	r3, #16
 800432a:	d01a      	beq.n	8004362 <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800432c:	683a      	ldr	r2, [r7, #0]
 800432e:	68f8      	ldr	r0, [r7, #12]
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	9300      	str	r3, [sp, #0]
 8004334:	0013      	movs	r3, r2
 8004336:	2200      	movs	r2, #0
 8004338:	2120      	movs	r1, #32
 800433a:	f000 f94d 	bl	80045d8 <I2C_WaitOnFlagUntilTimeout>
 800433e:	1e03      	subs	r3, r0, #0
 8004340:	d001      	beq.n	8004346 <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e059      	b.n	80043fa <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2220      	movs	r2, #32
 800434c:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2241      	movs	r2, #65	; 0x41
 8004352:	2120      	movs	r1, #32
 8004354:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2240      	movs	r2, #64	; 0x40
 800435a:	2100      	movs	r1, #0
 800435c:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 800435e:	2300      	movs	r3, #0
 8004360:	e04b      	b.n	80043fa <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004362:	683a      	ldr	r2, [r7, #0]
 8004364:	68f8      	ldr	r0, [r7, #12]
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	0013      	movs	r3, r2
 800436c:	2200      	movs	r2, #0
 800436e:	2120      	movs	r1, #32
 8004370:	f000 f932 	bl	80045d8 <I2C_WaitOnFlagUntilTimeout>
 8004374:	1e03      	subs	r3, r0, #0
 8004376:	d001      	beq.n	800437c <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e03e      	b.n	80043fa <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2210      	movs	r2, #16
 8004382:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2220      	movs	r2, #32
 800438a:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	429a      	cmp	r2, r3
 8004392:	d119      	bne.n	80043c8 <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	685a      	ldr	r2, [r3, #4]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2180      	movs	r1, #128	; 0x80
 80043a0:	01c9      	lsls	r1, r1, #7
 80043a2:	430a      	orrs	r2, r1
 80043a4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80043a6:	683a      	ldr	r2, [r7, #0]
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	0013      	movs	r3, r2
 80043b0:	2200      	movs	r2, #0
 80043b2:	2120      	movs	r1, #32
 80043b4:	f000 f910 	bl	80045d8 <I2C_WaitOnFlagUntilTimeout>
 80043b8:	1e03      	subs	r3, r0, #0
 80043ba:	d001      	beq.n	80043c0 <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e01c      	b.n	80043fa <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2220      	movs	r2, #32
 80043c6:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	3301      	adds	r3, #1
 80043cc:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d900      	bls.n	80043d8 <HAL_I2C_IsDeviceReady+0x204>
 80043d6:	e72e      	b.n	8004236 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2241      	movs	r2, #65	; 0x41
 80043dc:	2120      	movs	r1, #32
 80043de:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e4:	2220      	movs	r2, #32
 80043e6:	431a      	orrs	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2240      	movs	r2, #64	; 0x40
 80043f0:	2100      	movs	r1, #0
 80043f2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e000      	b.n	80043fa <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 80043f8:	2302      	movs	r3, #2
  }
}
 80043fa:	0018      	movs	r0, r3
 80043fc:	46bd      	mov	sp, r7
 80043fe:	b008      	add	sp, #32
 8004400:	bd80      	pop	{r7, pc}
 8004402:	46c0      	nop			; (mov r8, r8)
 8004404:	02002000 	.word	0x02002000

08004408 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004408:	b5b0      	push	{r4, r5, r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af02      	add	r7, sp, #8
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	000c      	movs	r4, r1
 8004412:	0010      	movs	r0, r2
 8004414:	0019      	movs	r1, r3
 8004416:	250a      	movs	r5, #10
 8004418:	197b      	adds	r3, r7, r5
 800441a:	1c22      	adds	r2, r4, #0
 800441c:	801a      	strh	r2, [r3, #0]
 800441e:	2308      	movs	r3, #8
 8004420:	18fb      	adds	r3, r7, r3
 8004422:	1c02      	adds	r2, r0, #0
 8004424:	801a      	strh	r2, [r3, #0]
 8004426:	1dbb      	adds	r3, r7, #6
 8004428:	1c0a      	adds	r2, r1, #0
 800442a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800442c:	1dbb      	adds	r3, r7, #6
 800442e:	881b      	ldrh	r3, [r3, #0]
 8004430:	b2da      	uxtb	r2, r3
 8004432:	2380      	movs	r3, #128	; 0x80
 8004434:	045c      	lsls	r4, r3, #17
 8004436:	197b      	adds	r3, r7, r5
 8004438:	8819      	ldrh	r1, [r3, #0]
 800443a:	68f8      	ldr	r0, [r7, #12]
 800443c:	4b23      	ldr	r3, [pc, #140]	; (80044cc <I2C_RequestMemoryWrite+0xc4>)
 800443e:	9300      	str	r3, [sp, #0]
 8004440:	0023      	movs	r3, r4
 8004442:	f000 f9fd 	bl	8004840 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004448:	6a39      	ldr	r1, [r7, #32]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	0018      	movs	r0, r3
 800444e:	f000 f902 	bl	8004656 <I2C_WaitOnTXISFlagUntilTimeout>
 8004452:	1e03      	subs	r3, r0, #0
 8004454:	d001      	beq.n	800445a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e033      	b.n	80044c2 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800445a:	1dbb      	adds	r3, r7, #6
 800445c:	881b      	ldrh	r3, [r3, #0]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d107      	bne.n	8004472 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004462:	2308      	movs	r3, #8
 8004464:	18fb      	adds	r3, r7, r3
 8004466:	881b      	ldrh	r3, [r3, #0]
 8004468:	b2da      	uxtb	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	629a      	str	r2, [r3, #40]	; 0x28
 8004470:	e019      	b.n	80044a6 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004472:	2308      	movs	r3, #8
 8004474:	18fb      	adds	r3, r7, r3
 8004476:	881b      	ldrh	r3, [r3, #0]
 8004478:	0a1b      	lsrs	r3, r3, #8
 800447a:	b29b      	uxth	r3, r3
 800447c:	b2da      	uxtb	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004486:	6a39      	ldr	r1, [r7, #32]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	0018      	movs	r0, r3
 800448c:	f000 f8e3 	bl	8004656 <I2C_WaitOnTXISFlagUntilTimeout>
 8004490:	1e03      	subs	r3, r0, #0
 8004492:	d001      	beq.n	8004498 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e014      	b.n	80044c2 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004498:	2308      	movs	r3, #8
 800449a:	18fb      	adds	r3, r7, r3
 800449c:	881b      	ldrh	r3, [r3, #0]
 800449e:	b2da      	uxtb	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80044a6:	6a3a      	ldr	r2, [r7, #32]
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ac:	9300      	str	r3, [sp, #0]
 80044ae:	0013      	movs	r3, r2
 80044b0:	2200      	movs	r2, #0
 80044b2:	2180      	movs	r1, #128	; 0x80
 80044b4:	f000 f890 	bl	80045d8 <I2C_WaitOnFlagUntilTimeout>
 80044b8:	1e03      	subs	r3, r0, #0
 80044ba:	d001      	beq.n	80044c0 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e000      	b.n	80044c2 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	0018      	movs	r0, r3
 80044c4:	46bd      	mov	sp, r7
 80044c6:	b004      	add	sp, #16
 80044c8:	bdb0      	pop	{r4, r5, r7, pc}
 80044ca:	46c0      	nop			; (mov r8, r8)
 80044cc:	80002000 	.word	0x80002000

080044d0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80044d0:	b5b0      	push	{r4, r5, r7, lr}
 80044d2:	b086      	sub	sp, #24
 80044d4:	af02      	add	r7, sp, #8
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	000c      	movs	r4, r1
 80044da:	0010      	movs	r0, r2
 80044dc:	0019      	movs	r1, r3
 80044de:	250a      	movs	r5, #10
 80044e0:	197b      	adds	r3, r7, r5
 80044e2:	1c22      	adds	r2, r4, #0
 80044e4:	801a      	strh	r2, [r3, #0]
 80044e6:	2308      	movs	r3, #8
 80044e8:	18fb      	adds	r3, r7, r3
 80044ea:	1c02      	adds	r2, r0, #0
 80044ec:	801a      	strh	r2, [r3, #0]
 80044ee:	1dbb      	adds	r3, r7, #6
 80044f0:	1c0a      	adds	r2, r1, #0
 80044f2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80044f4:	1dbb      	adds	r3, r7, #6
 80044f6:	881b      	ldrh	r3, [r3, #0]
 80044f8:	b2da      	uxtb	r2, r3
 80044fa:	197b      	adds	r3, r7, r5
 80044fc:	8819      	ldrh	r1, [r3, #0]
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	4b23      	ldr	r3, [pc, #140]	; (8004590 <I2C_RequestMemoryRead+0xc0>)
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	2300      	movs	r3, #0
 8004506:	f000 f99b 	bl	8004840 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800450a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800450c:	6a39      	ldr	r1, [r7, #32]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	0018      	movs	r0, r3
 8004512:	f000 f8a0 	bl	8004656 <I2C_WaitOnTXISFlagUntilTimeout>
 8004516:	1e03      	subs	r3, r0, #0
 8004518:	d001      	beq.n	800451e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e033      	b.n	8004586 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800451e:	1dbb      	adds	r3, r7, #6
 8004520:	881b      	ldrh	r3, [r3, #0]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d107      	bne.n	8004536 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004526:	2308      	movs	r3, #8
 8004528:	18fb      	adds	r3, r7, r3
 800452a:	881b      	ldrh	r3, [r3, #0]
 800452c:	b2da      	uxtb	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	629a      	str	r2, [r3, #40]	; 0x28
 8004534:	e019      	b.n	800456a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004536:	2308      	movs	r3, #8
 8004538:	18fb      	adds	r3, r7, r3
 800453a:	881b      	ldrh	r3, [r3, #0]
 800453c:	0a1b      	lsrs	r3, r3, #8
 800453e:	b29b      	uxth	r3, r3
 8004540:	b2da      	uxtb	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800454a:	6a39      	ldr	r1, [r7, #32]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	0018      	movs	r0, r3
 8004550:	f000 f881 	bl	8004656 <I2C_WaitOnTXISFlagUntilTimeout>
 8004554:	1e03      	subs	r3, r0, #0
 8004556:	d001      	beq.n	800455c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e014      	b.n	8004586 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800455c:	2308      	movs	r3, #8
 800455e:	18fb      	adds	r3, r7, r3
 8004560:	881b      	ldrh	r3, [r3, #0]
 8004562:	b2da      	uxtb	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800456a:	6a3a      	ldr	r2, [r7, #32]
 800456c:	68f8      	ldr	r0, [r7, #12]
 800456e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004570:	9300      	str	r3, [sp, #0]
 8004572:	0013      	movs	r3, r2
 8004574:	2200      	movs	r2, #0
 8004576:	2140      	movs	r1, #64	; 0x40
 8004578:	f000 f82e 	bl	80045d8 <I2C_WaitOnFlagUntilTimeout>
 800457c:	1e03      	subs	r3, r0, #0
 800457e:	d001      	beq.n	8004584 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e000      	b.n	8004586 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	0018      	movs	r0, r3
 8004588:	46bd      	mov	sp, r7
 800458a:	b004      	add	sp, #16
 800458c:	bdb0      	pop	{r4, r5, r7, pc}
 800458e:	46c0      	nop			; (mov r8, r8)
 8004590:	80002000 	.word	0x80002000

08004594 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	2202      	movs	r2, #2
 80045a4:	4013      	ands	r3, r2
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d103      	bne.n	80045b2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2200      	movs	r2, #0
 80045b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	2201      	movs	r2, #1
 80045ba:	4013      	ands	r3, r2
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d007      	beq.n	80045d0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	699a      	ldr	r2, [r3, #24]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2101      	movs	r1, #1
 80045cc:	430a      	orrs	r2, r1
 80045ce:	619a      	str	r2, [r3, #24]
  }
}
 80045d0:	46c0      	nop			; (mov r8, r8)
 80045d2:	46bd      	mov	sp, r7
 80045d4:	b002      	add	sp, #8
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	603b      	str	r3, [r7, #0]
 80045e4:	1dfb      	adds	r3, r7, #7
 80045e6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045e8:	e021      	b.n	800462e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	3301      	adds	r3, #1
 80045ee:	d01e      	beq.n	800462e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045f0:	f7fe fab2 	bl	8002b58 <HAL_GetTick>
 80045f4:	0002      	movs	r2, r0
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d302      	bcc.n	8004606 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d113      	bne.n	800462e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460a:	2220      	movs	r2, #32
 800460c:	431a      	orrs	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2241      	movs	r2, #65	; 0x41
 8004616:	2120      	movs	r1, #32
 8004618:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2242      	movs	r2, #66	; 0x42
 800461e:	2100      	movs	r1, #0
 8004620:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2240      	movs	r2, #64	; 0x40
 8004626:	2100      	movs	r1, #0
 8004628:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e00f      	b.n	800464e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	4013      	ands	r3, r2
 8004638:	68ba      	ldr	r2, [r7, #8]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	425a      	negs	r2, r3
 800463e:	4153      	adcs	r3, r2
 8004640:	b2db      	uxtb	r3, r3
 8004642:	001a      	movs	r2, r3
 8004644:	1dfb      	adds	r3, r7, #7
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	429a      	cmp	r2, r3
 800464a:	d0ce      	beq.n	80045ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	0018      	movs	r0, r3
 8004650:	46bd      	mov	sp, r7
 8004652:	b004      	add	sp, #16
 8004654:	bd80      	pop	{r7, pc}

08004656 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b084      	sub	sp, #16
 800465a:	af00      	add	r7, sp, #0
 800465c:	60f8      	str	r0, [r7, #12]
 800465e:	60b9      	str	r1, [r7, #8]
 8004660:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004662:	e02b      	b.n	80046bc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	68b9      	ldr	r1, [r7, #8]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	0018      	movs	r0, r3
 800466c:	f000 f86e 	bl	800474c <I2C_IsAcknowledgeFailed>
 8004670:	1e03      	subs	r3, r0, #0
 8004672:	d001      	beq.n	8004678 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e029      	b.n	80046cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	3301      	adds	r3, #1
 800467c:	d01e      	beq.n	80046bc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800467e:	f7fe fa6b 	bl	8002b58 <HAL_GetTick>
 8004682:	0002      	movs	r2, r0
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	68ba      	ldr	r2, [r7, #8]
 800468a:	429a      	cmp	r2, r3
 800468c:	d302      	bcc.n	8004694 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d113      	bne.n	80046bc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004698:	2220      	movs	r2, #32
 800469a:	431a      	orrs	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2241      	movs	r2, #65	; 0x41
 80046a4:	2120      	movs	r1, #32
 80046a6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2242      	movs	r2, #66	; 0x42
 80046ac:	2100      	movs	r1, #0
 80046ae:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2240      	movs	r2, #64	; 0x40
 80046b4:	2100      	movs	r1, #0
 80046b6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e007      	b.n	80046cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	2202      	movs	r2, #2
 80046c4:	4013      	ands	r3, r2
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d1cc      	bne.n	8004664 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	0018      	movs	r0, r3
 80046ce:	46bd      	mov	sp, r7
 80046d0:	b004      	add	sp, #16
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046e0:	e028      	b.n	8004734 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	68b9      	ldr	r1, [r7, #8]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	0018      	movs	r0, r3
 80046ea:	f000 f82f 	bl	800474c <I2C_IsAcknowledgeFailed>
 80046ee:	1e03      	subs	r3, r0, #0
 80046f0:	d001      	beq.n	80046f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e026      	b.n	8004744 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046f6:	f7fe fa2f 	bl	8002b58 <HAL_GetTick>
 80046fa:	0002      	movs	r2, r0
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	429a      	cmp	r2, r3
 8004704:	d302      	bcc.n	800470c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d113      	bne.n	8004734 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004710:	2220      	movs	r2, #32
 8004712:	431a      	orrs	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2241      	movs	r2, #65	; 0x41
 800471c:	2120      	movs	r1, #32
 800471e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2242      	movs	r2, #66	; 0x42
 8004724:	2100      	movs	r1, #0
 8004726:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2240      	movs	r2, #64	; 0x40
 800472c:	2100      	movs	r1, #0
 800472e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e007      	b.n	8004744 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	2220      	movs	r2, #32
 800473c:	4013      	ands	r3, r2
 800473e:	2b20      	cmp	r3, #32
 8004740:	d1cf      	bne.n	80046e2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	0018      	movs	r0, r3
 8004746:	46bd      	mov	sp, r7
 8004748:	b004      	add	sp, #16
 800474a:	bd80      	pop	{r7, pc}

0800474c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	2210      	movs	r2, #16
 8004760:	4013      	ands	r3, r2
 8004762:	2b10      	cmp	r3, #16
 8004764:	d164      	bne.n	8004830 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	685a      	ldr	r2, [r3, #4]
 800476c:	2380      	movs	r3, #128	; 0x80
 800476e:	049b      	lsls	r3, r3, #18
 8004770:	401a      	ands	r2, r3
 8004772:	2380      	movs	r3, #128	; 0x80
 8004774:	049b      	lsls	r3, r3, #18
 8004776:	429a      	cmp	r2, r3
 8004778:	d02b      	beq.n	80047d2 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2180      	movs	r1, #128	; 0x80
 8004786:	01c9      	lsls	r1, r1, #7
 8004788:	430a      	orrs	r2, r1
 800478a:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800478c:	e021      	b.n	80047d2 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	3301      	adds	r3, #1
 8004792:	d01e      	beq.n	80047d2 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004794:	f7fe f9e0 	bl	8002b58 <HAL_GetTick>
 8004798:	0002      	movs	r2, r0
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	68ba      	ldr	r2, [r7, #8]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d302      	bcc.n	80047aa <I2C_IsAcknowledgeFailed+0x5e>
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d113      	bne.n	80047d2 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ae:	2220      	movs	r2, #32
 80047b0:	431a      	orrs	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2241      	movs	r2, #65	; 0x41
 80047ba:	2120      	movs	r1, #32
 80047bc:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2242      	movs	r2, #66	; 0x42
 80047c2:	2100      	movs	r1, #0
 80047c4:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2240      	movs	r2, #64	; 0x40
 80047ca:	2100      	movs	r1, #0
 80047cc:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e02f      	b.n	8004832 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	2220      	movs	r2, #32
 80047da:	4013      	ands	r3, r2
 80047dc:	2b20      	cmp	r3, #32
 80047de:	d1d6      	bne.n	800478e <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2210      	movs	r2, #16
 80047e6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2220      	movs	r2, #32
 80047ee:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	0018      	movs	r0, r3
 80047f4:	f7ff fece 	bl	8004594 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	685a      	ldr	r2, [r3, #4]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	490e      	ldr	r1, [pc, #56]	; (800483c <I2C_IsAcknowledgeFailed+0xf0>)
 8004804:	400a      	ands	r2, r1
 8004806:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800480c:	2204      	movs	r2, #4
 800480e:	431a      	orrs	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2241      	movs	r2, #65	; 0x41
 8004818:	2120      	movs	r1, #32
 800481a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2242      	movs	r2, #66	; 0x42
 8004820:	2100      	movs	r1, #0
 8004822:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2240      	movs	r2, #64	; 0x40
 8004828:	2100      	movs	r1, #0
 800482a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e000      	b.n	8004832 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	0018      	movs	r0, r3
 8004834:	46bd      	mov	sp, r7
 8004836:	b004      	add	sp, #16
 8004838:	bd80      	pop	{r7, pc}
 800483a:	46c0      	nop			; (mov r8, r8)
 800483c:	fe00e800 	.word	0xfe00e800

08004840 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004840:	b590      	push	{r4, r7, lr}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	0008      	movs	r0, r1
 800484a:	0011      	movs	r1, r2
 800484c:	607b      	str	r3, [r7, #4]
 800484e:	240a      	movs	r4, #10
 8004850:	193b      	adds	r3, r7, r4
 8004852:	1c02      	adds	r2, r0, #0
 8004854:	801a      	strh	r2, [r3, #0]
 8004856:	2009      	movs	r0, #9
 8004858:	183b      	adds	r3, r7, r0
 800485a:	1c0a      	adds	r2, r1, #0
 800485c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	6a3a      	ldr	r2, [r7, #32]
 8004866:	0d51      	lsrs	r1, r2, #21
 8004868:	2280      	movs	r2, #128	; 0x80
 800486a:	00d2      	lsls	r2, r2, #3
 800486c:	400a      	ands	r2, r1
 800486e:	490e      	ldr	r1, [pc, #56]	; (80048a8 <I2C_TransferConfig+0x68>)
 8004870:	430a      	orrs	r2, r1
 8004872:	43d2      	mvns	r2, r2
 8004874:	401a      	ands	r2, r3
 8004876:	0011      	movs	r1, r2
 8004878:	193b      	adds	r3, r7, r4
 800487a:	881b      	ldrh	r3, [r3, #0]
 800487c:	059b      	lsls	r3, r3, #22
 800487e:	0d9a      	lsrs	r2, r3, #22
 8004880:	183b      	adds	r3, r7, r0
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	0418      	lsls	r0, r3, #16
 8004886:	23ff      	movs	r3, #255	; 0xff
 8004888:	041b      	lsls	r3, r3, #16
 800488a:	4003      	ands	r3, r0
 800488c:	431a      	orrs	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	431a      	orrs	r2, r3
 8004892:	6a3b      	ldr	r3, [r7, #32]
 8004894:	431a      	orrs	r2, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	430a      	orrs	r2, r1
 800489c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800489e:	46c0      	nop			; (mov r8, r8)
 80048a0:	46bd      	mov	sp, r7
 80048a2:	b005      	add	sp, #20
 80048a4:	bd90      	pop	{r4, r7, pc}
 80048a6:	46c0      	nop			; (mov r8, r8)
 80048a8:	03ff63ff 	.word	0x03ff63ff

080048ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2241      	movs	r2, #65	; 0x41
 80048ba:	5c9b      	ldrb	r3, [r3, r2]
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	2b20      	cmp	r3, #32
 80048c0:	d138      	bne.n	8004934 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2240      	movs	r2, #64	; 0x40
 80048c6:	5c9b      	ldrb	r3, [r3, r2]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d101      	bne.n	80048d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80048cc:	2302      	movs	r3, #2
 80048ce:	e032      	b.n	8004936 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2240      	movs	r2, #64	; 0x40
 80048d4:	2101      	movs	r1, #1
 80048d6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2241      	movs	r2, #65	; 0x41
 80048dc:	2124      	movs	r1, #36	; 0x24
 80048de:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2101      	movs	r1, #1
 80048ec:	438a      	bics	r2, r1
 80048ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4911      	ldr	r1, [pc, #68]	; (8004940 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80048fc:	400a      	ands	r2, r1
 80048fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6819      	ldr	r1, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	683a      	ldr	r2, [r7, #0]
 800490c:	430a      	orrs	r2, r1
 800490e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2101      	movs	r1, #1
 800491c:	430a      	orrs	r2, r1
 800491e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2241      	movs	r2, #65	; 0x41
 8004924:	2120      	movs	r1, #32
 8004926:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2240      	movs	r2, #64	; 0x40
 800492c:	2100      	movs	r1, #0
 800492e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004930:	2300      	movs	r3, #0
 8004932:	e000      	b.n	8004936 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004934:	2302      	movs	r3, #2
  }
}
 8004936:	0018      	movs	r0, r3
 8004938:	46bd      	mov	sp, r7
 800493a:	b002      	add	sp, #8
 800493c:	bd80      	pop	{r7, pc}
 800493e:	46c0      	nop			; (mov r8, r8)
 8004940:	ffffefff 	.word	0xffffefff

08004944 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2241      	movs	r2, #65	; 0x41
 8004952:	5c9b      	ldrb	r3, [r3, r2]
 8004954:	b2db      	uxtb	r3, r3
 8004956:	2b20      	cmp	r3, #32
 8004958:	d139      	bne.n	80049ce <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2240      	movs	r2, #64	; 0x40
 800495e:	5c9b      	ldrb	r3, [r3, r2]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d101      	bne.n	8004968 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004964:	2302      	movs	r3, #2
 8004966:	e033      	b.n	80049d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2240      	movs	r2, #64	; 0x40
 800496c:	2101      	movs	r1, #1
 800496e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2241      	movs	r2, #65	; 0x41
 8004974:	2124      	movs	r1, #36	; 0x24
 8004976:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2101      	movs	r1, #1
 8004984:	438a      	bics	r2, r1
 8004986:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	4a11      	ldr	r2, [pc, #68]	; (80049d8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004994:	4013      	ands	r3, r2
 8004996:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	021b      	lsls	r3, r3, #8
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	4313      	orrs	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2101      	movs	r1, #1
 80049b6:	430a      	orrs	r2, r1
 80049b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2241      	movs	r2, #65	; 0x41
 80049be:	2120      	movs	r1, #32
 80049c0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2240      	movs	r2, #64	; 0x40
 80049c6:	2100      	movs	r1, #0
 80049c8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80049ca:	2300      	movs	r3, #0
 80049cc:	e000      	b.n	80049d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80049ce:	2302      	movs	r3, #2
  }
}
 80049d0:	0018      	movs	r0, r3
 80049d2:	46bd      	mov	sp, r7
 80049d4:	b004      	add	sp, #16
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	fffff0ff 	.word	0xfffff0ff

080049dc <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b086      	sub	sp, #24
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	000a      	movs	r2, r1
 80049e6:	1cfb      	adds	r3, r7, #3
 80049e8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 80049ea:	2300      	movs	r3, #0
 80049ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80049ee:	4b25      	ldr	r3, [pc, #148]	; (8004a84 <HAL_PWR_EnterSTOPMode+0xa8>)
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	2380      	movs	r3, #128	; 0x80
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	4013      	ands	r3, r2
 80049f8:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80049fa:	4b23      	ldr	r3, [pc, #140]	; (8004a88 <HAL_PWR_EnterSTOPMode+0xac>)
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	2201      	movs	r2, #1
 8004a00:	4013      	ands	r3, r2
 8004a02:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d008      	beq.n	8004a1c <HAL_PWR_EnterSTOPMode+0x40>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d005      	beq.n	8004a1c <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8004a10:	4b1c      	ldr	r3, [pc, #112]	; (8004a84 <HAL_PWR_EnterSTOPMode+0xa8>)
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	4b1b      	ldr	r3, [pc, #108]	; (8004a84 <HAL_PWR_EnterSTOPMode+0xa8>)
 8004a16:	491d      	ldr	r1, [pc, #116]	; (8004a8c <HAL_PWR_EnterSTOPMode+0xb0>)
 8004a18:	400a      	ands	r2, r1
 8004a1a:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8004a1c:	4b19      	ldr	r3, [pc, #100]	; (8004a84 <HAL_PWR_EnterSTOPMode+0xa8>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	2203      	movs	r2, #3
 8004a26:	4393      	bics	r3, r2
 8004a28:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8004a32:	4b14      	ldr	r3, [pc, #80]	; (8004a84 <HAL_PWR_EnterSTOPMode+0xa8>)
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004a38:	4b15      	ldr	r3, [pc, #84]	; (8004a90 <HAL_PWR_EnterSTOPMode+0xb4>)
 8004a3a:	691a      	ldr	r2, [r3, #16]
 8004a3c:	4b14      	ldr	r3, [pc, #80]	; (8004a90 <HAL_PWR_EnterSTOPMode+0xb4>)
 8004a3e:	2104      	movs	r1, #4
 8004a40:	430a      	orrs	r2, r1
 8004a42:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8004a44:	1cfb      	adds	r3, r7, #3
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d101      	bne.n	8004a50 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004a4c:	bf30      	wfi
 8004a4e:	e002      	b.n	8004a56 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004a50:	bf40      	sev
    __WFE();
 8004a52:	bf20      	wfe
    __WFE();
 8004a54:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004a56:	4b0e      	ldr	r3, [pc, #56]	; (8004a90 <HAL_PWR_EnterSTOPMode+0xb4>)
 8004a58:	691a      	ldr	r2, [r3, #16]
 8004a5a:	4b0d      	ldr	r3, [pc, #52]	; (8004a90 <HAL_PWR_EnterSTOPMode+0xb4>)
 8004a5c:	2104      	movs	r1, #4
 8004a5e:	438a      	bics	r2, r1
 8004a60:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d009      	beq.n	8004a7c <HAL_PWR_EnterSTOPMode+0xa0>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d006      	beq.n	8004a7c <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8004a6e:	4b05      	ldr	r3, [pc, #20]	; (8004a84 <HAL_PWR_EnterSTOPMode+0xa8>)
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	4b04      	ldr	r3, [pc, #16]	; (8004a84 <HAL_PWR_EnterSTOPMode+0xa8>)
 8004a74:	2180      	movs	r1, #128	; 0x80
 8004a76:	0089      	lsls	r1, r1, #2
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	601a      	str	r2, [r3, #0]
  }
}
 8004a7c:	46c0      	nop			; (mov r8, r8)
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	b006      	add	sp, #24
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	40007000 	.word	0x40007000
 8004a88:	40010000 	.word	0x40010000
 8004a8c:	fffffdff 	.word	0xfffffdff
 8004a90:	e000ed00 	.word	0xe000ed00

08004a94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a94:	b5b0      	push	{r4, r5, r7, lr}
 8004a96:	b08a      	sub	sp, #40	; 0x28
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d102      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	f000 fb6c 	bl	8005180 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004aa8:	4bc8      	ldr	r3, [pc, #800]	; (8004dcc <HAL_RCC_OscConfig+0x338>)
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	220c      	movs	r2, #12
 8004aae:	4013      	ands	r3, r2
 8004ab0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ab2:	4bc6      	ldr	r3, [pc, #792]	; (8004dcc <HAL_RCC_OscConfig+0x338>)
 8004ab4:	68da      	ldr	r2, [r3, #12]
 8004ab6:	2380      	movs	r3, #128	; 0x80
 8004ab8:	025b      	lsls	r3, r3, #9
 8004aba:	4013      	ands	r3, r2
 8004abc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	d100      	bne.n	8004aca <HAL_RCC_OscConfig+0x36>
 8004ac8:	e07d      	b.n	8004bc6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	2b08      	cmp	r3, #8
 8004ace:	d007      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	2b0c      	cmp	r3, #12
 8004ad4:	d112      	bne.n	8004afc <HAL_RCC_OscConfig+0x68>
 8004ad6:	69ba      	ldr	r2, [r7, #24]
 8004ad8:	2380      	movs	r3, #128	; 0x80
 8004ada:	025b      	lsls	r3, r3, #9
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d10d      	bne.n	8004afc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ae0:	4bba      	ldr	r3, [pc, #744]	; (8004dcc <HAL_RCC_OscConfig+0x338>)
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	2380      	movs	r3, #128	; 0x80
 8004ae6:	029b      	lsls	r3, r3, #10
 8004ae8:	4013      	ands	r3, r2
 8004aea:	d100      	bne.n	8004aee <HAL_RCC_OscConfig+0x5a>
 8004aec:	e06a      	b.n	8004bc4 <HAL_RCC_OscConfig+0x130>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d166      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	f000 fb42 	bl	8005180 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685a      	ldr	r2, [r3, #4]
 8004b00:	2380      	movs	r3, #128	; 0x80
 8004b02:	025b      	lsls	r3, r3, #9
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d107      	bne.n	8004b18 <HAL_RCC_OscConfig+0x84>
 8004b08:	4bb0      	ldr	r3, [pc, #704]	; (8004dcc <HAL_RCC_OscConfig+0x338>)
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	4baf      	ldr	r3, [pc, #700]	; (8004dcc <HAL_RCC_OscConfig+0x338>)
 8004b0e:	2180      	movs	r1, #128	; 0x80
 8004b10:	0249      	lsls	r1, r1, #9
 8004b12:	430a      	orrs	r2, r1
 8004b14:	601a      	str	r2, [r3, #0]
 8004b16:	e027      	b.n	8004b68 <HAL_RCC_OscConfig+0xd4>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	23a0      	movs	r3, #160	; 0xa0
 8004b1e:	02db      	lsls	r3, r3, #11
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d10e      	bne.n	8004b42 <HAL_RCC_OscConfig+0xae>
 8004b24:	4ba9      	ldr	r3, [pc, #676]	; (8004dcc <HAL_RCC_OscConfig+0x338>)
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	4ba8      	ldr	r3, [pc, #672]	; (8004dcc <HAL_RCC_OscConfig+0x338>)
 8004b2a:	2180      	movs	r1, #128	; 0x80
 8004b2c:	02c9      	lsls	r1, r1, #11
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	601a      	str	r2, [r3, #0]
 8004b32:	4ba6      	ldr	r3, [pc, #664]	; (8004dcc <HAL_RCC_OscConfig+0x338>)
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	4ba5      	ldr	r3, [pc, #660]	; (8004dcc <HAL_RCC_OscConfig+0x338>)
 8004b38:	2180      	movs	r1, #128	; 0x80
 8004b3a:	0249      	lsls	r1, r1, #9
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	601a      	str	r2, [r3, #0]
 8004b40:	e012      	b.n	8004b68 <HAL_RCC_OscConfig+0xd4>
 8004b42:	4ba2      	ldr	r3, [pc, #648]	; (8004dcc <HAL_RCC_OscConfig+0x338>)
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	4ba1      	ldr	r3, [pc, #644]	; (8004dcc <HAL_RCC_OscConfig+0x338>)
 8004b48:	49a1      	ldr	r1, [pc, #644]	; (8004dd0 <HAL_RCC_OscConfig+0x33c>)
 8004b4a:	400a      	ands	r2, r1
 8004b4c:	601a      	str	r2, [r3, #0]
 8004b4e:	4b9f      	ldr	r3, [pc, #636]	; (8004dcc <HAL_RCC_OscConfig+0x338>)
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	2380      	movs	r3, #128	; 0x80
 8004b54:	025b      	lsls	r3, r3, #9
 8004b56:	4013      	ands	r3, r2
 8004b58:	60fb      	str	r3, [r7, #12]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	4b9b      	ldr	r3, [pc, #620]	; (8004dcc <HAL_RCC_OscConfig+0x338>)
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	4b9a      	ldr	r3, [pc, #616]	; (8004dcc <HAL_RCC_OscConfig+0x338>)
 8004b62:	499c      	ldr	r1, [pc, #624]	; (8004dd4 <HAL_RCC_OscConfig+0x340>)
 8004b64:	400a      	ands	r2, r1
 8004b66:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d014      	beq.n	8004b9a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b70:	f7fd fff2 	bl	8002b58 <HAL_GetTick>
 8004b74:	0003      	movs	r3, r0
 8004b76:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b78:	e008      	b.n	8004b8c <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b7a:	f7fd ffed 	bl	8002b58 <HAL_GetTick>
 8004b7e:	0002      	movs	r2, r0
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	2b64      	cmp	r3, #100	; 0x64
 8004b86:	d901      	bls.n	8004b8c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e2f9      	b.n	8005180 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b8c:	4b8f      	ldr	r3, [pc, #572]	; (8004dcc <HAL_RCC_OscConfig+0x338>)
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	2380      	movs	r3, #128	; 0x80
 8004b92:	029b      	lsls	r3, r3, #10
 8004b94:	4013      	ands	r3, r2
 8004b96:	d0f0      	beq.n	8004b7a <HAL_RCC_OscConfig+0xe6>
 8004b98:	e015      	b.n	8004bc6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b9a:	f7fd ffdd 	bl	8002b58 <HAL_GetTick>
 8004b9e:	0003      	movs	r3, r0
 8004ba0:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ba4:	f7fd ffd8 	bl	8002b58 <HAL_GetTick>
 8004ba8:	0002      	movs	r2, r0
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b64      	cmp	r3, #100	; 0x64
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e2e4      	b.n	8005180 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004bb6:	4b85      	ldr	r3, [pc, #532]	; (8004dcc <HAL_RCC_OscConfig+0x338>)
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	2380      	movs	r3, #128	; 0x80
 8004bbc:	029b      	lsls	r3, r3, #10
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	d1f0      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x110>
 8004bc2:	e000      	b.n	8004bc6 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bc4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	4013      	ands	r3, r2
 8004bce:	d100      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x13e>
 8004bd0:	e099      	b.n	8004d06 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8004bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bda:	2220      	movs	r2, #32
 8004bdc:	4013      	ands	r3, r2
 8004bde:	d009      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004be0:	4b7a      	ldr	r3, [pc, #488]	; (8004dcc <HAL_RCC_OscConfig+0x338>)
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	4b79      	ldr	r3, [pc, #484]	; (8004dcc <HAL_RCC_OscConfig+0x338>)
 8004be6:	2120      	movs	r1, #32
 8004be8:	430a      	orrs	r2, r1
 8004bea:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8004bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bee:	2220      	movs	r2, #32
 8004bf0:	4393      	bics	r3, r2
 8004bf2:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	2b04      	cmp	r3, #4
 8004bf8:	d005      	beq.n	8004c06 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	2b0c      	cmp	r3, #12
 8004bfe:	d13e      	bne.n	8004c7e <HAL_RCC_OscConfig+0x1ea>
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d13b      	bne.n	8004c7e <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004c06:	4b71      	ldr	r3, [pc, #452]	; (8004dcc <HAL_RCC_OscConfig+0x338>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2204      	movs	r2, #4
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	d004      	beq.n	8004c1a <HAL_RCC_OscConfig+0x186>
 8004c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e2b2      	b.n	8005180 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c1a:	4b6c      	ldr	r3, [pc, #432]	; (8004dcc <HAL_RCC_OscConfig+0x338>)
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	4a6e      	ldr	r2, [pc, #440]	; (8004dd8 <HAL_RCC_OscConfig+0x344>)
 8004c20:	4013      	ands	r3, r2
 8004c22:	0019      	movs	r1, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	021a      	lsls	r2, r3, #8
 8004c2a:	4b68      	ldr	r3, [pc, #416]	; (8004dcc <HAL_RCC_OscConfig+0x338>)
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004c30:	4b66      	ldr	r3, [pc, #408]	; (8004dcc <HAL_RCC_OscConfig+0x338>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2209      	movs	r2, #9
 8004c36:	4393      	bics	r3, r2
 8004c38:	0019      	movs	r1, r3
 8004c3a:	4b64      	ldr	r3, [pc, #400]	; (8004dcc <HAL_RCC_OscConfig+0x338>)
 8004c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c42:	f000 fbeb 	bl	800541c <HAL_RCC_GetSysClockFreq>
 8004c46:	0001      	movs	r1, r0
 8004c48:	4b60      	ldr	r3, [pc, #384]	; (8004dcc <HAL_RCC_OscConfig+0x338>)
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	091b      	lsrs	r3, r3, #4
 8004c4e:	220f      	movs	r2, #15
 8004c50:	4013      	ands	r3, r2
 8004c52:	4a62      	ldr	r2, [pc, #392]	; (8004ddc <HAL_RCC_OscConfig+0x348>)
 8004c54:	5cd3      	ldrb	r3, [r2, r3]
 8004c56:	000a      	movs	r2, r1
 8004c58:	40da      	lsrs	r2, r3
 8004c5a:	4b61      	ldr	r3, [pc, #388]	; (8004de0 <HAL_RCC_OscConfig+0x34c>)
 8004c5c:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004c5e:	4b61      	ldr	r3, [pc, #388]	; (8004de4 <HAL_RCC_OscConfig+0x350>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2513      	movs	r5, #19
 8004c64:	197c      	adds	r4, r7, r5
 8004c66:	0018      	movs	r0, r3
 8004c68:	f7fd ff30 	bl	8002acc <HAL_InitTick>
 8004c6c:	0003      	movs	r3, r0
 8004c6e:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004c70:	197b      	adds	r3, r7, r5
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d046      	beq.n	8004d06 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8004c78:	197b      	adds	r3, r7, r5
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	e280      	b.n	8005180 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d027      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004c84:	4b51      	ldr	r3, [pc, #324]	; (8004dcc <HAL_RCC_OscConfig+0x338>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2209      	movs	r2, #9
 8004c8a:	4393      	bics	r3, r2
 8004c8c:	0019      	movs	r1, r3
 8004c8e:	4b4f      	ldr	r3, [pc, #316]	; (8004dcc <HAL_RCC_OscConfig+0x338>)
 8004c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c92:	430a      	orrs	r2, r1
 8004c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c96:	f7fd ff5f 	bl	8002b58 <HAL_GetTick>
 8004c9a:	0003      	movs	r3, r0
 8004c9c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c9e:	e008      	b.n	8004cb2 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ca0:	f7fd ff5a 	bl	8002b58 <HAL_GetTick>
 8004ca4:	0002      	movs	r2, r0
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e266      	b.n	8005180 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004cb2:	4b46      	ldr	r3, [pc, #280]	; (8004dcc <HAL_RCC_OscConfig+0x338>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2204      	movs	r2, #4
 8004cb8:	4013      	ands	r3, r2
 8004cba:	d0f1      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cbc:	4b43      	ldr	r3, [pc, #268]	; (8004dcc <HAL_RCC_OscConfig+0x338>)
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	4a45      	ldr	r2, [pc, #276]	; (8004dd8 <HAL_RCC_OscConfig+0x344>)
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	0019      	movs	r1, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	021a      	lsls	r2, r3, #8
 8004ccc:	4b3f      	ldr	r3, [pc, #252]	; (8004dcc <HAL_RCC_OscConfig+0x338>)
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	605a      	str	r2, [r3, #4]
 8004cd2:	e018      	b.n	8004d06 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cd4:	4b3d      	ldr	r3, [pc, #244]	; (8004dcc <HAL_RCC_OscConfig+0x338>)
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	4b3c      	ldr	r3, [pc, #240]	; (8004dcc <HAL_RCC_OscConfig+0x338>)
 8004cda:	2101      	movs	r1, #1
 8004cdc:	438a      	bics	r2, r1
 8004cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce0:	f7fd ff3a 	bl	8002b58 <HAL_GetTick>
 8004ce4:	0003      	movs	r3, r0
 8004ce6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ce8:	e008      	b.n	8004cfc <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cea:	f7fd ff35 	bl	8002b58 <HAL_GetTick>
 8004cee:	0002      	movs	r2, r0
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d901      	bls.n	8004cfc <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e241      	b.n	8005180 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004cfc:	4b33      	ldr	r3, [pc, #204]	; (8004dcc <HAL_RCC_OscConfig+0x338>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2204      	movs	r2, #4
 8004d02:	4013      	ands	r3, r2
 8004d04:	d1f1      	bne.n	8004cea <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2210      	movs	r2, #16
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	d100      	bne.n	8004d12 <HAL_RCC_OscConfig+0x27e>
 8004d10:	e0a1      	b.n	8004e56 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d140      	bne.n	8004d9a <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d18:	4b2c      	ldr	r3, [pc, #176]	; (8004dcc <HAL_RCC_OscConfig+0x338>)
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	2380      	movs	r3, #128	; 0x80
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	4013      	ands	r3, r2
 8004d22:	d005      	beq.n	8004d30 <HAL_RCC_OscConfig+0x29c>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d101      	bne.n	8004d30 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e227      	b.n	8005180 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d30:	4b26      	ldr	r3, [pc, #152]	; (8004dcc <HAL_RCC_OscConfig+0x338>)
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	4a2c      	ldr	r2, [pc, #176]	; (8004de8 <HAL_RCC_OscConfig+0x354>)
 8004d36:	4013      	ands	r3, r2
 8004d38:	0019      	movs	r1, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a1a      	ldr	r2, [r3, #32]
 8004d3e:	4b23      	ldr	r3, [pc, #140]	; (8004dcc <HAL_RCC_OscConfig+0x338>)
 8004d40:	430a      	orrs	r2, r1
 8004d42:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d44:	4b21      	ldr	r3, [pc, #132]	; (8004dcc <HAL_RCC_OscConfig+0x338>)
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	021b      	lsls	r3, r3, #8
 8004d4a:	0a19      	lsrs	r1, r3, #8
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	69db      	ldr	r3, [r3, #28]
 8004d50:	061a      	lsls	r2, r3, #24
 8004d52:	4b1e      	ldr	r3, [pc, #120]	; (8004dcc <HAL_RCC_OscConfig+0x338>)
 8004d54:	430a      	orrs	r2, r1
 8004d56:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a1b      	ldr	r3, [r3, #32]
 8004d5c:	0b5b      	lsrs	r3, r3, #13
 8004d5e:	3301      	adds	r3, #1
 8004d60:	2280      	movs	r2, #128	; 0x80
 8004d62:	0212      	lsls	r2, r2, #8
 8004d64:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004d66:	4b19      	ldr	r3, [pc, #100]	; (8004dcc <HAL_RCC_OscConfig+0x338>)
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	091b      	lsrs	r3, r3, #4
 8004d6c:	210f      	movs	r1, #15
 8004d6e:	400b      	ands	r3, r1
 8004d70:	491a      	ldr	r1, [pc, #104]	; (8004ddc <HAL_RCC_OscConfig+0x348>)
 8004d72:	5ccb      	ldrb	r3, [r1, r3]
 8004d74:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004d76:	4b1a      	ldr	r3, [pc, #104]	; (8004de0 <HAL_RCC_OscConfig+0x34c>)
 8004d78:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8004d7a:	4b1a      	ldr	r3, [pc, #104]	; (8004de4 <HAL_RCC_OscConfig+0x350>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2513      	movs	r5, #19
 8004d80:	197c      	adds	r4, r7, r5
 8004d82:	0018      	movs	r0, r3
 8004d84:	f7fd fea2 	bl	8002acc <HAL_InitTick>
 8004d88:	0003      	movs	r3, r0
 8004d8a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004d8c:	197b      	adds	r3, r7, r5
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d060      	beq.n	8004e56 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8004d94:	197b      	adds	r3, r7, r5
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	e1f2      	b.n	8005180 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d03f      	beq.n	8004e22 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004da2:	4b0a      	ldr	r3, [pc, #40]	; (8004dcc <HAL_RCC_OscConfig+0x338>)
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	4b09      	ldr	r3, [pc, #36]	; (8004dcc <HAL_RCC_OscConfig+0x338>)
 8004da8:	2180      	movs	r1, #128	; 0x80
 8004daa:	0049      	lsls	r1, r1, #1
 8004dac:	430a      	orrs	r2, r1
 8004dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004db0:	f7fd fed2 	bl	8002b58 <HAL_GetTick>
 8004db4:	0003      	movs	r3, r0
 8004db6:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004db8:	e018      	b.n	8004dec <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004dba:	f7fd fecd 	bl	8002b58 <HAL_GetTick>
 8004dbe:	0002      	movs	r2, r0
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d911      	bls.n	8004dec <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e1d9      	b.n	8005180 <HAL_RCC_OscConfig+0x6ec>
 8004dcc:	40021000 	.word	0x40021000
 8004dd0:	fffeffff 	.word	0xfffeffff
 8004dd4:	fffbffff 	.word	0xfffbffff
 8004dd8:	ffffe0ff 	.word	0xffffe0ff
 8004ddc:	08006870 	.word	0x08006870
 8004de0:	20000004 	.word	0x20000004
 8004de4:	20000008 	.word	0x20000008
 8004de8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004dec:	4bc9      	ldr	r3, [pc, #804]	; (8005114 <HAL_RCC_OscConfig+0x680>)
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	2380      	movs	r3, #128	; 0x80
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	4013      	ands	r3, r2
 8004df6:	d0e0      	beq.n	8004dba <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004df8:	4bc6      	ldr	r3, [pc, #792]	; (8005114 <HAL_RCC_OscConfig+0x680>)
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	4ac6      	ldr	r2, [pc, #792]	; (8005118 <HAL_RCC_OscConfig+0x684>)
 8004dfe:	4013      	ands	r3, r2
 8004e00:	0019      	movs	r1, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a1a      	ldr	r2, [r3, #32]
 8004e06:	4bc3      	ldr	r3, [pc, #780]	; (8005114 <HAL_RCC_OscConfig+0x680>)
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e0c:	4bc1      	ldr	r3, [pc, #772]	; (8005114 <HAL_RCC_OscConfig+0x680>)
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	021b      	lsls	r3, r3, #8
 8004e12:	0a19      	lsrs	r1, r3, #8
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	69db      	ldr	r3, [r3, #28]
 8004e18:	061a      	lsls	r2, r3, #24
 8004e1a:	4bbe      	ldr	r3, [pc, #760]	; (8005114 <HAL_RCC_OscConfig+0x680>)
 8004e1c:	430a      	orrs	r2, r1
 8004e1e:	605a      	str	r2, [r3, #4]
 8004e20:	e019      	b.n	8004e56 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004e22:	4bbc      	ldr	r3, [pc, #752]	; (8005114 <HAL_RCC_OscConfig+0x680>)
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	4bbb      	ldr	r3, [pc, #748]	; (8005114 <HAL_RCC_OscConfig+0x680>)
 8004e28:	49bc      	ldr	r1, [pc, #752]	; (800511c <HAL_RCC_OscConfig+0x688>)
 8004e2a:	400a      	ands	r2, r1
 8004e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e2e:	f7fd fe93 	bl	8002b58 <HAL_GetTick>
 8004e32:	0003      	movs	r3, r0
 8004e34:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004e36:	e008      	b.n	8004e4a <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e38:	f7fd fe8e 	bl	8002b58 <HAL_GetTick>
 8004e3c:	0002      	movs	r2, r0
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e19a      	b.n	8005180 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004e4a:	4bb2      	ldr	r3, [pc, #712]	; (8005114 <HAL_RCC_OscConfig+0x680>)
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	2380      	movs	r3, #128	; 0x80
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	4013      	ands	r3, r2
 8004e54:	d1f0      	bne.n	8004e38 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2208      	movs	r2, #8
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	d036      	beq.n	8004ece <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	695b      	ldr	r3, [r3, #20]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d019      	beq.n	8004e9c <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e68:	4baa      	ldr	r3, [pc, #680]	; (8005114 <HAL_RCC_OscConfig+0x680>)
 8004e6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e6c:	4ba9      	ldr	r3, [pc, #676]	; (8005114 <HAL_RCC_OscConfig+0x680>)
 8004e6e:	2101      	movs	r1, #1
 8004e70:	430a      	orrs	r2, r1
 8004e72:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e74:	f7fd fe70 	bl	8002b58 <HAL_GetTick>
 8004e78:	0003      	movs	r3, r0
 8004e7a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e7c:	e008      	b.n	8004e90 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e7e:	f7fd fe6b 	bl	8002b58 <HAL_GetTick>
 8004e82:	0002      	movs	r2, r0
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d901      	bls.n	8004e90 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e177      	b.n	8005180 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e90:	4ba0      	ldr	r3, [pc, #640]	; (8005114 <HAL_RCC_OscConfig+0x680>)
 8004e92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e94:	2202      	movs	r2, #2
 8004e96:	4013      	ands	r3, r2
 8004e98:	d0f1      	beq.n	8004e7e <HAL_RCC_OscConfig+0x3ea>
 8004e9a:	e018      	b.n	8004ece <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e9c:	4b9d      	ldr	r3, [pc, #628]	; (8005114 <HAL_RCC_OscConfig+0x680>)
 8004e9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ea0:	4b9c      	ldr	r3, [pc, #624]	; (8005114 <HAL_RCC_OscConfig+0x680>)
 8004ea2:	2101      	movs	r1, #1
 8004ea4:	438a      	bics	r2, r1
 8004ea6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ea8:	f7fd fe56 	bl	8002b58 <HAL_GetTick>
 8004eac:	0003      	movs	r3, r0
 8004eae:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004eb0:	e008      	b.n	8004ec4 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004eb2:	f7fd fe51 	bl	8002b58 <HAL_GetTick>
 8004eb6:	0002      	movs	r2, r0
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d901      	bls.n	8004ec4 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e15d      	b.n	8005180 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004ec4:	4b93      	ldr	r3, [pc, #588]	; (8005114 <HAL_RCC_OscConfig+0x680>)
 8004ec6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ec8:	2202      	movs	r2, #2
 8004eca:	4013      	ands	r3, r2
 8004ecc:	d1f1      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2204      	movs	r2, #4
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	d100      	bne.n	8004eda <HAL_RCC_OscConfig+0x446>
 8004ed8:	e0ae      	b.n	8005038 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004eda:	2023      	movs	r0, #35	; 0x23
 8004edc:	183b      	adds	r3, r7, r0
 8004ede:	2200      	movs	r2, #0
 8004ee0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ee2:	4b8c      	ldr	r3, [pc, #560]	; (8005114 <HAL_RCC_OscConfig+0x680>)
 8004ee4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ee6:	2380      	movs	r3, #128	; 0x80
 8004ee8:	055b      	lsls	r3, r3, #21
 8004eea:	4013      	ands	r3, r2
 8004eec:	d109      	bne.n	8004f02 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eee:	4b89      	ldr	r3, [pc, #548]	; (8005114 <HAL_RCC_OscConfig+0x680>)
 8004ef0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ef2:	4b88      	ldr	r3, [pc, #544]	; (8005114 <HAL_RCC_OscConfig+0x680>)
 8004ef4:	2180      	movs	r1, #128	; 0x80
 8004ef6:	0549      	lsls	r1, r1, #21
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004efc:	183b      	adds	r3, r7, r0
 8004efe:	2201      	movs	r2, #1
 8004f00:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f02:	4b87      	ldr	r3, [pc, #540]	; (8005120 <HAL_RCC_OscConfig+0x68c>)
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	2380      	movs	r3, #128	; 0x80
 8004f08:	005b      	lsls	r3, r3, #1
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	d11a      	bne.n	8004f44 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f0e:	4b84      	ldr	r3, [pc, #528]	; (8005120 <HAL_RCC_OscConfig+0x68c>)
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	4b83      	ldr	r3, [pc, #524]	; (8005120 <HAL_RCC_OscConfig+0x68c>)
 8004f14:	2180      	movs	r1, #128	; 0x80
 8004f16:	0049      	lsls	r1, r1, #1
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f1c:	f7fd fe1c 	bl	8002b58 <HAL_GetTick>
 8004f20:	0003      	movs	r3, r0
 8004f22:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f24:	e008      	b.n	8004f38 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f26:	f7fd fe17 	bl	8002b58 <HAL_GetTick>
 8004f2a:	0002      	movs	r2, r0
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	2b64      	cmp	r3, #100	; 0x64
 8004f32:	d901      	bls.n	8004f38 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e123      	b.n	8005180 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f38:	4b79      	ldr	r3, [pc, #484]	; (8005120 <HAL_RCC_OscConfig+0x68c>)
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	2380      	movs	r3, #128	; 0x80
 8004f3e:	005b      	lsls	r3, r3, #1
 8004f40:	4013      	ands	r3, r2
 8004f42:	d0f0      	beq.n	8004f26 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	689a      	ldr	r2, [r3, #8]
 8004f48:	2380      	movs	r3, #128	; 0x80
 8004f4a:	005b      	lsls	r3, r3, #1
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d107      	bne.n	8004f60 <HAL_RCC_OscConfig+0x4cc>
 8004f50:	4b70      	ldr	r3, [pc, #448]	; (8005114 <HAL_RCC_OscConfig+0x680>)
 8004f52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f54:	4b6f      	ldr	r3, [pc, #444]	; (8005114 <HAL_RCC_OscConfig+0x680>)
 8004f56:	2180      	movs	r1, #128	; 0x80
 8004f58:	0049      	lsls	r1, r1, #1
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	651a      	str	r2, [r3, #80]	; 0x50
 8004f5e:	e031      	b.n	8004fc4 <HAL_RCC_OscConfig+0x530>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d10c      	bne.n	8004f82 <HAL_RCC_OscConfig+0x4ee>
 8004f68:	4b6a      	ldr	r3, [pc, #424]	; (8005114 <HAL_RCC_OscConfig+0x680>)
 8004f6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f6c:	4b69      	ldr	r3, [pc, #420]	; (8005114 <HAL_RCC_OscConfig+0x680>)
 8004f6e:	496b      	ldr	r1, [pc, #428]	; (800511c <HAL_RCC_OscConfig+0x688>)
 8004f70:	400a      	ands	r2, r1
 8004f72:	651a      	str	r2, [r3, #80]	; 0x50
 8004f74:	4b67      	ldr	r3, [pc, #412]	; (8005114 <HAL_RCC_OscConfig+0x680>)
 8004f76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f78:	4b66      	ldr	r3, [pc, #408]	; (8005114 <HAL_RCC_OscConfig+0x680>)
 8004f7a:	496a      	ldr	r1, [pc, #424]	; (8005124 <HAL_RCC_OscConfig+0x690>)
 8004f7c:	400a      	ands	r2, r1
 8004f7e:	651a      	str	r2, [r3, #80]	; 0x50
 8004f80:	e020      	b.n	8004fc4 <HAL_RCC_OscConfig+0x530>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	689a      	ldr	r2, [r3, #8]
 8004f86:	23a0      	movs	r3, #160	; 0xa0
 8004f88:	00db      	lsls	r3, r3, #3
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d10e      	bne.n	8004fac <HAL_RCC_OscConfig+0x518>
 8004f8e:	4b61      	ldr	r3, [pc, #388]	; (8005114 <HAL_RCC_OscConfig+0x680>)
 8004f90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f92:	4b60      	ldr	r3, [pc, #384]	; (8005114 <HAL_RCC_OscConfig+0x680>)
 8004f94:	2180      	movs	r1, #128	; 0x80
 8004f96:	00c9      	lsls	r1, r1, #3
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	651a      	str	r2, [r3, #80]	; 0x50
 8004f9c:	4b5d      	ldr	r3, [pc, #372]	; (8005114 <HAL_RCC_OscConfig+0x680>)
 8004f9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004fa0:	4b5c      	ldr	r3, [pc, #368]	; (8005114 <HAL_RCC_OscConfig+0x680>)
 8004fa2:	2180      	movs	r1, #128	; 0x80
 8004fa4:	0049      	lsls	r1, r1, #1
 8004fa6:	430a      	orrs	r2, r1
 8004fa8:	651a      	str	r2, [r3, #80]	; 0x50
 8004faa:	e00b      	b.n	8004fc4 <HAL_RCC_OscConfig+0x530>
 8004fac:	4b59      	ldr	r3, [pc, #356]	; (8005114 <HAL_RCC_OscConfig+0x680>)
 8004fae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004fb0:	4b58      	ldr	r3, [pc, #352]	; (8005114 <HAL_RCC_OscConfig+0x680>)
 8004fb2:	495a      	ldr	r1, [pc, #360]	; (800511c <HAL_RCC_OscConfig+0x688>)
 8004fb4:	400a      	ands	r2, r1
 8004fb6:	651a      	str	r2, [r3, #80]	; 0x50
 8004fb8:	4b56      	ldr	r3, [pc, #344]	; (8005114 <HAL_RCC_OscConfig+0x680>)
 8004fba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004fbc:	4b55      	ldr	r3, [pc, #340]	; (8005114 <HAL_RCC_OscConfig+0x680>)
 8004fbe:	4959      	ldr	r1, [pc, #356]	; (8005124 <HAL_RCC_OscConfig+0x690>)
 8004fc0:	400a      	ands	r2, r1
 8004fc2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d015      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fcc:	f7fd fdc4 	bl	8002b58 <HAL_GetTick>
 8004fd0:	0003      	movs	r3, r0
 8004fd2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fd4:	e009      	b.n	8004fea <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fd6:	f7fd fdbf 	bl	8002b58 <HAL_GetTick>
 8004fda:	0002      	movs	r2, r0
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	4a51      	ldr	r2, [pc, #324]	; (8005128 <HAL_RCC_OscConfig+0x694>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d901      	bls.n	8004fea <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e0ca      	b.n	8005180 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fea:	4b4a      	ldr	r3, [pc, #296]	; (8005114 <HAL_RCC_OscConfig+0x680>)
 8004fec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004fee:	2380      	movs	r3, #128	; 0x80
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	d0ef      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x542>
 8004ff6:	e014      	b.n	8005022 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ff8:	f7fd fdae 	bl	8002b58 <HAL_GetTick>
 8004ffc:	0003      	movs	r3, r0
 8004ffe:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005000:	e009      	b.n	8005016 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005002:	f7fd fda9 	bl	8002b58 <HAL_GetTick>
 8005006:	0002      	movs	r2, r0
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	4a46      	ldr	r2, [pc, #280]	; (8005128 <HAL_RCC_OscConfig+0x694>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d901      	bls.n	8005016 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e0b4      	b.n	8005180 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005016:	4b3f      	ldr	r3, [pc, #252]	; (8005114 <HAL_RCC_OscConfig+0x680>)
 8005018:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800501a:	2380      	movs	r3, #128	; 0x80
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	4013      	ands	r3, r2
 8005020:	d1ef      	bne.n	8005002 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005022:	2323      	movs	r3, #35	; 0x23
 8005024:	18fb      	adds	r3, r7, r3
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d105      	bne.n	8005038 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800502c:	4b39      	ldr	r3, [pc, #228]	; (8005114 <HAL_RCC_OscConfig+0x680>)
 800502e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005030:	4b38      	ldr	r3, [pc, #224]	; (8005114 <HAL_RCC_OscConfig+0x680>)
 8005032:	493e      	ldr	r1, [pc, #248]	; (800512c <HAL_RCC_OscConfig+0x698>)
 8005034:	400a      	ands	r2, r1
 8005036:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503c:	2b00      	cmp	r3, #0
 800503e:	d100      	bne.n	8005042 <HAL_RCC_OscConfig+0x5ae>
 8005040:	e09d      	b.n	800517e <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	2b0c      	cmp	r3, #12
 8005046:	d100      	bne.n	800504a <HAL_RCC_OscConfig+0x5b6>
 8005048:	e076      	b.n	8005138 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504e:	2b02      	cmp	r3, #2
 8005050:	d145      	bne.n	80050de <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005052:	4b30      	ldr	r3, [pc, #192]	; (8005114 <HAL_RCC_OscConfig+0x680>)
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	4b2f      	ldr	r3, [pc, #188]	; (8005114 <HAL_RCC_OscConfig+0x680>)
 8005058:	4935      	ldr	r1, [pc, #212]	; (8005130 <HAL_RCC_OscConfig+0x69c>)
 800505a:	400a      	ands	r2, r1
 800505c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800505e:	f7fd fd7b 	bl	8002b58 <HAL_GetTick>
 8005062:	0003      	movs	r3, r0
 8005064:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005066:	e008      	b.n	800507a <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005068:	f7fd fd76 	bl	8002b58 <HAL_GetTick>
 800506c:	0002      	movs	r2, r0
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	2b02      	cmp	r3, #2
 8005074:	d901      	bls.n	800507a <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e082      	b.n	8005180 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800507a:	4b26      	ldr	r3, [pc, #152]	; (8005114 <HAL_RCC_OscConfig+0x680>)
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	2380      	movs	r3, #128	; 0x80
 8005080:	049b      	lsls	r3, r3, #18
 8005082:	4013      	ands	r3, r2
 8005084:	d1f0      	bne.n	8005068 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005086:	4b23      	ldr	r3, [pc, #140]	; (8005114 <HAL_RCC_OscConfig+0x680>)
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	4a2a      	ldr	r2, [pc, #168]	; (8005134 <HAL_RCC_OscConfig+0x6a0>)
 800508c:	4013      	ands	r3, r2
 800508e:	0019      	movs	r1, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005098:	431a      	orrs	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509e:	431a      	orrs	r2, r3
 80050a0:	4b1c      	ldr	r3, [pc, #112]	; (8005114 <HAL_RCC_OscConfig+0x680>)
 80050a2:	430a      	orrs	r2, r1
 80050a4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050a6:	4b1b      	ldr	r3, [pc, #108]	; (8005114 <HAL_RCC_OscConfig+0x680>)
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	4b1a      	ldr	r3, [pc, #104]	; (8005114 <HAL_RCC_OscConfig+0x680>)
 80050ac:	2180      	movs	r1, #128	; 0x80
 80050ae:	0449      	lsls	r1, r1, #17
 80050b0:	430a      	orrs	r2, r1
 80050b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050b4:	f7fd fd50 	bl	8002b58 <HAL_GetTick>
 80050b8:	0003      	movs	r3, r0
 80050ba:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80050bc:	e008      	b.n	80050d0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050be:	f7fd fd4b 	bl	8002b58 <HAL_GetTick>
 80050c2:	0002      	movs	r2, r0
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d901      	bls.n	80050d0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e057      	b.n	8005180 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80050d0:	4b10      	ldr	r3, [pc, #64]	; (8005114 <HAL_RCC_OscConfig+0x680>)
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	2380      	movs	r3, #128	; 0x80
 80050d6:	049b      	lsls	r3, r3, #18
 80050d8:	4013      	ands	r3, r2
 80050da:	d0f0      	beq.n	80050be <HAL_RCC_OscConfig+0x62a>
 80050dc:	e04f      	b.n	800517e <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050de:	4b0d      	ldr	r3, [pc, #52]	; (8005114 <HAL_RCC_OscConfig+0x680>)
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	4b0c      	ldr	r3, [pc, #48]	; (8005114 <HAL_RCC_OscConfig+0x680>)
 80050e4:	4912      	ldr	r1, [pc, #72]	; (8005130 <HAL_RCC_OscConfig+0x69c>)
 80050e6:	400a      	ands	r2, r1
 80050e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ea:	f7fd fd35 	bl	8002b58 <HAL_GetTick>
 80050ee:	0003      	movs	r3, r0
 80050f0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80050f2:	e008      	b.n	8005106 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050f4:	f7fd fd30 	bl	8002b58 <HAL_GetTick>
 80050f8:	0002      	movs	r2, r0
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d901      	bls.n	8005106 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e03c      	b.n	8005180 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005106:	4b03      	ldr	r3, [pc, #12]	; (8005114 <HAL_RCC_OscConfig+0x680>)
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	2380      	movs	r3, #128	; 0x80
 800510c:	049b      	lsls	r3, r3, #18
 800510e:	4013      	ands	r3, r2
 8005110:	d1f0      	bne.n	80050f4 <HAL_RCC_OscConfig+0x660>
 8005112:	e034      	b.n	800517e <HAL_RCC_OscConfig+0x6ea>
 8005114:	40021000 	.word	0x40021000
 8005118:	ffff1fff 	.word	0xffff1fff
 800511c:	fffffeff 	.word	0xfffffeff
 8005120:	40007000 	.word	0x40007000
 8005124:	fffffbff 	.word	0xfffffbff
 8005128:	00001388 	.word	0x00001388
 800512c:	efffffff 	.word	0xefffffff
 8005130:	feffffff 	.word	0xfeffffff
 8005134:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513c:	2b01      	cmp	r3, #1
 800513e:	d101      	bne.n	8005144 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e01d      	b.n	8005180 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005144:	4b10      	ldr	r3, [pc, #64]	; (8005188 <HAL_RCC_OscConfig+0x6f4>)
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800514a:	69ba      	ldr	r2, [r7, #24]
 800514c:	2380      	movs	r3, #128	; 0x80
 800514e:	025b      	lsls	r3, r3, #9
 8005150:	401a      	ands	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005156:	429a      	cmp	r2, r3
 8005158:	d10f      	bne.n	800517a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800515a:	69ba      	ldr	r2, [r7, #24]
 800515c:	23f0      	movs	r3, #240	; 0xf0
 800515e:	039b      	lsls	r3, r3, #14
 8005160:	401a      	ands	r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005166:	429a      	cmp	r2, r3
 8005168:	d107      	bne.n	800517a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800516a:	69ba      	ldr	r2, [r7, #24]
 800516c:	23c0      	movs	r3, #192	; 0xc0
 800516e:	041b      	lsls	r3, r3, #16
 8005170:	401a      	ands	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005176:	429a      	cmp	r2, r3
 8005178:	d001      	beq.n	800517e <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e000      	b.n	8005180 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	0018      	movs	r0, r3
 8005182:	46bd      	mov	sp, r7
 8005184:	b00a      	add	sp, #40	; 0x28
 8005186:	bdb0      	pop	{r4, r5, r7, pc}
 8005188:	40021000 	.word	0x40021000

0800518c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800518c:	b5b0      	push	{r4, r5, r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d101      	bne.n	80051a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e128      	b.n	80053f2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051a0:	4b96      	ldr	r3, [pc, #600]	; (80053fc <HAL_RCC_ClockConfig+0x270>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2201      	movs	r2, #1
 80051a6:	4013      	ands	r3, r2
 80051a8:	683a      	ldr	r2, [r7, #0]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d91e      	bls.n	80051ec <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ae:	4b93      	ldr	r3, [pc, #588]	; (80053fc <HAL_RCC_ClockConfig+0x270>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2201      	movs	r2, #1
 80051b4:	4393      	bics	r3, r2
 80051b6:	0019      	movs	r1, r3
 80051b8:	4b90      	ldr	r3, [pc, #576]	; (80053fc <HAL_RCC_ClockConfig+0x270>)
 80051ba:	683a      	ldr	r2, [r7, #0]
 80051bc:	430a      	orrs	r2, r1
 80051be:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80051c0:	f7fd fcca 	bl	8002b58 <HAL_GetTick>
 80051c4:	0003      	movs	r3, r0
 80051c6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051c8:	e009      	b.n	80051de <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051ca:	f7fd fcc5 	bl	8002b58 <HAL_GetTick>
 80051ce:	0002      	movs	r2, r0
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	4a8a      	ldr	r2, [pc, #552]	; (8005400 <HAL_RCC_ClockConfig+0x274>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d901      	bls.n	80051de <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e109      	b.n	80053f2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051de:	4b87      	ldr	r3, [pc, #540]	; (80053fc <HAL_RCC_ClockConfig+0x270>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2201      	movs	r2, #1
 80051e4:	4013      	ands	r3, r2
 80051e6:	683a      	ldr	r2, [r7, #0]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d1ee      	bne.n	80051ca <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2202      	movs	r2, #2
 80051f2:	4013      	ands	r3, r2
 80051f4:	d009      	beq.n	800520a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051f6:	4b83      	ldr	r3, [pc, #524]	; (8005404 <HAL_RCC_ClockConfig+0x278>)
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	22f0      	movs	r2, #240	; 0xf0
 80051fc:	4393      	bics	r3, r2
 80051fe:	0019      	movs	r1, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	689a      	ldr	r2, [r3, #8]
 8005204:	4b7f      	ldr	r3, [pc, #508]	; (8005404 <HAL_RCC_ClockConfig+0x278>)
 8005206:	430a      	orrs	r2, r1
 8005208:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2201      	movs	r2, #1
 8005210:	4013      	ands	r3, r2
 8005212:	d100      	bne.n	8005216 <HAL_RCC_ClockConfig+0x8a>
 8005214:	e089      	b.n	800532a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	2b02      	cmp	r3, #2
 800521c:	d107      	bne.n	800522e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800521e:	4b79      	ldr	r3, [pc, #484]	; (8005404 <HAL_RCC_ClockConfig+0x278>)
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	2380      	movs	r3, #128	; 0x80
 8005224:	029b      	lsls	r3, r3, #10
 8005226:	4013      	ands	r3, r2
 8005228:	d120      	bne.n	800526c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e0e1      	b.n	80053f2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	2b03      	cmp	r3, #3
 8005234:	d107      	bne.n	8005246 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005236:	4b73      	ldr	r3, [pc, #460]	; (8005404 <HAL_RCC_ClockConfig+0x278>)
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	2380      	movs	r3, #128	; 0x80
 800523c:	049b      	lsls	r3, r3, #18
 800523e:	4013      	ands	r3, r2
 8005240:	d114      	bne.n	800526c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e0d5      	b.n	80053f2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d106      	bne.n	800525c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800524e:	4b6d      	ldr	r3, [pc, #436]	; (8005404 <HAL_RCC_ClockConfig+0x278>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2204      	movs	r2, #4
 8005254:	4013      	ands	r3, r2
 8005256:	d109      	bne.n	800526c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e0ca      	b.n	80053f2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800525c:	4b69      	ldr	r3, [pc, #420]	; (8005404 <HAL_RCC_ClockConfig+0x278>)
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	2380      	movs	r3, #128	; 0x80
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	4013      	ands	r3, r2
 8005266:	d101      	bne.n	800526c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e0c2      	b.n	80053f2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800526c:	4b65      	ldr	r3, [pc, #404]	; (8005404 <HAL_RCC_ClockConfig+0x278>)
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	2203      	movs	r2, #3
 8005272:	4393      	bics	r3, r2
 8005274:	0019      	movs	r1, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685a      	ldr	r2, [r3, #4]
 800527a:	4b62      	ldr	r3, [pc, #392]	; (8005404 <HAL_RCC_ClockConfig+0x278>)
 800527c:	430a      	orrs	r2, r1
 800527e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005280:	f7fd fc6a 	bl	8002b58 <HAL_GetTick>
 8005284:	0003      	movs	r3, r0
 8005286:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	2b02      	cmp	r3, #2
 800528e:	d111      	bne.n	80052b4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005290:	e009      	b.n	80052a6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005292:	f7fd fc61 	bl	8002b58 <HAL_GetTick>
 8005296:	0002      	movs	r2, r0
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	4a58      	ldr	r2, [pc, #352]	; (8005400 <HAL_RCC_ClockConfig+0x274>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d901      	bls.n	80052a6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e0a5      	b.n	80053f2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80052a6:	4b57      	ldr	r3, [pc, #348]	; (8005404 <HAL_RCC_ClockConfig+0x278>)
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	220c      	movs	r2, #12
 80052ac:	4013      	ands	r3, r2
 80052ae:	2b08      	cmp	r3, #8
 80052b0:	d1ef      	bne.n	8005292 <HAL_RCC_ClockConfig+0x106>
 80052b2:	e03a      	b.n	800532a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	2b03      	cmp	r3, #3
 80052ba:	d111      	bne.n	80052e0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052bc:	e009      	b.n	80052d2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052be:	f7fd fc4b 	bl	8002b58 <HAL_GetTick>
 80052c2:	0002      	movs	r2, r0
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	4a4d      	ldr	r2, [pc, #308]	; (8005400 <HAL_RCC_ClockConfig+0x274>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d901      	bls.n	80052d2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e08f      	b.n	80053f2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052d2:	4b4c      	ldr	r3, [pc, #304]	; (8005404 <HAL_RCC_ClockConfig+0x278>)
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	220c      	movs	r2, #12
 80052d8:	4013      	ands	r3, r2
 80052da:	2b0c      	cmp	r3, #12
 80052dc:	d1ef      	bne.n	80052be <HAL_RCC_ClockConfig+0x132>
 80052de:	e024      	b.n	800532a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d11b      	bne.n	8005320 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80052e8:	e009      	b.n	80052fe <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052ea:	f7fd fc35 	bl	8002b58 <HAL_GetTick>
 80052ee:	0002      	movs	r2, r0
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	4a42      	ldr	r2, [pc, #264]	; (8005400 <HAL_RCC_ClockConfig+0x274>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d901      	bls.n	80052fe <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e079      	b.n	80053f2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80052fe:	4b41      	ldr	r3, [pc, #260]	; (8005404 <HAL_RCC_ClockConfig+0x278>)
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	220c      	movs	r2, #12
 8005304:	4013      	ands	r3, r2
 8005306:	2b04      	cmp	r3, #4
 8005308:	d1ef      	bne.n	80052ea <HAL_RCC_ClockConfig+0x15e>
 800530a:	e00e      	b.n	800532a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800530c:	f7fd fc24 	bl	8002b58 <HAL_GetTick>
 8005310:	0002      	movs	r2, r0
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	4a3a      	ldr	r2, [pc, #232]	; (8005400 <HAL_RCC_ClockConfig+0x274>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d901      	bls.n	8005320 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e068      	b.n	80053f2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005320:	4b38      	ldr	r3, [pc, #224]	; (8005404 <HAL_RCC_ClockConfig+0x278>)
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	220c      	movs	r2, #12
 8005326:	4013      	ands	r3, r2
 8005328:	d1f0      	bne.n	800530c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800532a:	4b34      	ldr	r3, [pc, #208]	; (80053fc <HAL_RCC_ClockConfig+0x270>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2201      	movs	r2, #1
 8005330:	4013      	ands	r3, r2
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	429a      	cmp	r2, r3
 8005336:	d21e      	bcs.n	8005376 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005338:	4b30      	ldr	r3, [pc, #192]	; (80053fc <HAL_RCC_ClockConfig+0x270>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2201      	movs	r2, #1
 800533e:	4393      	bics	r3, r2
 8005340:	0019      	movs	r1, r3
 8005342:	4b2e      	ldr	r3, [pc, #184]	; (80053fc <HAL_RCC_ClockConfig+0x270>)
 8005344:	683a      	ldr	r2, [r7, #0]
 8005346:	430a      	orrs	r2, r1
 8005348:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800534a:	f7fd fc05 	bl	8002b58 <HAL_GetTick>
 800534e:	0003      	movs	r3, r0
 8005350:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005352:	e009      	b.n	8005368 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005354:	f7fd fc00 	bl	8002b58 <HAL_GetTick>
 8005358:	0002      	movs	r2, r0
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	4a28      	ldr	r2, [pc, #160]	; (8005400 <HAL_RCC_ClockConfig+0x274>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d901      	bls.n	8005368 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e044      	b.n	80053f2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005368:	4b24      	ldr	r3, [pc, #144]	; (80053fc <HAL_RCC_ClockConfig+0x270>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2201      	movs	r2, #1
 800536e:	4013      	ands	r3, r2
 8005370:	683a      	ldr	r2, [r7, #0]
 8005372:	429a      	cmp	r2, r3
 8005374:	d1ee      	bne.n	8005354 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2204      	movs	r2, #4
 800537c:	4013      	ands	r3, r2
 800537e:	d009      	beq.n	8005394 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005380:	4b20      	ldr	r3, [pc, #128]	; (8005404 <HAL_RCC_ClockConfig+0x278>)
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	4a20      	ldr	r2, [pc, #128]	; (8005408 <HAL_RCC_ClockConfig+0x27c>)
 8005386:	4013      	ands	r3, r2
 8005388:	0019      	movs	r1, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	68da      	ldr	r2, [r3, #12]
 800538e:	4b1d      	ldr	r3, [pc, #116]	; (8005404 <HAL_RCC_ClockConfig+0x278>)
 8005390:	430a      	orrs	r2, r1
 8005392:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2208      	movs	r2, #8
 800539a:	4013      	ands	r3, r2
 800539c:	d00a      	beq.n	80053b4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800539e:	4b19      	ldr	r3, [pc, #100]	; (8005404 <HAL_RCC_ClockConfig+0x278>)
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	4a1a      	ldr	r2, [pc, #104]	; (800540c <HAL_RCC_ClockConfig+0x280>)
 80053a4:	4013      	ands	r3, r2
 80053a6:	0019      	movs	r1, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	00da      	lsls	r2, r3, #3
 80053ae:	4b15      	ldr	r3, [pc, #84]	; (8005404 <HAL_RCC_ClockConfig+0x278>)
 80053b0:	430a      	orrs	r2, r1
 80053b2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80053b4:	f000 f832 	bl	800541c <HAL_RCC_GetSysClockFreq>
 80053b8:	0001      	movs	r1, r0
 80053ba:	4b12      	ldr	r3, [pc, #72]	; (8005404 <HAL_RCC_ClockConfig+0x278>)
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	091b      	lsrs	r3, r3, #4
 80053c0:	220f      	movs	r2, #15
 80053c2:	4013      	ands	r3, r2
 80053c4:	4a12      	ldr	r2, [pc, #72]	; (8005410 <HAL_RCC_ClockConfig+0x284>)
 80053c6:	5cd3      	ldrb	r3, [r2, r3]
 80053c8:	000a      	movs	r2, r1
 80053ca:	40da      	lsrs	r2, r3
 80053cc:	4b11      	ldr	r3, [pc, #68]	; (8005414 <HAL_RCC_ClockConfig+0x288>)
 80053ce:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80053d0:	4b11      	ldr	r3, [pc, #68]	; (8005418 <HAL_RCC_ClockConfig+0x28c>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	250b      	movs	r5, #11
 80053d6:	197c      	adds	r4, r7, r5
 80053d8:	0018      	movs	r0, r3
 80053da:	f7fd fb77 	bl	8002acc <HAL_InitTick>
 80053de:	0003      	movs	r3, r0
 80053e0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80053e2:	197b      	adds	r3, r7, r5
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d002      	beq.n	80053f0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80053ea:	197b      	adds	r3, r7, r5
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	e000      	b.n	80053f2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	0018      	movs	r0, r3
 80053f4:	46bd      	mov	sp, r7
 80053f6:	b004      	add	sp, #16
 80053f8:	bdb0      	pop	{r4, r5, r7, pc}
 80053fa:	46c0      	nop			; (mov r8, r8)
 80053fc:	40022000 	.word	0x40022000
 8005400:	00001388 	.word	0x00001388
 8005404:	40021000 	.word	0x40021000
 8005408:	fffff8ff 	.word	0xfffff8ff
 800540c:	ffffc7ff 	.word	0xffffc7ff
 8005410:	08006870 	.word	0x08006870
 8005414:	20000004 	.word	0x20000004
 8005418:	20000008 	.word	0x20000008

0800541c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800541c:	b5b0      	push	{r4, r5, r7, lr}
 800541e:	b08e      	sub	sp, #56	; 0x38
 8005420:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005422:	4b4c      	ldr	r3, [pc, #304]	; (8005554 <HAL_RCC_GetSysClockFreq+0x138>)
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005428:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800542a:	230c      	movs	r3, #12
 800542c:	4013      	ands	r3, r2
 800542e:	2b0c      	cmp	r3, #12
 8005430:	d014      	beq.n	800545c <HAL_RCC_GetSysClockFreq+0x40>
 8005432:	d900      	bls.n	8005436 <HAL_RCC_GetSysClockFreq+0x1a>
 8005434:	e07b      	b.n	800552e <HAL_RCC_GetSysClockFreq+0x112>
 8005436:	2b04      	cmp	r3, #4
 8005438:	d002      	beq.n	8005440 <HAL_RCC_GetSysClockFreq+0x24>
 800543a:	2b08      	cmp	r3, #8
 800543c:	d00b      	beq.n	8005456 <HAL_RCC_GetSysClockFreq+0x3a>
 800543e:	e076      	b.n	800552e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005440:	4b44      	ldr	r3, [pc, #272]	; (8005554 <HAL_RCC_GetSysClockFreq+0x138>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2210      	movs	r2, #16
 8005446:	4013      	ands	r3, r2
 8005448:	d002      	beq.n	8005450 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800544a:	4b43      	ldr	r3, [pc, #268]	; (8005558 <HAL_RCC_GetSysClockFreq+0x13c>)
 800544c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800544e:	e07c      	b.n	800554a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8005450:	4b42      	ldr	r3, [pc, #264]	; (800555c <HAL_RCC_GetSysClockFreq+0x140>)
 8005452:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005454:	e079      	b.n	800554a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005456:	4b42      	ldr	r3, [pc, #264]	; (8005560 <HAL_RCC_GetSysClockFreq+0x144>)
 8005458:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800545a:	e076      	b.n	800554a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800545c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800545e:	0c9a      	lsrs	r2, r3, #18
 8005460:	230f      	movs	r3, #15
 8005462:	401a      	ands	r2, r3
 8005464:	4b3f      	ldr	r3, [pc, #252]	; (8005564 <HAL_RCC_GetSysClockFreq+0x148>)
 8005466:	5c9b      	ldrb	r3, [r3, r2]
 8005468:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800546a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800546c:	0d9a      	lsrs	r2, r3, #22
 800546e:	2303      	movs	r3, #3
 8005470:	4013      	ands	r3, r2
 8005472:	3301      	adds	r3, #1
 8005474:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005476:	4b37      	ldr	r3, [pc, #220]	; (8005554 <HAL_RCC_GetSysClockFreq+0x138>)
 8005478:	68da      	ldr	r2, [r3, #12]
 800547a:	2380      	movs	r3, #128	; 0x80
 800547c:	025b      	lsls	r3, r3, #9
 800547e:	4013      	ands	r3, r2
 8005480:	d01a      	beq.n	80054b8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005484:	61bb      	str	r3, [r7, #24]
 8005486:	2300      	movs	r3, #0
 8005488:	61fb      	str	r3, [r7, #28]
 800548a:	4a35      	ldr	r2, [pc, #212]	; (8005560 <HAL_RCC_GetSysClockFreq+0x144>)
 800548c:	2300      	movs	r3, #0
 800548e:	69b8      	ldr	r0, [r7, #24]
 8005490:	69f9      	ldr	r1, [r7, #28]
 8005492:	f7fa feef 	bl	8000274 <__aeabi_lmul>
 8005496:	0002      	movs	r2, r0
 8005498:	000b      	movs	r3, r1
 800549a:	0010      	movs	r0, r2
 800549c:	0019      	movs	r1, r3
 800549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a0:	613b      	str	r3, [r7, #16]
 80054a2:	2300      	movs	r3, #0
 80054a4:	617b      	str	r3, [r7, #20]
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	f7fa fec3 	bl	8000234 <__aeabi_uldivmod>
 80054ae:	0002      	movs	r2, r0
 80054b0:	000b      	movs	r3, r1
 80054b2:	0013      	movs	r3, r2
 80054b4:	637b      	str	r3, [r7, #52]	; 0x34
 80054b6:	e037      	b.n	8005528 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80054b8:	4b26      	ldr	r3, [pc, #152]	; (8005554 <HAL_RCC_GetSysClockFreq+0x138>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2210      	movs	r2, #16
 80054be:	4013      	ands	r3, r2
 80054c0:	d01a      	beq.n	80054f8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80054c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c4:	60bb      	str	r3, [r7, #8]
 80054c6:	2300      	movs	r3, #0
 80054c8:	60fb      	str	r3, [r7, #12]
 80054ca:	4a23      	ldr	r2, [pc, #140]	; (8005558 <HAL_RCC_GetSysClockFreq+0x13c>)
 80054cc:	2300      	movs	r3, #0
 80054ce:	68b8      	ldr	r0, [r7, #8]
 80054d0:	68f9      	ldr	r1, [r7, #12]
 80054d2:	f7fa fecf 	bl	8000274 <__aeabi_lmul>
 80054d6:	0002      	movs	r2, r0
 80054d8:	000b      	movs	r3, r1
 80054da:	0010      	movs	r0, r2
 80054dc:	0019      	movs	r1, r3
 80054de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e0:	603b      	str	r3, [r7, #0]
 80054e2:	2300      	movs	r3, #0
 80054e4:	607b      	str	r3, [r7, #4]
 80054e6:	683a      	ldr	r2, [r7, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f7fa fea3 	bl	8000234 <__aeabi_uldivmod>
 80054ee:	0002      	movs	r2, r0
 80054f0:	000b      	movs	r3, r1
 80054f2:	0013      	movs	r3, r2
 80054f4:	637b      	str	r3, [r7, #52]	; 0x34
 80054f6:	e017      	b.n	8005528 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80054f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fa:	0018      	movs	r0, r3
 80054fc:	2300      	movs	r3, #0
 80054fe:	0019      	movs	r1, r3
 8005500:	4a16      	ldr	r2, [pc, #88]	; (800555c <HAL_RCC_GetSysClockFreq+0x140>)
 8005502:	2300      	movs	r3, #0
 8005504:	f7fa feb6 	bl	8000274 <__aeabi_lmul>
 8005508:	0002      	movs	r2, r0
 800550a:	000b      	movs	r3, r1
 800550c:	0010      	movs	r0, r2
 800550e:	0019      	movs	r1, r3
 8005510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005512:	001c      	movs	r4, r3
 8005514:	2300      	movs	r3, #0
 8005516:	001d      	movs	r5, r3
 8005518:	0022      	movs	r2, r4
 800551a:	002b      	movs	r3, r5
 800551c:	f7fa fe8a 	bl	8000234 <__aeabi_uldivmod>
 8005520:	0002      	movs	r2, r0
 8005522:	000b      	movs	r3, r1
 8005524:	0013      	movs	r3, r2
 8005526:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8005528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800552a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800552c:	e00d      	b.n	800554a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800552e:	4b09      	ldr	r3, [pc, #36]	; (8005554 <HAL_RCC_GetSysClockFreq+0x138>)
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	0b5b      	lsrs	r3, r3, #13
 8005534:	2207      	movs	r2, #7
 8005536:	4013      	ands	r3, r2
 8005538:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800553a:	6a3b      	ldr	r3, [r7, #32]
 800553c:	3301      	adds	r3, #1
 800553e:	2280      	movs	r2, #128	; 0x80
 8005540:	0212      	lsls	r2, r2, #8
 8005542:	409a      	lsls	r2, r3
 8005544:	0013      	movs	r3, r2
 8005546:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005548:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800554a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800554c:	0018      	movs	r0, r3
 800554e:	46bd      	mov	sp, r7
 8005550:	b00e      	add	sp, #56	; 0x38
 8005552:	bdb0      	pop	{r4, r5, r7, pc}
 8005554:	40021000 	.word	0x40021000
 8005558:	003d0900 	.word	0x003d0900
 800555c:	00f42400 	.word	0x00f42400
 8005560:	007a1200 	.word	0x007a1200
 8005564:	08006880 	.word	0x08006880

08005568 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b086      	sub	sp, #24
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005570:	2017      	movs	r0, #23
 8005572:	183b      	adds	r3, r7, r0
 8005574:	2200      	movs	r2, #0
 8005576:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2220      	movs	r2, #32
 800557e:	4013      	ands	r3, r2
 8005580:	d100      	bne.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8005582:	e0c2      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005584:	4b81      	ldr	r3, [pc, #516]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005586:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005588:	2380      	movs	r3, #128	; 0x80
 800558a:	055b      	lsls	r3, r3, #21
 800558c:	4013      	ands	r3, r2
 800558e:	d109      	bne.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005590:	4b7e      	ldr	r3, [pc, #504]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005592:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005594:	4b7d      	ldr	r3, [pc, #500]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005596:	2180      	movs	r1, #128	; 0x80
 8005598:	0549      	lsls	r1, r1, #21
 800559a:	430a      	orrs	r2, r1
 800559c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800559e:	183b      	adds	r3, r7, r0
 80055a0:	2201      	movs	r2, #1
 80055a2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055a4:	4b7a      	ldr	r3, [pc, #488]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	2380      	movs	r3, #128	; 0x80
 80055aa:	005b      	lsls	r3, r3, #1
 80055ac:	4013      	ands	r3, r2
 80055ae:	d11a      	bne.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055b0:	4b77      	ldr	r3, [pc, #476]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	4b76      	ldr	r3, [pc, #472]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80055b6:	2180      	movs	r1, #128	; 0x80
 80055b8:	0049      	lsls	r1, r1, #1
 80055ba:	430a      	orrs	r2, r1
 80055bc:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055be:	f7fd facb 	bl	8002b58 <HAL_GetTick>
 80055c2:	0003      	movs	r3, r0
 80055c4:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055c6:	e008      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055c8:	f7fd fac6 	bl	8002b58 <HAL_GetTick>
 80055cc:	0002      	movs	r2, r0
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	2b64      	cmp	r3, #100	; 0x64
 80055d4:	d901      	bls.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e0d4      	b.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055da:	4b6d      	ldr	r3, [pc, #436]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	2380      	movs	r3, #128	; 0x80
 80055e0:	005b      	lsls	r3, r3, #1
 80055e2:	4013      	ands	r3, r2
 80055e4:	d0f0      	beq.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80055e6:	4b69      	ldr	r3, [pc, #420]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	23c0      	movs	r3, #192	; 0xc0
 80055ec:	039b      	lsls	r3, r3, #14
 80055ee:	4013      	ands	r3, r2
 80055f0:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685a      	ldr	r2, [r3, #4]
 80055f6:	23c0      	movs	r3, #192	; 0xc0
 80055f8:	039b      	lsls	r3, r3, #14
 80055fa:	4013      	ands	r3, r2
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d013      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685a      	ldr	r2, [r3, #4]
 8005606:	23c0      	movs	r3, #192	; 0xc0
 8005608:	029b      	lsls	r3, r3, #10
 800560a:	401a      	ands	r2, r3
 800560c:	23c0      	movs	r3, #192	; 0xc0
 800560e:	029b      	lsls	r3, r3, #10
 8005610:	429a      	cmp	r2, r3
 8005612:	d10a      	bne.n	800562a <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005614:	4b5d      	ldr	r3, [pc, #372]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	2380      	movs	r3, #128	; 0x80
 800561a:	029b      	lsls	r3, r3, #10
 800561c:	401a      	ands	r2, r3
 800561e:	2380      	movs	r3, #128	; 0x80
 8005620:	029b      	lsls	r3, r3, #10
 8005622:	429a      	cmp	r2, r3
 8005624:	d101      	bne.n	800562a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e0ac      	b.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800562a:	4b58      	ldr	r3, [pc, #352]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800562c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800562e:	23c0      	movs	r3, #192	; 0xc0
 8005630:	029b      	lsls	r3, r3, #10
 8005632:	4013      	ands	r3, r2
 8005634:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d03b      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685a      	ldr	r2, [r3, #4]
 8005640:	23c0      	movs	r3, #192	; 0xc0
 8005642:	029b      	lsls	r3, r3, #10
 8005644:	4013      	ands	r3, r2
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	429a      	cmp	r2, r3
 800564a:	d033      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2220      	movs	r2, #32
 8005652:	4013      	ands	r3, r2
 8005654:	d02e      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005656:	4b4d      	ldr	r3, [pc, #308]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800565a:	4a4e      	ldr	r2, [pc, #312]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800565c:	4013      	ands	r3, r2
 800565e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005660:	4b4a      	ldr	r3, [pc, #296]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005662:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005664:	4b49      	ldr	r3, [pc, #292]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005666:	2180      	movs	r1, #128	; 0x80
 8005668:	0309      	lsls	r1, r1, #12
 800566a:	430a      	orrs	r2, r1
 800566c:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800566e:	4b47      	ldr	r3, [pc, #284]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005670:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005672:	4b46      	ldr	r3, [pc, #280]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005674:	4948      	ldr	r1, [pc, #288]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005676:	400a      	ands	r2, r1
 8005678:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800567a:	4b44      	ldr	r3, [pc, #272]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	2380      	movs	r3, #128	; 0x80
 8005684:	005b      	lsls	r3, r3, #1
 8005686:	4013      	ands	r3, r2
 8005688:	d014      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800568a:	f7fd fa65 	bl	8002b58 <HAL_GetTick>
 800568e:	0003      	movs	r3, r0
 8005690:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005692:	e009      	b.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005694:	f7fd fa60 	bl	8002b58 <HAL_GetTick>
 8005698:	0002      	movs	r2, r0
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	4a3f      	ldr	r2, [pc, #252]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d901      	bls.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e06d      	b.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056a8:	4b38      	ldr	r3, [pc, #224]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80056aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056ac:	2380      	movs	r3, #128	; 0x80
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	4013      	ands	r3, r2
 80056b2:	d0ef      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685a      	ldr	r2, [r3, #4]
 80056b8:	23c0      	movs	r3, #192	; 0xc0
 80056ba:	029b      	lsls	r3, r3, #10
 80056bc:	401a      	ands	r2, r3
 80056be:	23c0      	movs	r3, #192	; 0xc0
 80056c0:	029b      	lsls	r3, r3, #10
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d10c      	bne.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80056c6:	4b31      	ldr	r3, [pc, #196]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a35      	ldr	r2, [pc, #212]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80056cc:	4013      	ands	r3, r2
 80056ce:	0019      	movs	r1, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685a      	ldr	r2, [r3, #4]
 80056d4:	23c0      	movs	r3, #192	; 0xc0
 80056d6:	039b      	lsls	r3, r3, #14
 80056d8:	401a      	ands	r2, r3
 80056da:	4b2c      	ldr	r3, [pc, #176]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80056dc:	430a      	orrs	r2, r1
 80056de:	601a      	str	r2, [r3, #0]
 80056e0:	4b2a      	ldr	r3, [pc, #168]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80056e2:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685a      	ldr	r2, [r3, #4]
 80056e8:	23c0      	movs	r3, #192	; 0xc0
 80056ea:	029b      	lsls	r3, r3, #10
 80056ec:	401a      	ands	r2, r3
 80056ee:	4b27      	ldr	r3, [pc, #156]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80056f0:	430a      	orrs	r2, r1
 80056f2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80056f4:	2317      	movs	r3, #23
 80056f6:	18fb      	adds	r3, r7, r3
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d105      	bne.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056fe:	4b23      	ldr	r3, [pc, #140]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005700:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005702:	4b22      	ldr	r3, [pc, #136]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005704:	4927      	ldr	r1, [pc, #156]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005706:	400a      	ands	r2, r1
 8005708:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2202      	movs	r2, #2
 8005710:	4013      	ands	r3, r2
 8005712:	d009      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005714:	4b1d      	ldr	r3, [pc, #116]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005718:	220c      	movs	r2, #12
 800571a:	4393      	bics	r3, r2
 800571c:	0019      	movs	r1, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	689a      	ldr	r2, [r3, #8]
 8005722:	4b1a      	ldr	r3, [pc, #104]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005724:	430a      	orrs	r2, r1
 8005726:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2204      	movs	r2, #4
 800572e:	4013      	ands	r3, r2
 8005730:	d009      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005732:	4b16      	ldr	r3, [pc, #88]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005736:	4a1c      	ldr	r2, [pc, #112]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005738:	4013      	ands	r3, r2
 800573a:	0019      	movs	r1, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	68da      	ldr	r2, [r3, #12]
 8005740:	4b12      	ldr	r3, [pc, #72]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005742:	430a      	orrs	r2, r1
 8005744:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2208      	movs	r2, #8
 800574c:	4013      	ands	r3, r2
 800574e:	d009      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005750:	4b0e      	ldr	r3, [pc, #56]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005754:	4a15      	ldr	r2, [pc, #84]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005756:	4013      	ands	r3, r2
 8005758:	0019      	movs	r1, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	691a      	ldr	r2, [r3, #16]
 800575e:	4b0b      	ldr	r3, [pc, #44]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005760:	430a      	orrs	r2, r1
 8005762:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2280      	movs	r2, #128	; 0x80
 800576a:	4013      	ands	r3, r2
 800576c:	d009      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800576e:	4b07      	ldr	r3, [pc, #28]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005772:	4a0f      	ldr	r2, [pc, #60]	; (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005774:	4013      	ands	r3, r2
 8005776:	0019      	movs	r1, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	695a      	ldr	r2, [r3, #20]
 800577c:	4b03      	ldr	r3, [pc, #12]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800577e:	430a      	orrs	r2, r1
 8005780:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005782:	2300      	movs	r3, #0
}
 8005784:	0018      	movs	r0, r3
 8005786:	46bd      	mov	sp, r7
 8005788:	b006      	add	sp, #24
 800578a:	bd80      	pop	{r7, pc}
 800578c:	40021000 	.word	0x40021000
 8005790:	40007000 	.word	0x40007000
 8005794:	fffcffff 	.word	0xfffcffff
 8005798:	fff7ffff 	.word	0xfff7ffff
 800579c:	00001388 	.word	0x00001388
 80057a0:	ffcfffff 	.word	0xffcfffff
 80057a4:	efffffff 	.word	0xefffffff
 80057a8:	fffff3ff 	.word	0xfffff3ff
 80057ac:	ffffcfff 	.word	0xffffcfff
 80057b0:	fff3ffff 	.word	0xfff3ffff

080057b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d101      	bne.n	80057c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e032      	b.n	800582c <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2239      	movs	r2, #57	; 0x39
 80057ca:	5c9b      	ldrb	r3, [r3, r2]
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d107      	bne.n	80057e2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2238      	movs	r2, #56	; 0x38
 80057d6:	2100      	movs	r1, #0
 80057d8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	0018      	movs	r0, r3
 80057de:	f7fd f851 	bl	8002884 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2239      	movs	r2, #57	; 0x39
 80057e6:	2102      	movs	r1, #2
 80057e8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	3304      	adds	r3, #4
 80057f2:	0019      	movs	r1, r3
 80057f4:	0010      	movs	r0, r2
 80057f6:	f000 f93d 	bl	8005a74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	223e      	movs	r2, #62	; 0x3e
 80057fe:	2101      	movs	r1, #1
 8005800:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	223a      	movs	r2, #58	; 0x3a
 8005806:	2101      	movs	r1, #1
 8005808:	5499      	strb	r1, [r3, r2]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	223b      	movs	r2, #59	; 0x3b
 800580e:	2101      	movs	r1, #1
 8005810:	5499      	strb	r1, [r3, r2]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	223c      	movs	r2, #60	; 0x3c
 8005816:	2101      	movs	r1, #1
 8005818:	5499      	strb	r1, [r3, r2]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	223d      	movs	r2, #61	; 0x3d
 800581e:	2101      	movs	r1, #1
 8005820:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2239      	movs	r2, #57	; 0x39
 8005826:	2101      	movs	r1, #1
 8005828:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	0018      	movs	r0, r3
 800582e:	46bd      	mov	sp, r7
 8005830:	b002      	add	sp, #8
 8005832:	bd80      	pop	{r7, pc}

08005834 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2239      	movs	r2, #57	; 0x39
 8005840:	5c9b      	ldrb	r3, [r3, r2]
 8005842:	b2db      	uxtb	r3, r3
 8005844:	2b01      	cmp	r3, #1
 8005846:	d001      	beq.n	800584c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e036      	b.n	80058ba <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2239      	movs	r2, #57	; 0x39
 8005850:	2102      	movs	r1, #2
 8005852:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68da      	ldr	r2, [r3, #12]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2101      	movs	r1, #1
 8005860:	430a      	orrs	r2, r1
 8005862:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	2380      	movs	r3, #128	; 0x80
 800586a:	05db      	lsls	r3, r3, #23
 800586c:	429a      	cmp	r2, r3
 800586e:	d009      	beq.n	8005884 <HAL_TIM_Base_Start_IT+0x50>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a13      	ldr	r2, [pc, #76]	; (80058c4 <HAL_TIM_Base_Start_IT+0x90>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d004      	beq.n	8005884 <HAL_TIM_Base_Start_IT+0x50>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a12      	ldr	r2, [pc, #72]	; (80058c8 <HAL_TIM_Base_Start_IT+0x94>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d111      	bne.n	80058a8 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	2207      	movs	r2, #7
 800588c:	4013      	ands	r3, r2
 800588e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2b06      	cmp	r3, #6
 8005894:	d010      	beq.n	80058b8 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2101      	movs	r1, #1
 80058a2:	430a      	orrs	r2, r1
 80058a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058a6:	e007      	b.n	80058b8 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2101      	movs	r1, #1
 80058b4:	430a      	orrs	r2, r1
 80058b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	0018      	movs	r0, r3
 80058bc:	46bd      	mov	sp, r7
 80058be:	b004      	add	sp, #16
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	46c0      	nop			; (mov r8, r8)
 80058c4:	40010800 	.word	0x40010800
 80058c8:	40011400 	.word	0x40011400

080058cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058d6:	230f      	movs	r3, #15
 80058d8:	18fb      	adds	r3, r7, r3
 80058da:	2200      	movs	r2, #0
 80058dc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2238      	movs	r2, #56	; 0x38
 80058e2:	5c9b      	ldrb	r3, [r3, r2]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d101      	bne.n	80058ec <HAL_TIM_ConfigClockSource+0x20>
 80058e8:	2302      	movs	r3, #2
 80058ea:	e0bc      	b.n	8005a66 <HAL_TIM_ConfigClockSource+0x19a>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2238      	movs	r2, #56	; 0x38
 80058f0:	2101      	movs	r1, #1
 80058f2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2239      	movs	r2, #57	; 0x39
 80058f8:	2102      	movs	r1, #2
 80058fa:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	2277      	movs	r2, #119	; 0x77
 8005908:	4393      	bics	r3, r2
 800590a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	4a58      	ldr	r2, [pc, #352]	; (8005a70 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005910:	4013      	ands	r3, r2
 8005912:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68ba      	ldr	r2, [r7, #8]
 800591a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2280      	movs	r2, #128	; 0x80
 8005922:	0192      	lsls	r2, r2, #6
 8005924:	4293      	cmp	r3, r2
 8005926:	d040      	beq.n	80059aa <HAL_TIM_ConfigClockSource+0xde>
 8005928:	2280      	movs	r2, #128	; 0x80
 800592a:	0192      	lsls	r2, r2, #6
 800592c:	4293      	cmp	r3, r2
 800592e:	d900      	bls.n	8005932 <HAL_TIM_ConfigClockSource+0x66>
 8005930:	e088      	b.n	8005a44 <HAL_TIM_ConfigClockSource+0x178>
 8005932:	2280      	movs	r2, #128	; 0x80
 8005934:	0152      	lsls	r2, r2, #5
 8005936:	4293      	cmp	r3, r2
 8005938:	d100      	bne.n	800593c <HAL_TIM_ConfigClockSource+0x70>
 800593a:	e088      	b.n	8005a4e <HAL_TIM_ConfigClockSource+0x182>
 800593c:	2280      	movs	r2, #128	; 0x80
 800593e:	0152      	lsls	r2, r2, #5
 8005940:	4293      	cmp	r3, r2
 8005942:	d900      	bls.n	8005946 <HAL_TIM_ConfigClockSource+0x7a>
 8005944:	e07e      	b.n	8005a44 <HAL_TIM_ConfigClockSource+0x178>
 8005946:	2b70      	cmp	r3, #112	; 0x70
 8005948:	d018      	beq.n	800597c <HAL_TIM_ConfigClockSource+0xb0>
 800594a:	d900      	bls.n	800594e <HAL_TIM_ConfigClockSource+0x82>
 800594c:	e07a      	b.n	8005a44 <HAL_TIM_ConfigClockSource+0x178>
 800594e:	2b60      	cmp	r3, #96	; 0x60
 8005950:	d04f      	beq.n	80059f2 <HAL_TIM_ConfigClockSource+0x126>
 8005952:	d900      	bls.n	8005956 <HAL_TIM_ConfigClockSource+0x8a>
 8005954:	e076      	b.n	8005a44 <HAL_TIM_ConfigClockSource+0x178>
 8005956:	2b50      	cmp	r3, #80	; 0x50
 8005958:	d03b      	beq.n	80059d2 <HAL_TIM_ConfigClockSource+0x106>
 800595a:	d900      	bls.n	800595e <HAL_TIM_ConfigClockSource+0x92>
 800595c:	e072      	b.n	8005a44 <HAL_TIM_ConfigClockSource+0x178>
 800595e:	2b40      	cmp	r3, #64	; 0x40
 8005960:	d057      	beq.n	8005a12 <HAL_TIM_ConfigClockSource+0x146>
 8005962:	d900      	bls.n	8005966 <HAL_TIM_ConfigClockSource+0x9a>
 8005964:	e06e      	b.n	8005a44 <HAL_TIM_ConfigClockSource+0x178>
 8005966:	2b30      	cmp	r3, #48	; 0x30
 8005968:	d063      	beq.n	8005a32 <HAL_TIM_ConfigClockSource+0x166>
 800596a:	d86b      	bhi.n	8005a44 <HAL_TIM_ConfigClockSource+0x178>
 800596c:	2b20      	cmp	r3, #32
 800596e:	d060      	beq.n	8005a32 <HAL_TIM_ConfigClockSource+0x166>
 8005970:	d868      	bhi.n	8005a44 <HAL_TIM_ConfigClockSource+0x178>
 8005972:	2b00      	cmp	r3, #0
 8005974:	d05d      	beq.n	8005a32 <HAL_TIM_ConfigClockSource+0x166>
 8005976:	2b10      	cmp	r3, #16
 8005978:	d05b      	beq.n	8005a32 <HAL_TIM_ConfigClockSource+0x166>
 800597a:	e063      	b.n	8005a44 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6818      	ldr	r0, [r3, #0]
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	6899      	ldr	r1, [r3, #8]
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	f000 f940 	bl	8005c10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	2277      	movs	r2, #119	; 0x77
 800599c:	4313      	orrs	r3, r2
 800599e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68ba      	ldr	r2, [r7, #8]
 80059a6:	609a      	str	r2, [r3, #8]
      break;
 80059a8:	e052      	b.n	8005a50 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6818      	ldr	r0, [r3, #0]
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	6899      	ldr	r1, [r3, #8]
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	685a      	ldr	r2, [r3, #4]
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	f000 f929 	bl	8005c10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	689a      	ldr	r2, [r3, #8]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2180      	movs	r1, #128	; 0x80
 80059ca:	01c9      	lsls	r1, r1, #7
 80059cc:	430a      	orrs	r2, r1
 80059ce:	609a      	str	r2, [r3, #8]
      break;
 80059d0:	e03e      	b.n	8005a50 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6818      	ldr	r0, [r3, #0]
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	6859      	ldr	r1, [r3, #4]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	001a      	movs	r2, r3
 80059e0:	f000 f89c 	bl	8005b1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2150      	movs	r1, #80	; 0x50
 80059ea:	0018      	movs	r0, r3
 80059ec:	f000 f8f6 	bl	8005bdc <TIM_ITRx_SetConfig>
      break;
 80059f0:	e02e      	b.n	8005a50 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6818      	ldr	r0, [r3, #0]
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	6859      	ldr	r1, [r3, #4]
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	001a      	movs	r2, r3
 8005a00:	f000 f8ba 	bl	8005b78 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2160      	movs	r1, #96	; 0x60
 8005a0a:	0018      	movs	r0, r3
 8005a0c:	f000 f8e6 	bl	8005bdc <TIM_ITRx_SetConfig>
      break;
 8005a10:	e01e      	b.n	8005a50 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6818      	ldr	r0, [r3, #0]
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	6859      	ldr	r1, [r3, #4]
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	001a      	movs	r2, r3
 8005a20:	f000 f87c 	bl	8005b1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2140      	movs	r1, #64	; 0x40
 8005a2a:	0018      	movs	r0, r3
 8005a2c:	f000 f8d6 	bl	8005bdc <TIM_ITRx_SetConfig>
      break;
 8005a30:	e00e      	b.n	8005a50 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	0019      	movs	r1, r3
 8005a3c:	0010      	movs	r0, r2
 8005a3e:	f000 f8cd 	bl	8005bdc <TIM_ITRx_SetConfig>
      break;
 8005a42:	e005      	b.n	8005a50 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005a44:	230f      	movs	r3, #15
 8005a46:	18fb      	adds	r3, r7, r3
 8005a48:	2201      	movs	r2, #1
 8005a4a:	701a      	strb	r2, [r3, #0]
      break;
 8005a4c:	e000      	b.n	8005a50 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8005a4e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2239      	movs	r2, #57	; 0x39
 8005a54:	2101      	movs	r1, #1
 8005a56:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2238      	movs	r2, #56	; 0x38
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	5499      	strb	r1, [r3, r2]

  return status;
 8005a60:	230f      	movs	r3, #15
 8005a62:	18fb      	adds	r3, r7, r3
 8005a64:	781b      	ldrb	r3, [r3, #0]
}
 8005a66:	0018      	movs	r0, r3
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	b004      	add	sp, #16
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	46c0      	nop			; (mov r8, r8)
 8005a70:	ffff00ff 	.word	0xffff00ff

08005a74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	2380      	movs	r3, #128	; 0x80
 8005a88:	05db      	lsls	r3, r3, #23
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d007      	beq.n	8005a9e <TIM_Base_SetConfig+0x2a>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a1f      	ldr	r2, [pc, #124]	; (8005b10 <TIM_Base_SetConfig+0x9c>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d003      	beq.n	8005a9e <TIM_Base_SetConfig+0x2a>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a1e      	ldr	r2, [pc, #120]	; (8005b14 <TIM_Base_SetConfig+0xa0>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d108      	bne.n	8005ab0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2270      	movs	r2, #112	; 0x70
 8005aa2:	4393      	bics	r3, r2
 8005aa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	2380      	movs	r3, #128	; 0x80
 8005ab4:	05db      	lsls	r3, r3, #23
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d007      	beq.n	8005aca <TIM_Base_SetConfig+0x56>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a14      	ldr	r2, [pc, #80]	; (8005b10 <TIM_Base_SetConfig+0x9c>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d003      	beq.n	8005aca <TIM_Base_SetConfig+0x56>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a13      	ldr	r2, [pc, #76]	; (8005b14 <TIM_Base_SetConfig+0xa0>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d108      	bne.n	8005adc <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	4a12      	ldr	r2, [pc, #72]	; (8005b18 <TIM_Base_SetConfig+0xa4>)
 8005ace:	4013      	ands	r3, r2
 8005ad0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2280      	movs	r2, #128	; 0x80
 8005ae0:	4393      	bics	r3, r2
 8005ae2:	001a      	movs	r2, r3
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	689a      	ldr	r2, [r3, #8]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2201      	movs	r2, #1
 8005b06:	615a      	str	r2, [r3, #20]
}
 8005b08:	46c0      	nop			; (mov r8, r8)
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	b004      	add	sp, #16
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	40010800 	.word	0x40010800
 8005b14:	40011400 	.word	0x40011400
 8005b18:	fffffcff 	.word	0xfffffcff

08005b1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6a1b      	ldr	r3, [r3, #32]
 8005b2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	2201      	movs	r2, #1
 8005b34:	4393      	bics	r3, r2
 8005b36:	001a      	movs	r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	699b      	ldr	r3, [r3, #24]
 8005b40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	22f0      	movs	r2, #240	; 0xf0
 8005b46:	4393      	bics	r3, r2
 8005b48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	011b      	lsls	r3, r3, #4
 8005b4e:	693a      	ldr	r2, [r7, #16]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	220a      	movs	r2, #10
 8005b58:	4393      	bics	r3, r2
 8005b5a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	693a      	ldr	r2, [r7, #16]
 8005b68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	697a      	ldr	r2, [r7, #20]
 8005b6e:	621a      	str	r2, [r3, #32]
}
 8005b70:	46c0      	nop			; (mov r8, r8)
 8005b72:	46bd      	mov	sp, r7
 8005b74:	b006      	add	sp, #24
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b086      	sub	sp, #24
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6a1b      	ldr	r3, [r3, #32]
 8005b88:	2210      	movs	r2, #16
 8005b8a:	4393      	bics	r3, r2
 8005b8c:	001a      	movs	r2, r3
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6a1b      	ldr	r3, [r3, #32]
 8005b9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	4a0d      	ldr	r2, [pc, #52]	; (8005bd8 <TIM_TI2_ConfigInputStage+0x60>)
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	031b      	lsls	r3, r3, #12
 8005baa:	697a      	ldr	r2, [r7, #20]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	22a0      	movs	r2, #160	; 0xa0
 8005bb4:	4393      	bics	r3, r2
 8005bb6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	011b      	lsls	r3, r3, #4
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	621a      	str	r2, [r3, #32]
}
 8005bce:	46c0      	nop			; (mov r8, r8)
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	b006      	add	sp, #24
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	46c0      	nop			; (mov r8, r8)
 8005bd8:	ffff0fff 	.word	0xffff0fff

08005bdc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2270      	movs	r2, #112	; 0x70
 8005bf0:	4393      	bics	r3, r2
 8005bf2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bf4:	683a      	ldr	r2, [r7, #0]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	2207      	movs	r2, #7
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	609a      	str	r2, [r3, #8]
}
 8005c06:	46c0      	nop			; (mov r8, r8)
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	b004      	add	sp, #16
 8005c0c:	bd80      	pop	{r7, pc}
	...

08005c10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b086      	sub	sp, #24
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]
 8005c1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	4a09      	ldr	r2, [pc, #36]	; (8005c4c <TIM_ETR_SetConfig+0x3c>)
 8005c28:	4013      	ands	r3, r2
 8005c2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	021a      	lsls	r2, r3, #8
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	431a      	orrs	r2, r3
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	609a      	str	r2, [r3, #8]
}
 8005c44:	46c0      	nop			; (mov r8, r8)
 8005c46:	46bd      	mov	sp, r7
 8005c48:	b006      	add	sp, #24
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	ffff00ff 	.word	0xffff00ff

08005c50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2238      	movs	r2, #56	; 0x38
 8005c5e:	5c9b      	ldrb	r3, [r3, r2]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d101      	bne.n	8005c68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c64:	2302      	movs	r3, #2
 8005c66:	e042      	b.n	8005cee <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2238      	movs	r2, #56	; 0x38
 8005c6c:	2101      	movs	r1, #1
 8005c6e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2239      	movs	r2, #57	; 0x39
 8005c74:	2102      	movs	r1, #2
 8005c76:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2270      	movs	r2, #112	; 0x70
 8005c8c:	4393      	bics	r3, r2
 8005c8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	2380      	movs	r3, #128	; 0x80
 8005ca8:	05db      	lsls	r3, r3, #23
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d009      	beq.n	8005cc2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a11      	ldr	r2, [pc, #68]	; (8005cf8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d004      	beq.n	8005cc2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a0f      	ldr	r2, [pc, #60]	; (8005cfc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d10c      	bne.n	8005cdc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	2280      	movs	r2, #128	; 0x80
 8005cc6:	4393      	bics	r3, r2
 8005cc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68ba      	ldr	r2, [r7, #8]
 8005cda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2239      	movs	r2, #57	; 0x39
 8005ce0:	2101      	movs	r1, #1
 8005ce2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2238      	movs	r2, #56	; 0x38
 8005ce8:	2100      	movs	r1, #0
 8005cea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	0018      	movs	r0, r3
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	b004      	add	sp, #16
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	46c0      	nop			; (mov r8, r8)
 8005cf8:	40010800 	.word	0x40010800
 8005cfc:	40011400 	.word	0x40011400

08005d00 <__errno>:
 8005d00:	4b01      	ldr	r3, [pc, #4]	; (8005d08 <__errno+0x8>)
 8005d02:	6818      	ldr	r0, [r3, #0]
 8005d04:	4770      	bx	lr
 8005d06:	46c0      	nop			; (mov r8, r8)
 8005d08:	20000010 	.word	0x20000010

08005d0c <__libc_init_array>:
 8005d0c:	b570      	push	{r4, r5, r6, lr}
 8005d0e:	2600      	movs	r6, #0
 8005d10:	4d0c      	ldr	r5, [pc, #48]	; (8005d44 <__libc_init_array+0x38>)
 8005d12:	4c0d      	ldr	r4, [pc, #52]	; (8005d48 <__libc_init_array+0x3c>)
 8005d14:	1b64      	subs	r4, r4, r5
 8005d16:	10a4      	asrs	r4, r4, #2
 8005d18:	42a6      	cmp	r6, r4
 8005d1a:	d109      	bne.n	8005d30 <__libc_init_array+0x24>
 8005d1c:	2600      	movs	r6, #0
 8005d1e:	f000 fc9f 	bl	8006660 <_init>
 8005d22:	4d0a      	ldr	r5, [pc, #40]	; (8005d4c <__libc_init_array+0x40>)
 8005d24:	4c0a      	ldr	r4, [pc, #40]	; (8005d50 <__libc_init_array+0x44>)
 8005d26:	1b64      	subs	r4, r4, r5
 8005d28:	10a4      	asrs	r4, r4, #2
 8005d2a:	42a6      	cmp	r6, r4
 8005d2c:	d105      	bne.n	8005d3a <__libc_init_array+0x2e>
 8005d2e:	bd70      	pop	{r4, r5, r6, pc}
 8005d30:	00b3      	lsls	r3, r6, #2
 8005d32:	58eb      	ldr	r3, [r5, r3]
 8005d34:	4798      	blx	r3
 8005d36:	3601      	adds	r6, #1
 8005d38:	e7ee      	b.n	8005d18 <__libc_init_array+0xc>
 8005d3a:	00b3      	lsls	r3, r6, #2
 8005d3c:	58eb      	ldr	r3, [r5, r3]
 8005d3e:	4798      	blx	r3
 8005d40:	3601      	adds	r6, #1
 8005d42:	e7f2      	b.n	8005d2a <__libc_init_array+0x1e>
 8005d44:	080068c4 	.word	0x080068c4
 8005d48:	080068c4 	.word	0x080068c4
 8005d4c:	080068c4 	.word	0x080068c4
 8005d50:	080068c8 	.word	0x080068c8

08005d54 <memcpy>:
 8005d54:	2300      	movs	r3, #0
 8005d56:	b510      	push	{r4, lr}
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d100      	bne.n	8005d5e <memcpy+0xa>
 8005d5c:	bd10      	pop	{r4, pc}
 8005d5e:	5ccc      	ldrb	r4, [r1, r3]
 8005d60:	54c4      	strb	r4, [r0, r3]
 8005d62:	3301      	adds	r3, #1
 8005d64:	e7f8      	b.n	8005d58 <memcpy+0x4>

08005d66 <memset>:
 8005d66:	0003      	movs	r3, r0
 8005d68:	1882      	adds	r2, r0, r2
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d100      	bne.n	8005d70 <memset+0xa>
 8005d6e:	4770      	bx	lr
 8005d70:	7019      	strb	r1, [r3, #0]
 8005d72:	3301      	adds	r3, #1
 8005d74:	e7f9      	b.n	8005d6a <memset+0x4>
	...

08005d78 <sniprintf>:
 8005d78:	b40c      	push	{r2, r3}
 8005d7a:	b530      	push	{r4, r5, lr}
 8005d7c:	4b17      	ldr	r3, [pc, #92]	; (8005ddc <sniprintf+0x64>)
 8005d7e:	000c      	movs	r4, r1
 8005d80:	681d      	ldr	r5, [r3, #0]
 8005d82:	b09d      	sub	sp, #116	; 0x74
 8005d84:	2900      	cmp	r1, #0
 8005d86:	da08      	bge.n	8005d9a <sniprintf+0x22>
 8005d88:	238b      	movs	r3, #139	; 0x8b
 8005d8a:	2001      	movs	r0, #1
 8005d8c:	602b      	str	r3, [r5, #0]
 8005d8e:	4240      	negs	r0, r0
 8005d90:	b01d      	add	sp, #116	; 0x74
 8005d92:	bc30      	pop	{r4, r5}
 8005d94:	bc08      	pop	{r3}
 8005d96:	b002      	add	sp, #8
 8005d98:	4718      	bx	r3
 8005d9a:	2382      	movs	r3, #130	; 0x82
 8005d9c:	466a      	mov	r2, sp
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	8293      	strh	r3, [r2, #20]
 8005da2:	2300      	movs	r3, #0
 8005da4:	9002      	str	r0, [sp, #8]
 8005da6:	9006      	str	r0, [sp, #24]
 8005da8:	4299      	cmp	r1, r3
 8005daa:	d000      	beq.n	8005dae <sniprintf+0x36>
 8005dac:	1e4b      	subs	r3, r1, #1
 8005dae:	9304      	str	r3, [sp, #16]
 8005db0:	9307      	str	r3, [sp, #28]
 8005db2:	2301      	movs	r3, #1
 8005db4:	466a      	mov	r2, sp
 8005db6:	425b      	negs	r3, r3
 8005db8:	82d3      	strh	r3, [r2, #22]
 8005dba:	0028      	movs	r0, r5
 8005dbc:	ab21      	add	r3, sp, #132	; 0x84
 8005dbe:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005dc0:	a902      	add	r1, sp, #8
 8005dc2:	9301      	str	r3, [sp, #4]
 8005dc4:	f000 f86e 	bl	8005ea4 <_svfiprintf_r>
 8005dc8:	1c43      	adds	r3, r0, #1
 8005dca:	da01      	bge.n	8005dd0 <sniprintf+0x58>
 8005dcc:	238b      	movs	r3, #139	; 0x8b
 8005dce:	602b      	str	r3, [r5, #0]
 8005dd0:	2c00      	cmp	r4, #0
 8005dd2:	d0dd      	beq.n	8005d90 <sniprintf+0x18>
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	9a02      	ldr	r2, [sp, #8]
 8005dd8:	7013      	strb	r3, [r2, #0]
 8005dda:	e7d9      	b.n	8005d90 <sniprintf+0x18>
 8005ddc:	20000010 	.word	0x20000010

08005de0 <__ssputs_r>:
 8005de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005de2:	688e      	ldr	r6, [r1, #8]
 8005de4:	b085      	sub	sp, #20
 8005de6:	0007      	movs	r7, r0
 8005de8:	000c      	movs	r4, r1
 8005dea:	9203      	str	r2, [sp, #12]
 8005dec:	9301      	str	r3, [sp, #4]
 8005dee:	429e      	cmp	r6, r3
 8005df0:	d83c      	bhi.n	8005e6c <__ssputs_r+0x8c>
 8005df2:	2390      	movs	r3, #144	; 0x90
 8005df4:	898a      	ldrh	r2, [r1, #12]
 8005df6:	00db      	lsls	r3, r3, #3
 8005df8:	421a      	tst	r2, r3
 8005dfa:	d034      	beq.n	8005e66 <__ssputs_r+0x86>
 8005dfc:	6909      	ldr	r1, [r1, #16]
 8005dfe:	6823      	ldr	r3, [r4, #0]
 8005e00:	6960      	ldr	r0, [r4, #20]
 8005e02:	1a5b      	subs	r3, r3, r1
 8005e04:	9302      	str	r3, [sp, #8]
 8005e06:	2303      	movs	r3, #3
 8005e08:	4343      	muls	r3, r0
 8005e0a:	0fdd      	lsrs	r5, r3, #31
 8005e0c:	18ed      	adds	r5, r5, r3
 8005e0e:	9b01      	ldr	r3, [sp, #4]
 8005e10:	9802      	ldr	r0, [sp, #8]
 8005e12:	3301      	adds	r3, #1
 8005e14:	181b      	adds	r3, r3, r0
 8005e16:	106d      	asrs	r5, r5, #1
 8005e18:	42ab      	cmp	r3, r5
 8005e1a:	d900      	bls.n	8005e1e <__ssputs_r+0x3e>
 8005e1c:	001d      	movs	r5, r3
 8005e1e:	0553      	lsls	r3, r2, #21
 8005e20:	d532      	bpl.n	8005e88 <__ssputs_r+0xa8>
 8005e22:	0029      	movs	r1, r5
 8005e24:	0038      	movs	r0, r7
 8005e26:	f000 fb49 	bl	80064bc <_malloc_r>
 8005e2a:	1e06      	subs	r6, r0, #0
 8005e2c:	d109      	bne.n	8005e42 <__ssputs_r+0x62>
 8005e2e:	230c      	movs	r3, #12
 8005e30:	603b      	str	r3, [r7, #0]
 8005e32:	2340      	movs	r3, #64	; 0x40
 8005e34:	2001      	movs	r0, #1
 8005e36:	89a2      	ldrh	r2, [r4, #12]
 8005e38:	4240      	negs	r0, r0
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	81a3      	strh	r3, [r4, #12]
 8005e3e:	b005      	add	sp, #20
 8005e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e42:	9a02      	ldr	r2, [sp, #8]
 8005e44:	6921      	ldr	r1, [r4, #16]
 8005e46:	f7ff ff85 	bl	8005d54 <memcpy>
 8005e4a:	89a3      	ldrh	r3, [r4, #12]
 8005e4c:	4a14      	ldr	r2, [pc, #80]	; (8005ea0 <__ssputs_r+0xc0>)
 8005e4e:	401a      	ands	r2, r3
 8005e50:	2380      	movs	r3, #128	; 0x80
 8005e52:	4313      	orrs	r3, r2
 8005e54:	81a3      	strh	r3, [r4, #12]
 8005e56:	9b02      	ldr	r3, [sp, #8]
 8005e58:	6126      	str	r6, [r4, #16]
 8005e5a:	18f6      	adds	r6, r6, r3
 8005e5c:	6026      	str	r6, [r4, #0]
 8005e5e:	6165      	str	r5, [r4, #20]
 8005e60:	9e01      	ldr	r6, [sp, #4]
 8005e62:	1aed      	subs	r5, r5, r3
 8005e64:	60a5      	str	r5, [r4, #8]
 8005e66:	9b01      	ldr	r3, [sp, #4]
 8005e68:	429e      	cmp	r6, r3
 8005e6a:	d900      	bls.n	8005e6e <__ssputs_r+0x8e>
 8005e6c:	9e01      	ldr	r6, [sp, #4]
 8005e6e:	0032      	movs	r2, r6
 8005e70:	9903      	ldr	r1, [sp, #12]
 8005e72:	6820      	ldr	r0, [r4, #0]
 8005e74:	f000 faa3 	bl	80063be <memmove>
 8005e78:	68a3      	ldr	r3, [r4, #8]
 8005e7a:	2000      	movs	r0, #0
 8005e7c:	1b9b      	subs	r3, r3, r6
 8005e7e:	60a3      	str	r3, [r4, #8]
 8005e80:	6823      	ldr	r3, [r4, #0]
 8005e82:	199e      	adds	r6, r3, r6
 8005e84:	6026      	str	r6, [r4, #0]
 8005e86:	e7da      	b.n	8005e3e <__ssputs_r+0x5e>
 8005e88:	002a      	movs	r2, r5
 8005e8a:	0038      	movs	r0, r7
 8005e8c:	f000 fb8c 	bl	80065a8 <_realloc_r>
 8005e90:	1e06      	subs	r6, r0, #0
 8005e92:	d1e0      	bne.n	8005e56 <__ssputs_r+0x76>
 8005e94:	0038      	movs	r0, r7
 8005e96:	6921      	ldr	r1, [r4, #16]
 8005e98:	f000 faa4 	bl	80063e4 <_free_r>
 8005e9c:	e7c7      	b.n	8005e2e <__ssputs_r+0x4e>
 8005e9e:	46c0      	nop			; (mov r8, r8)
 8005ea0:	fffffb7f 	.word	0xfffffb7f

08005ea4 <_svfiprintf_r>:
 8005ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ea6:	b0a1      	sub	sp, #132	; 0x84
 8005ea8:	9003      	str	r0, [sp, #12]
 8005eaa:	001d      	movs	r5, r3
 8005eac:	898b      	ldrh	r3, [r1, #12]
 8005eae:	000f      	movs	r7, r1
 8005eb0:	0016      	movs	r6, r2
 8005eb2:	061b      	lsls	r3, r3, #24
 8005eb4:	d511      	bpl.n	8005eda <_svfiprintf_r+0x36>
 8005eb6:	690b      	ldr	r3, [r1, #16]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d10e      	bne.n	8005eda <_svfiprintf_r+0x36>
 8005ebc:	2140      	movs	r1, #64	; 0x40
 8005ebe:	f000 fafd 	bl	80064bc <_malloc_r>
 8005ec2:	6038      	str	r0, [r7, #0]
 8005ec4:	6138      	str	r0, [r7, #16]
 8005ec6:	2800      	cmp	r0, #0
 8005ec8:	d105      	bne.n	8005ed6 <_svfiprintf_r+0x32>
 8005eca:	230c      	movs	r3, #12
 8005ecc:	9a03      	ldr	r2, [sp, #12]
 8005ece:	3801      	subs	r0, #1
 8005ed0:	6013      	str	r3, [r2, #0]
 8005ed2:	b021      	add	sp, #132	; 0x84
 8005ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ed6:	2340      	movs	r3, #64	; 0x40
 8005ed8:	617b      	str	r3, [r7, #20]
 8005eda:	2300      	movs	r3, #0
 8005edc:	ac08      	add	r4, sp, #32
 8005ede:	6163      	str	r3, [r4, #20]
 8005ee0:	3320      	adds	r3, #32
 8005ee2:	7663      	strb	r3, [r4, #25]
 8005ee4:	3310      	adds	r3, #16
 8005ee6:	76a3      	strb	r3, [r4, #26]
 8005ee8:	9507      	str	r5, [sp, #28]
 8005eea:	0035      	movs	r5, r6
 8005eec:	782b      	ldrb	r3, [r5, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d001      	beq.n	8005ef6 <_svfiprintf_r+0x52>
 8005ef2:	2b25      	cmp	r3, #37	; 0x25
 8005ef4:	d147      	bne.n	8005f86 <_svfiprintf_r+0xe2>
 8005ef6:	1bab      	subs	r3, r5, r6
 8005ef8:	9305      	str	r3, [sp, #20]
 8005efa:	42b5      	cmp	r5, r6
 8005efc:	d00c      	beq.n	8005f18 <_svfiprintf_r+0x74>
 8005efe:	0032      	movs	r2, r6
 8005f00:	0039      	movs	r1, r7
 8005f02:	9803      	ldr	r0, [sp, #12]
 8005f04:	f7ff ff6c 	bl	8005de0 <__ssputs_r>
 8005f08:	1c43      	adds	r3, r0, #1
 8005f0a:	d100      	bne.n	8005f0e <_svfiprintf_r+0x6a>
 8005f0c:	e0ae      	b.n	800606c <_svfiprintf_r+0x1c8>
 8005f0e:	6962      	ldr	r2, [r4, #20]
 8005f10:	9b05      	ldr	r3, [sp, #20]
 8005f12:	4694      	mov	ip, r2
 8005f14:	4463      	add	r3, ip
 8005f16:	6163      	str	r3, [r4, #20]
 8005f18:	782b      	ldrb	r3, [r5, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d100      	bne.n	8005f20 <_svfiprintf_r+0x7c>
 8005f1e:	e0a5      	b.n	800606c <_svfiprintf_r+0x1c8>
 8005f20:	2201      	movs	r2, #1
 8005f22:	2300      	movs	r3, #0
 8005f24:	4252      	negs	r2, r2
 8005f26:	6062      	str	r2, [r4, #4]
 8005f28:	a904      	add	r1, sp, #16
 8005f2a:	3254      	adds	r2, #84	; 0x54
 8005f2c:	1852      	adds	r2, r2, r1
 8005f2e:	1c6e      	adds	r6, r5, #1
 8005f30:	6023      	str	r3, [r4, #0]
 8005f32:	60e3      	str	r3, [r4, #12]
 8005f34:	60a3      	str	r3, [r4, #8]
 8005f36:	7013      	strb	r3, [r2, #0]
 8005f38:	65a3      	str	r3, [r4, #88]	; 0x58
 8005f3a:	2205      	movs	r2, #5
 8005f3c:	7831      	ldrb	r1, [r6, #0]
 8005f3e:	4854      	ldr	r0, [pc, #336]	; (8006090 <_svfiprintf_r+0x1ec>)
 8005f40:	f000 fa32 	bl	80063a8 <memchr>
 8005f44:	1c75      	adds	r5, r6, #1
 8005f46:	2800      	cmp	r0, #0
 8005f48:	d11f      	bne.n	8005f8a <_svfiprintf_r+0xe6>
 8005f4a:	6822      	ldr	r2, [r4, #0]
 8005f4c:	06d3      	lsls	r3, r2, #27
 8005f4e:	d504      	bpl.n	8005f5a <_svfiprintf_r+0xb6>
 8005f50:	2353      	movs	r3, #83	; 0x53
 8005f52:	a904      	add	r1, sp, #16
 8005f54:	185b      	adds	r3, r3, r1
 8005f56:	2120      	movs	r1, #32
 8005f58:	7019      	strb	r1, [r3, #0]
 8005f5a:	0713      	lsls	r3, r2, #28
 8005f5c:	d504      	bpl.n	8005f68 <_svfiprintf_r+0xc4>
 8005f5e:	2353      	movs	r3, #83	; 0x53
 8005f60:	a904      	add	r1, sp, #16
 8005f62:	185b      	adds	r3, r3, r1
 8005f64:	212b      	movs	r1, #43	; 0x2b
 8005f66:	7019      	strb	r1, [r3, #0]
 8005f68:	7833      	ldrb	r3, [r6, #0]
 8005f6a:	2b2a      	cmp	r3, #42	; 0x2a
 8005f6c:	d016      	beq.n	8005f9c <_svfiprintf_r+0xf8>
 8005f6e:	0035      	movs	r5, r6
 8005f70:	2100      	movs	r1, #0
 8005f72:	200a      	movs	r0, #10
 8005f74:	68e3      	ldr	r3, [r4, #12]
 8005f76:	782a      	ldrb	r2, [r5, #0]
 8005f78:	1c6e      	adds	r6, r5, #1
 8005f7a:	3a30      	subs	r2, #48	; 0x30
 8005f7c:	2a09      	cmp	r2, #9
 8005f7e:	d94e      	bls.n	800601e <_svfiprintf_r+0x17a>
 8005f80:	2900      	cmp	r1, #0
 8005f82:	d111      	bne.n	8005fa8 <_svfiprintf_r+0x104>
 8005f84:	e017      	b.n	8005fb6 <_svfiprintf_r+0x112>
 8005f86:	3501      	adds	r5, #1
 8005f88:	e7b0      	b.n	8005eec <_svfiprintf_r+0x48>
 8005f8a:	4b41      	ldr	r3, [pc, #260]	; (8006090 <_svfiprintf_r+0x1ec>)
 8005f8c:	6822      	ldr	r2, [r4, #0]
 8005f8e:	1ac0      	subs	r0, r0, r3
 8005f90:	2301      	movs	r3, #1
 8005f92:	4083      	lsls	r3, r0
 8005f94:	4313      	orrs	r3, r2
 8005f96:	002e      	movs	r6, r5
 8005f98:	6023      	str	r3, [r4, #0]
 8005f9a:	e7ce      	b.n	8005f3a <_svfiprintf_r+0x96>
 8005f9c:	9b07      	ldr	r3, [sp, #28]
 8005f9e:	1d19      	adds	r1, r3, #4
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	9107      	str	r1, [sp, #28]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	db01      	blt.n	8005fac <_svfiprintf_r+0x108>
 8005fa8:	930b      	str	r3, [sp, #44]	; 0x2c
 8005faa:	e004      	b.n	8005fb6 <_svfiprintf_r+0x112>
 8005fac:	425b      	negs	r3, r3
 8005fae:	60e3      	str	r3, [r4, #12]
 8005fb0:	2302      	movs	r3, #2
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	6023      	str	r3, [r4, #0]
 8005fb6:	782b      	ldrb	r3, [r5, #0]
 8005fb8:	2b2e      	cmp	r3, #46	; 0x2e
 8005fba:	d10a      	bne.n	8005fd2 <_svfiprintf_r+0x12e>
 8005fbc:	786b      	ldrb	r3, [r5, #1]
 8005fbe:	2b2a      	cmp	r3, #42	; 0x2a
 8005fc0:	d135      	bne.n	800602e <_svfiprintf_r+0x18a>
 8005fc2:	9b07      	ldr	r3, [sp, #28]
 8005fc4:	3502      	adds	r5, #2
 8005fc6:	1d1a      	adds	r2, r3, #4
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	9207      	str	r2, [sp, #28]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	db2b      	blt.n	8006028 <_svfiprintf_r+0x184>
 8005fd0:	9309      	str	r3, [sp, #36]	; 0x24
 8005fd2:	4e30      	ldr	r6, [pc, #192]	; (8006094 <_svfiprintf_r+0x1f0>)
 8005fd4:	2203      	movs	r2, #3
 8005fd6:	0030      	movs	r0, r6
 8005fd8:	7829      	ldrb	r1, [r5, #0]
 8005fda:	f000 f9e5 	bl	80063a8 <memchr>
 8005fde:	2800      	cmp	r0, #0
 8005fe0:	d006      	beq.n	8005ff0 <_svfiprintf_r+0x14c>
 8005fe2:	2340      	movs	r3, #64	; 0x40
 8005fe4:	1b80      	subs	r0, r0, r6
 8005fe6:	4083      	lsls	r3, r0
 8005fe8:	6822      	ldr	r2, [r4, #0]
 8005fea:	3501      	adds	r5, #1
 8005fec:	4313      	orrs	r3, r2
 8005fee:	6023      	str	r3, [r4, #0]
 8005ff0:	7829      	ldrb	r1, [r5, #0]
 8005ff2:	2206      	movs	r2, #6
 8005ff4:	4828      	ldr	r0, [pc, #160]	; (8006098 <_svfiprintf_r+0x1f4>)
 8005ff6:	1c6e      	adds	r6, r5, #1
 8005ff8:	7621      	strb	r1, [r4, #24]
 8005ffa:	f000 f9d5 	bl	80063a8 <memchr>
 8005ffe:	2800      	cmp	r0, #0
 8006000:	d03c      	beq.n	800607c <_svfiprintf_r+0x1d8>
 8006002:	4b26      	ldr	r3, [pc, #152]	; (800609c <_svfiprintf_r+0x1f8>)
 8006004:	2b00      	cmp	r3, #0
 8006006:	d125      	bne.n	8006054 <_svfiprintf_r+0x1b0>
 8006008:	2207      	movs	r2, #7
 800600a:	9b07      	ldr	r3, [sp, #28]
 800600c:	3307      	adds	r3, #7
 800600e:	4393      	bics	r3, r2
 8006010:	3308      	adds	r3, #8
 8006012:	9307      	str	r3, [sp, #28]
 8006014:	6963      	ldr	r3, [r4, #20]
 8006016:	9a04      	ldr	r2, [sp, #16]
 8006018:	189b      	adds	r3, r3, r2
 800601a:	6163      	str	r3, [r4, #20]
 800601c:	e765      	b.n	8005eea <_svfiprintf_r+0x46>
 800601e:	4343      	muls	r3, r0
 8006020:	0035      	movs	r5, r6
 8006022:	2101      	movs	r1, #1
 8006024:	189b      	adds	r3, r3, r2
 8006026:	e7a6      	b.n	8005f76 <_svfiprintf_r+0xd2>
 8006028:	2301      	movs	r3, #1
 800602a:	425b      	negs	r3, r3
 800602c:	e7d0      	b.n	8005fd0 <_svfiprintf_r+0x12c>
 800602e:	2300      	movs	r3, #0
 8006030:	200a      	movs	r0, #10
 8006032:	001a      	movs	r2, r3
 8006034:	3501      	adds	r5, #1
 8006036:	6063      	str	r3, [r4, #4]
 8006038:	7829      	ldrb	r1, [r5, #0]
 800603a:	1c6e      	adds	r6, r5, #1
 800603c:	3930      	subs	r1, #48	; 0x30
 800603e:	2909      	cmp	r1, #9
 8006040:	d903      	bls.n	800604a <_svfiprintf_r+0x1a6>
 8006042:	2b00      	cmp	r3, #0
 8006044:	d0c5      	beq.n	8005fd2 <_svfiprintf_r+0x12e>
 8006046:	9209      	str	r2, [sp, #36]	; 0x24
 8006048:	e7c3      	b.n	8005fd2 <_svfiprintf_r+0x12e>
 800604a:	4342      	muls	r2, r0
 800604c:	0035      	movs	r5, r6
 800604e:	2301      	movs	r3, #1
 8006050:	1852      	adds	r2, r2, r1
 8006052:	e7f1      	b.n	8006038 <_svfiprintf_r+0x194>
 8006054:	ab07      	add	r3, sp, #28
 8006056:	9300      	str	r3, [sp, #0]
 8006058:	003a      	movs	r2, r7
 800605a:	0021      	movs	r1, r4
 800605c:	4b10      	ldr	r3, [pc, #64]	; (80060a0 <_svfiprintf_r+0x1fc>)
 800605e:	9803      	ldr	r0, [sp, #12]
 8006060:	e000      	b.n	8006064 <_svfiprintf_r+0x1c0>
 8006062:	bf00      	nop
 8006064:	9004      	str	r0, [sp, #16]
 8006066:	9b04      	ldr	r3, [sp, #16]
 8006068:	3301      	adds	r3, #1
 800606a:	d1d3      	bne.n	8006014 <_svfiprintf_r+0x170>
 800606c:	89bb      	ldrh	r3, [r7, #12]
 800606e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006070:	065b      	lsls	r3, r3, #25
 8006072:	d400      	bmi.n	8006076 <_svfiprintf_r+0x1d2>
 8006074:	e72d      	b.n	8005ed2 <_svfiprintf_r+0x2e>
 8006076:	2001      	movs	r0, #1
 8006078:	4240      	negs	r0, r0
 800607a:	e72a      	b.n	8005ed2 <_svfiprintf_r+0x2e>
 800607c:	ab07      	add	r3, sp, #28
 800607e:	9300      	str	r3, [sp, #0]
 8006080:	003a      	movs	r2, r7
 8006082:	0021      	movs	r1, r4
 8006084:	4b06      	ldr	r3, [pc, #24]	; (80060a0 <_svfiprintf_r+0x1fc>)
 8006086:	9803      	ldr	r0, [sp, #12]
 8006088:	f000 f87c 	bl	8006184 <_printf_i>
 800608c:	e7ea      	b.n	8006064 <_svfiprintf_r+0x1c0>
 800608e:	46c0      	nop			; (mov r8, r8)
 8006090:	08006889 	.word	0x08006889
 8006094:	0800688f 	.word	0x0800688f
 8006098:	08006893 	.word	0x08006893
 800609c:	00000000 	.word	0x00000000
 80060a0:	08005de1 	.word	0x08005de1

080060a4 <_printf_common>:
 80060a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060a6:	0015      	movs	r5, r2
 80060a8:	9301      	str	r3, [sp, #4]
 80060aa:	688a      	ldr	r2, [r1, #8]
 80060ac:	690b      	ldr	r3, [r1, #16]
 80060ae:	000c      	movs	r4, r1
 80060b0:	9000      	str	r0, [sp, #0]
 80060b2:	4293      	cmp	r3, r2
 80060b4:	da00      	bge.n	80060b8 <_printf_common+0x14>
 80060b6:	0013      	movs	r3, r2
 80060b8:	0022      	movs	r2, r4
 80060ba:	602b      	str	r3, [r5, #0]
 80060bc:	3243      	adds	r2, #67	; 0x43
 80060be:	7812      	ldrb	r2, [r2, #0]
 80060c0:	2a00      	cmp	r2, #0
 80060c2:	d001      	beq.n	80060c8 <_printf_common+0x24>
 80060c4:	3301      	adds	r3, #1
 80060c6:	602b      	str	r3, [r5, #0]
 80060c8:	6823      	ldr	r3, [r4, #0]
 80060ca:	069b      	lsls	r3, r3, #26
 80060cc:	d502      	bpl.n	80060d4 <_printf_common+0x30>
 80060ce:	682b      	ldr	r3, [r5, #0]
 80060d0:	3302      	adds	r3, #2
 80060d2:	602b      	str	r3, [r5, #0]
 80060d4:	6822      	ldr	r2, [r4, #0]
 80060d6:	2306      	movs	r3, #6
 80060d8:	0017      	movs	r7, r2
 80060da:	401f      	ands	r7, r3
 80060dc:	421a      	tst	r2, r3
 80060de:	d027      	beq.n	8006130 <_printf_common+0x8c>
 80060e0:	0023      	movs	r3, r4
 80060e2:	3343      	adds	r3, #67	; 0x43
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	1e5a      	subs	r2, r3, #1
 80060e8:	4193      	sbcs	r3, r2
 80060ea:	6822      	ldr	r2, [r4, #0]
 80060ec:	0692      	lsls	r2, r2, #26
 80060ee:	d430      	bmi.n	8006152 <_printf_common+0xae>
 80060f0:	0022      	movs	r2, r4
 80060f2:	9901      	ldr	r1, [sp, #4]
 80060f4:	9800      	ldr	r0, [sp, #0]
 80060f6:	9e08      	ldr	r6, [sp, #32]
 80060f8:	3243      	adds	r2, #67	; 0x43
 80060fa:	47b0      	blx	r6
 80060fc:	1c43      	adds	r3, r0, #1
 80060fe:	d025      	beq.n	800614c <_printf_common+0xa8>
 8006100:	2306      	movs	r3, #6
 8006102:	6820      	ldr	r0, [r4, #0]
 8006104:	682a      	ldr	r2, [r5, #0]
 8006106:	68e1      	ldr	r1, [r4, #12]
 8006108:	2500      	movs	r5, #0
 800610a:	4003      	ands	r3, r0
 800610c:	2b04      	cmp	r3, #4
 800610e:	d103      	bne.n	8006118 <_printf_common+0x74>
 8006110:	1a8d      	subs	r5, r1, r2
 8006112:	43eb      	mvns	r3, r5
 8006114:	17db      	asrs	r3, r3, #31
 8006116:	401d      	ands	r5, r3
 8006118:	68a3      	ldr	r3, [r4, #8]
 800611a:	6922      	ldr	r2, [r4, #16]
 800611c:	4293      	cmp	r3, r2
 800611e:	dd01      	ble.n	8006124 <_printf_common+0x80>
 8006120:	1a9b      	subs	r3, r3, r2
 8006122:	18ed      	adds	r5, r5, r3
 8006124:	2700      	movs	r7, #0
 8006126:	42bd      	cmp	r5, r7
 8006128:	d120      	bne.n	800616c <_printf_common+0xc8>
 800612a:	2000      	movs	r0, #0
 800612c:	e010      	b.n	8006150 <_printf_common+0xac>
 800612e:	3701      	adds	r7, #1
 8006130:	68e3      	ldr	r3, [r4, #12]
 8006132:	682a      	ldr	r2, [r5, #0]
 8006134:	1a9b      	subs	r3, r3, r2
 8006136:	42bb      	cmp	r3, r7
 8006138:	ddd2      	ble.n	80060e0 <_printf_common+0x3c>
 800613a:	0022      	movs	r2, r4
 800613c:	2301      	movs	r3, #1
 800613e:	9901      	ldr	r1, [sp, #4]
 8006140:	9800      	ldr	r0, [sp, #0]
 8006142:	9e08      	ldr	r6, [sp, #32]
 8006144:	3219      	adds	r2, #25
 8006146:	47b0      	blx	r6
 8006148:	1c43      	adds	r3, r0, #1
 800614a:	d1f0      	bne.n	800612e <_printf_common+0x8a>
 800614c:	2001      	movs	r0, #1
 800614e:	4240      	negs	r0, r0
 8006150:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006152:	2030      	movs	r0, #48	; 0x30
 8006154:	18e1      	adds	r1, r4, r3
 8006156:	3143      	adds	r1, #67	; 0x43
 8006158:	7008      	strb	r0, [r1, #0]
 800615a:	0021      	movs	r1, r4
 800615c:	1c5a      	adds	r2, r3, #1
 800615e:	3145      	adds	r1, #69	; 0x45
 8006160:	7809      	ldrb	r1, [r1, #0]
 8006162:	18a2      	adds	r2, r4, r2
 8006164:	3243      	adds	r2, #67	; 0x43
 8006166:	3302      	adds	r3, #2
 8006168:	7011      	strb	r1, [r2, #0]
 800616a:	e7c1      	b.n	80060f0 <_printf_common+0x4c>
 800616c:	0022      	movs	r2, r4
 800616e:	2301      	movs	r3, #1
 8006170:	9901      	ldr	r1, [sp, #4]
 8006172:	9800      	ldr	r0, [sp, #0]
 8006174:	9e08      	ldr	r6, [sp, #32]
 8006176:	321a      	adds	r2, #26
 8006178:	47b0      	blx	r6
 800617a:	1c43      	adds	r3, r0, #1
 800617c:	d0e6      	beq.n	800614c <_printf_common+0xa8>
 800617e:	3701      	adds	r7, #1
 8006180:	e7d1      	b.n	8006126 <_printf_common+0x82>
	...

08006184 <_printf_i>:
 8006184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006186:	b08b      	sub	sp, #44	; 0x2c
 8006188:	9206      	str	r2, [sp, #24]
 800618a:	000a      	movs	r2, r1
 800618c:	3243      	adds	r2, #67	; 0x43
 800618e:	9307      	str	r3, [sp, #28]
 8006190:	9005      	str	r0, [sp, #20]
 8006192:	9204      	str	r2, [sp, #16]
 8006194:	7e0a      	ldrb	r2, [r1, #24]
 8006196:	000c      	movs	r4, r1
 8006198:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800619a:	2a78      	cmp	r2, #120	; 0x78
 800619c:	d807      	bhi.n	80061ae <_printf_i+0x2a>
 800619e:	2a62      	cmp	r2, #98	; 0x62
 80061a0:	d809      	bhi.n	80061b6 <_printf_i+0x32>
 80061a2:	2a00      	cmp	r2, #0
 80061a4:	d100      	bne.n	80061a8 <_printf_i+0x24>
 80061a6:	e0c1      	b.n	800632c <_printf_i+0x1a8>
 80061a8:	2a58      	cmp	r2, #88	; 0x58
 80061aa:	d100      	bne.n	80061ae <_printf_i+0x2a>
 80061ac:	e08c      	b.n	80062c8 <_printf_i+0x144>
 80061ae:	0026      	movs	r6, r4
 80061b0:	3642      	adds	r6, #66	; 0x42
 80061b2:	7032      	strb	r2, [r6, #0]
 80061b4:	e022      	b.n	80061fc <_printf_i+0x78>
 80061b6:	0010      	movs	r0, r2
 80061b8:	3863      	subs	r0, #99	; 0x63
 80061ba:	2815      	cmp	r0, #21
 80061bc:	d8f7      	bhi.n	80061ae <_printf_i+0x2a>
 80061be:	f7f9 ffa3 	bl	8000108 <__gnu_thumb1_case_shi>
 80061c2:	0016      	.short	0x0016
 80061c4:	fff6001f 	.word	0xfff6001f
 80061c8:	fff6fff6 	.word	0xfff6fff6
 80061cc:	001ffff6 	.word	0x001ffff6
 80061d0:	fff6fff6 	.word	0xfff6fff6
 80061d4:	fff6fff6 	.word	0xfff6fff6
 80061d8:	003600a8 	.word	0x003600a8
 80061dc:	fff6009a 	.word	0xfff6009a
 80061e0:	00b9fff6 	.word	0x00b9fff6
 80061e4:	0036fff6 	.word	0x0036fff6
 80061e8:	fff6fff6 	.word	0xfff6fff6
 80061ec:	009e      	.short	0x009e
 80061ee:	0026      	movs	r6, r4
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	3642      	adds	r6, #66	; 0x42
 80061f4:	1d11      	adds	r1, r2, #4
 80061f6:	6019      	str	r1, [r3, #0]
 80061f8:	6813      	ldr	r3, [r2, #0]
 80061fa:	7033      	strb	r3, [r6, #0]
 80061fc:	2301      	movs	r3, #1
 80061fe:	e0a7      	b.n	8006350 <_printf_i+0x1cc>
 8006200:	6808      	ldr	r0, [r1, #0]
 8006202:	6819      	ldr	r1, [r3, #0]
 8006204:	1d0a      	adds	r2, r1, #4
 8006206:	0605      	lsls	r5, r0, #24
 8006208:	d50b      	bpl.n	8006222 <_printf_i+0x9e>
 800620a:	680d      	ldr	r5, [r1, #0]
 800620c:	601a      	str	r2, [r3, #0]
 800620e:	2d00      	cmp	r5, #0
 8006210:	da03      	bge.n	800621a <_printf_i+0x96>
 8006212:	232d      	movs	r3, #45	; 0x2d
 8006214:	9a04      	ldr	r2, [sp, #16]
 8006216:	426d      	negs	r5, r5
 8006218:	7013      	strb	r3, [r2, #0]
 800621a:	4b61      	ldr	r3, [pc, #388]	; (80063a0 <_printf_i+0x21c>)
 800621c:	270a      	movs	r7, #10
 800621e:	9303      	str	r3, [sp, #12]
 8006220:	e01b      	b.n	800625a <_printf_i+0xd6>
 8006222:	680d      	ldr	r5, [r1, #0]
 8006224:	601a      	str	r2, [r3, #0]
 8006226:	0641      	lsls	r1, r0, #25
 8006228:	d5f1      	bpl.n	800620e <_printf_i+0x8a>
 800622a:	b22d      	sxth	r5, r5
 800622c:	e7ef      	b.n	800620e <_printf_i+0x8a>
 800622e:	680d      	ldr	r5, [r1, #0]
 8006230:	6819      	ldr	r1, [r3, #0]
 8006232:	1d08      	adds	r0, r1, #4
 8006234:	6018      	str	r0, [r3, #0]
 8006236:	062e      	lsls	r6, r5, #24
 8006238:	d501      	bpl.n	800623e <_printf_i+0xba>
 800623a:	680d      	ldr	r5, [r1, #0]
 800623c:	e003      	b.n	8006246 <_printf_i+0xc2>
 800623e:	066d      	lsls	r5, r5, #25
 8006240:	d5fb      	bpl.n	800623a <_printf_i+0xb6>
 8006242:	680d      	ldr	r5, [r1, #0]
 8006244:	b2ad      	uxth	r5, r5
 8006246:	4b56      	ldr	r3, [pc, #344]	; (80063a0 <_printf_i+0x21c>)
 8006248:	2708      	movs	r7, #8
 800624a:	9303      	str	r3, [sp, #12]
 800624c:	2a6f      	cmp	r2, #111	; 0x6f
 800624e:	d000      	beq.n	8006252 <_printf_i+0xce>
 8006250:	3702      	adds	r7, #2
 8006252:	0023      	movs	r3, r4
 8006254:	2200      	movs	r2, #0
 8006256:	3343      	adds	r3, #67	; 0x43
 8006258:	701a      	strb	r2, [r3, #0]
 800625a:	6863      	ldr	r3, [r4, #4]
 800625c:	60a3      	str	r3, [r4, #8]
 800625e:	2b00      	cmp	r3, #0
 8006260:	db03      	blt.n	800626a <_printf_i+0xe6>
 8006262:	2204      	movs	r2, #4
 8006264:	6821      	ldr	r1, [r4, #0]
 8006266:	4391      	bics	r1, r2
 8006268:	6021      	str	r1, [r4, #0]
 800626a:	2d00      	cmp	r5, #0
 800626c:	d102      	bne.n	8006274 <_printf_i+0xf0>
 800626e:	9e04      	ldr	r6, [sp, #16]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d00c      	beq.n	800628e <_printf_i+0x10a>
 8006274:	9e04      	ldr	r6, [sp, #16]
 8006276:	0028      	movs	r0, r5
 8006278:	0039      	movs	r1, r7
 800627a:	f7f9 ffd5 	bl	8000228 <__aeabi_uidivmod>
 800627e:	9b03      	ldr	r3, [sp, #12]
 8006280:	3e01      	subs	r6, #1
 8006282:	5c5b      	ldrb	r3, [r3, r1]
 8006284:	7033      	strb	r3, [r6, #0]
 8006286:	002b      	movs	r3, r5
 8006288:	0005      	movs	r5, r0
 800628a:	429f      	cmp	r7, r3
 800628c:	d9f3      	bls.n	8006276 <_printf_i+0xf2>
 800628e:	2f08      	cmp	r7, #8
 8006290:	d109      	bne.n	80062a6 <_printf_i+0x122>
 8006292:	6823      	ldr	r3, [r4, #0]
 8006294:	07db      	lsls	r3, r3, #31
 8006296:	d506      	bpl.n	80062a6 <_printf_i+0x122>
 8006298:	6863      	ldr	r3, [r4, #4]
 800629a:	6922      	ldr	r2, [r4, #16]
 800629c:	4293      	cmp	r3, r2
 800629e:	dc02      	bgt.n	80062a6 <_printf_i+0x122>
 80062a0:	2330      	movs	r3, #48	; 0x30
 80062a2:	3e01      	subs	r6, #1
 80062a4:	7033      	strb	r3, [r6, #0]
 80062a6:	9b04      	ldr	r3, [sp, #16]
 80062a8:	1b9b      	subs	r3, r3, r6
 80062aa:	6123      	str	r3, [r4, #16]
 80062ac:	9b07      	ldr	r3, [sp, #28]
 80062ae:	0021      	movs	r1, r4
 80062b0:	9300      	str	r3, [sp, #0]
 80062b2:	9805      	ldr	r0, [sp, #20]
 80062b4:	9b06      	ldr	r3, [sp, #24]
 80062b6:	aa09      	add	r2, sp, #36	; 0x24
 80062b8:	f7ff fef4 	bl	80060a4 <_printf_common>
 80062bc:	1c43      	adds	r3, r0, #1
 80062be:	d14c      	bne.n	800635a <_printf_i+0x1d6>
 80062c0:	2001      	movs	r0, #1
 80062c2:	4240      	negs	r0, r0
 80062c4:	b00b      	add	sp, #44	; 0x2c
 80062c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062c8:	3145      	adds	r1, #69	; 0x45
 80062ca:	700a      	strb	r2, [r1, #0]
 80062cc:	4a34      	ldr	r2, [pc, #208]	; (80063a0 <_printf_i+0x21c>)
 80062ce:	9203      	str	r2, [sp, #12]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	6821      	ldr	r1, [r4, #0]
 80062d4:	ca20      	ldmia	r2!, {r5}
 80062d6:	601a      	str	r2, [r3, #0]
 80062d8:	0608      	lsls	r0, r1, #24
 80062da:	d516      	bpl.n	800630a <_printf_i+0x186>
 80062dc:	07cb      	lsls	r3, r1, #31
 80062de:	d502      	bpl.n	80062e6 <_printf_i+0x162>
 80062e0:	2320      	movs	r3, #32
 80062e2:	4319      	orrs	r1, r3
 80062e4:	6021      	str	r1, [r4, #0]
 80062e6:	2710      	movs	r7, #16
 80062e8:	2d00      	cmp	r5, #0
 80062ea:	d1b2      	bne.n	8006252 <_printf_i+0xce>
 80062ec:	2320      	movs	r3, #32
 80062ee:	6822      	ldr	r2, [r4, #0]
 80062f0:	439a      	bics	r2, r3
 80062f2:	6022      	str	r2, [r4, #0]
 80062f4:	e7ad      	b.n	8006252 <_printf_i+0xce>
 80062f6:	2220      	movs	r2, #32
 80062f8:	6809      	ldr	r1, [r1, #0]
 80062fa:	430a      	orrs	r2, r1
 80062fc:	6022      	str	r2, [r4, #0]
 80062fe:	0022      	movs	r2, r4
 8006300:	2178      	movs	r1, #120	; 0x78
 8006302:	3245      	adds	r2, #69	; 0x45
 8006304:	7011      	strb	r1, [r2, #0]
 8006306:	4a27      	ldr	r2, [pc, #156]	; (80063a4 <_printf_i+0x220>)
 8006308:	e7e1      	b.n	80062ce <_printf_i+0x14a>
 800630a:	0648      	lsls	r0, r1, #25
 800630c:	d5e6      	bpl.n	80062dc <_printf_i+0x158>
 800630e:	b2ad      	uxth	r5, r5
 8006310:	e7e4      	b.n	80062dc <_printf_i+0x158>
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	680d      	ldr	r5, [r1, #0]
 8006316:	1d10      	adds	r0, r2, #4
 8006318:	6949      	ldr	r1, [r1, #20]
 800631a:	6018      	str	r0, [r3, #0]
 800631c:	6813      	ldr	r3, [r2, #0]
 800631e:	062e      	lsls	r6, r5, #24
 8006320:	d501      	bpl.n	8006326 <_printf_i+0x1a2>
 8006322:	6019      	str	r1, [r3, #0]
 8006324:	e002      	b.n	800632c <_printf_i+0x1a8>
 8006326:	066d      	lsls	r5, r5, #25
 8006328:	d5fb      	bpl.n	8006322 <_printf_i+0x19e>
 800632a:	8019      	strh	r1, [r3, #0]
 800632c:	2300      	movs	r3, #0
 800632e:	9e04      	ldr	r6, [sp, #16]
 8006330:	6123      	str	r3, [r4, #16]
 8006332:	e7bb      	b.n	80062ac <_printf_i+0x128>
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	1d11      	adds	r1, r2, #4
 8006338:	6019      	str	r1, [r3, #0]
 800633a:	6816      	ldr	r6, [r2, #0]
 800633c:	2100      	movs	r1, #0
 800633e:	0030      	movs	r0, r6
 8006340:	6862      	ldr	r2, [r4, #4]
 8006342:	f000 f831 	bl	80063a8 <memchr>
 8006346:	2800      	cmp	r0, #0
 8006348:	d001      	beq.n	800634e <_printf_i+0x1ca>
 800634a:	1b80      	subs	r0, r0, r6
 800634c:	6060      	str	r0, [r4, #4]
 800634e:	6863      	ldr	r3, [r4, #4]
 8006350:	6123      	str	r3, [r4, #16]
 8006352:	2300      	movs	r3, #0
 8006354:	9a04      	ldr	r2, [sp, #16]
 8006356:	7013      	strb	r3, [r2, #0]
 8006358:	e7a8      	b.n	80062ac <_printf_i+0x128>
 800635a:	6923      	ldr	r3, [r4, #16]
 800635c:	0032      	movs	r2, r6
 800635e:	9906      	ldr	r1, [sp, #24]
 8006360:	9805      	ldr	r0, [sp, #20]
 8006362:	9d07      	ldr	r5, [sp, #28]
 8006364:	47a8      	blx	r5
 8006366:	1c43      	adds	r3, r0, #1
 8006368:	d0aa      	beq.n	80062c0 <_printf_i+0x13c>
 800636a:	6823      	ldr	r3, [r4, #0]
 800636c:	079b      	lsls	r3, r3, #30
 800636e:	d415      	bmi.n	800639c <_printf_i+0x218>
 8006370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006372:	68e0      	ldr	r0, [r4, #12]
 8006374:	4298      	cmp	r0, r3
 8006376:	daa5      	bge.n	80062c4 <_printf_i+0x140>
 8006378:	0018      	movs	r0, r3
 800637a:	e7a3      	b.n	80062c4 <_printf_i+0x140>
 800637c:	0022      	movs	r2, r4
 800637e:	2301      	movs	r3, #1
 8006380:	9906      	ldr	r1, [sp, #24]
 8006382:	9805      	ldr	r0, [sp, #20]
 8006384:	9e07      	ldr	r6, [sp, #28]
 8006386:	3219      	adds	r2, #25
 8006388:	47b0      	blx	r6
 800638a:	1c43      	adds	r3, r0, #1
 800638c:	d098      	beq.n	80062c0 <_printf_i+0x13c>
 800638e:	3501      	adds	r5, #1
 8006390:	68e3      	ldr	r3, [r4, #12]
 8006392:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006394:	1a9b      	subs	r3, r3, r2
 8006396:	42ab      	cmp	r3, r5
 8006398:	dcf0      	bgt.n	800637c <_printf_i+0x1f8>
 800639a:	e7e9      	b.n	8006370 <_printf_i+0x1ec>
 800639c:	2500      	movs	r5, #0
 800639e:	e7f7      	b.n	8006390 <_printf_i+0x20c>
 80063a0:	0800689a 	.word	0x0800689a
 80063a4:	080068ab 	.word	0x080068ab

080063a8 <memchr>:
 80063a8:	b2c9      	uxtb	r1, r1
 80063aa:	1882      	adds	r2, r0, r2
 80063ac:	4290      	cmp	r0, r2
 80063ae:	d101      	bne.n	80063b4 <memchr+0xc>
 80063b0:	2000      	movs	r0, #0
 80063b2:	4770      	bx	lr
 80063b4:	7803      	ldrb	r3, [r0, #0]
 80063b6:	428b      	cmp	r3, r1
 80063b8:	d0fb      	beq.n	80063b2 <memchr+0xa>
 80063ba:	3001      	adds	r0, #1
 80063bc:	e7f6      	b.n	80063ac <memchr+0x4>

080063be <memmove>:
 80063be:	b510      	push	{r4, lr}
 80063c0:	4288      	cmp	r0, r1
 80063c2:	d902      	bls.n	80063ca <memmove+0xc>
 80063c4:	188b      	adds	r3, r1, r2
 80063c6:	4298      	cmp	r0, r3
 80063c8:	d303      	bcc.n	80063d2 <memmove+0x14>
 80063ca:	2300      	movs	r3, #0
 80063cc:	e007      	b.n	80063de <memmove+0x20>
 80063ce:	5c8b      	ldrb	r3, [r1, r2]
 80063d0:	5483      	strb	r3, [r0, r2]
 80063d2:	3a01      	subs	r2, #1
 80063d4:	d2fb      	bcs.n	80063ce <memmove+0x10>
 80063d6:	bd10      	pop	{r4, pc}
 80063d8:	5ccc      	ldrb	r4, [r1, r3]
 80063da:	54c4      	strb	r4, [r0, r3]
 80063dc:	3301      	adds	r3, #1
 80063de:	429a      	cmp	r2, r3
 80063e0:	d1fa      	bne.n	80063d8 <memmove+0x1a>
 80063e2:	e7f8      	b.n	80063d6 <memmove+0x18>

080063e4 <_free_r>:
 80063e4:	b570      	push	{r4, r5, r6, lr}
 80063e6:	0005      	movs	r5, r0
 80063e8:	2900      	cmp	r1, #0
 80063ea:	d010      	beq.n	800640e <_free_r+0x2a>
 80063ec:	1f0c      	subs	r4, r1, #4
 80063ee:	6823      	ldr	r3, [r4, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	da00      	bge.n	80063f6 <_free_r+0x12>
 80063f4:	18e4      	adds	r4, r4, r3
 80063f6:	0028      	movs	r0, r5
 80063f8:	f000 f918 	bl	800662c <__malloc_lock>
 80063fc:	4a1d      	ldr	r2, [pc, #116]	; (8006474 <_free_r+0x90>)
 80063fe:	6813      	ldr	r3, [r2, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d105      	bne.n	8006410 <_free_r+0x2c>
 8006404:	6063      	str	r3, [r4, #4]
 8006406:	6014      	str	r4, [r2, #0]
 8006408:	0028      	movs	r0, r5
 800640a:	f000 f917 	bl	800663c <__malloc_unlock>
 800640e:	bd70      	pop	{r4, r5, r6, pc}
 8006410:	42a3      	cmp	r3, r4
 8006412:	d908      	bls.n	8006426 <_free_r+0x42>
 8006414:	6821      	ldr	r1, [r4, #0]
 8006416:	1860      	adds	r0, r4, r1
 8006418:	4283      	cmp	r3, r0
 800641a:	d1f3      	bne.n	8006404 <_free_r+0x20>
 800641c:	6818      	ldr	r0, [r3, #0]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	1841      	adds	r1, r0, r1
 8006422:	6021      	str	r1, [r4, #0]
 8006424:	e7ee      	b.n	8006404 <_free_r+0x20>
 8006426:	001a      	movs	r2, r3
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d001      	beq.n	8006432 <_free_r+0x4e>
 800642e:	42a3      	cmp	r3, r4
 8006430:	d9f9      	bls.n	8006426 <_free_r+0x42>
 8006432:	6811      	ldr	r1, [r2, #0]
 8006434:	1850      	adds	r0, r2, r1
 8006436:	42a0      	cmp	r0, r4
 8006438:	d10b      	bne.n	8006452 <_free_r+0x6e>
 800643a:	6820      	ldr	r0, [r4, #0]
 800643c:	1809      	adds	r1, r1, r0
 800643e:	1850      	adds	r0, r2, r1
 8006440:	6011      	str	r1, [r2, #0]
 8006442:	4283      	cmp	r3, r0
 8006444:	d1e0      	bne.n	8006408 <_free_r+0x24>
 8006446:	6818      	ldr	r0, [r3, #0]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	1841      	adds	r1, r0, r1
 800644c:	6011      	str	r1, [r2, #0]
 800644e:	6053      	str	r3, [r2, #4]
 8006450:	e7da      	b.n	8006408 <_free_r+0x24>
 8006452:	42a0      	cmp	r0, r4
 8006454:	d902      	bls.n	800645c <_free_r+0x78>
 8006456:	230c      	movs	r3, #12
 8006458:	602b      	str	r3, [r5, #0]
 800645a:	e7d5      	b.n	8006408 <_free_r+0x24>
 800645c:	6821      	ldr	r1, [r4, #0]
 800645e:	1860      	adds	r0, r4, r1
 8006460:	4283      	cmp	r3, r0
 8006462:	d103      	bne.n	800646c <_free_r+0x88>
 8006464:	6818      	ldr	r0, [r3, #0]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	1841      	adds	r1, r0, r1
 800646a:	6021      	str	r1, [r4, #0]
 800646c:	6063      	str	r3, [r4, #4]
 800646e:	6054      	str	r4, [r2, #4]
 8006470:	e7ca      	b.n	8006408 <_free_r+0x24>
 8006472:	46c0      	nop			; (mov r8, r8)
 8006474:	200001d8 	.word	0x200001d8

08006478 <sbrk_aligned>:
 8006478:	b570      	push	{r4, r5, r6, lr}
 800647a:	4e0f      	ldr	r6, [pc, #60]	; (80064b8 <sbrk_aligned+0x40>)
 800647c:	000d      	movs	r5, r1
 800647e:	6831      	ldr	r1, [r6, #0]
 8006480:	0004      	movs	r4, r0
 8006482:	2900      	cmp	r1, #0
 8006484:	d102      	bne.n	800648c <sbrk_aligned+0x14>
 8006486:	f000 f8bf 	bl	8006608 <_sbrk_r>
 800648a:	6030      	str	r0, [r6, #0]
 800648c:	0029      	movs	r1, r5
 800648e:	0020      	movs	r0, r4
 8006490:	f000 f8ba 	bl	8006608 <_sbrk_r>
 8006494:	1c43      	adds	r3, r0, #1
 8006496:	d00a      	beq.n	80064ae <sbrk_aligned+0x36>
 8006498:	2303      	movs	r3, #3
 800649a:	1cc5      	adds	r5, r0, #3
 800649c:	439d      	bics	r5, r3
 800649e:	42a8      	cmp	r0, r5
 80064a0:	d007      	beq.n	80064b2 <sbrk_aligned+0x3a>
 80064a2:	1a29      	subs	r1, r5, r0
 80064a4:	0020      	movs	r0, r4
 80064a6:	f000 f8af 	bl	8006608 <_sbrk_r>
 80064aa:	1c43      	adds	r3, r0, #1
 80064ac:	d101      	bne.n	80064b2 <sbrk_aligned+0x3a>
 80064ae:	2501      	movs	r5, #1
 80064b0:	426d      	negs	r5, r5
 80064b2:	0028      	movs	r0, r5
 80064b4:	bd70      	pop	{r4, r5, r6, pc}
 80064b6:	46c0      	nop			; (mov r8, r8)
 80064b8:	200001dc 	.word	0x200001dc

080064bc <_malloc_r>:
 80064bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064be:	2203      	movs	r2, #3
 80064c0:	1ccb      	adds	r3, r1, #3
 80064c2:	4393      	bics	r3, r2
 80064c4:	3308      	adds	r3, #8
 80064c6:	0006      	movs	r6, r0
 80064c8:	001f      	movs	r7, r3
 80064ca:	2b0c      	cmp	r3, #12
 80064cc:	d232      	bcs.n	8006534 <_malloc_r+0x78>
 80064ce:	270c      	movs	r7, #12
 80064d0:	42b9      	cmp	r1, r7
 80064d2:	d831      	bhi.n	8006538 <_malloc_r+0x7c>
 80064d4:	0030      	movs	r0, r6
 80064d6:	f000 f8a9 	bl	800662c <__malloc_lock>
 80064da:	4d32      	ldr	r5, [pc, #200]	; (80065a4 <_malloc_r+0xe8>)
 80064dc:	682b      	ldr	r3, [r5, #0]
 80064de:	001c      	movs	r4, r3
 80064e0:	2c00      	cmp	r4, #0
 80064e2:	d12e      	bne.n	8006542 <_malloc_r+0x86>
 80064e4:	0039      	movs	r1, r7
 80064e6:	0030      	movs	r0, r6
 80064e8:	f7ff ffc6 	bl	8006478 <sbrk_aligned>
 80064ec:	0004      	movs	r4, r0
 80064ee:	1c43      	adds	r3, r0, #1
 80064f0:	d11e      	bne.n	8006530 <_malloc_r+0x74>
 80064f2:	682c      	ldr	r4, [r5, #0]
 80064f4:	0025      	movs	r5, r4
 80064f6:	2d00      	cmp	r5, #0
 80064f8:	d14a      	bne.n	8006590 <_malloc_r+0xd4>
 80064fa:	6823      	ldr	r3, [r4, #0]
 80064fc:	0029      	movs	r1, r5
 80064fe:	18e3      	adds	r3, r4, r3
 8006500:	0030      	movs	r0, r6
 8006502:	9301      	str	r3, [sp, #4]
 8006504:	f000 f880 	bl	8006608 <_sbrk_r>
 8006508:	9b01      	ldr	r3, [sp, #4]
 800650a:	4283      	cmp	r3, r0
 800650c:	d143      	bne.n	8006596 <_malloc_r+0xda>
 800650e:	6823      	ldr	r3, [r4, #0]
 8006510:	3703      	adds	r7, #3
 8006512:	1aff      	subs	r7, r7, r3
 8006514:	2303      	movs	r3, #3
 8006516:	439f      	bics	r7, r3
 8006518:	3708      	adds	r7, #8
 800651a:	2f0c      	cmp	r7, #12
 800651c:	d200      	bcs.n	8006520 <_malloc_r+0x64>
 800651e:	270c      	movs	r7, #12
 8006520:	0039      	movs	r1, r7
 8006522:	0030      	movs	r0, r6
 8006524:	f7ff ffa8 	bl	8006478 <sbrk_aligned>
 8006528:	1c43      	adds	r3, r0, #1
 800652a:	d034      	beq.n	8006596 <_malloc_r+0xda>
 800652c:	6823      	ldr	r3, [r4, #0]
 800652e:	19df      	adds	r7, r3, r7
 8006530:	6027      	str	r7, [r4, #0]
 8006532:	e013      	b.n	800655c <_malloc_r+0xa0>
 8006534:	2b00      	cmp	r3, #0
 8006536:	dacb      	bge.n	80064d0 <_malloc_r+0x14>
 8006538:	230c      	movs	r3, #12
 800653a:	2500      	movs	r5, #0
 800653c:	6033      	str	r3, [r6, #0]
 800653e:	0028      	movs	r0, r5
 8006540:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006542:	6822      	ldr	r2, [r4, #0]
 8006544:	1bd1      	subs	r1, r2, r7
 8006546:	d420      	bmi.n	800658a <_malloc_r+0xce>
 8006548:	290b      	cmp	r1, #11
 800654a:	d917      	bls.n	800657c <_malloc_r+0xc0>
 800654c:	19e2      	adds	r2, r4, r7
 800654e:	6027      	str	r7, [r4, #0]
 8006550:	42a3      	cmp	r3, r4
 8006552:	d111      	bne.n	8006578 <_malloc_r+0xbc>
 8006554:	602a      	str	r2, [r5, #0]
 8006556:	6863      	ldr	r3, [r4, #4]
 8006558:	6011      	str	r1, [r2, #0]
 800655a:	6053      	str	r3, [r2, #4]
 800655c:	0030      	movs	r0, r6
 800655e:	0025      	movs	r5, r4
 8006560:	f000 f86c 	bl	800663c <__malloc_unlock>
 8006564:	2207      	movs	r2, #7
 8006566:	350b      	adds	r5, #11
 8006568:	1d23      	adds	r3, r4, #4
 800656a:	4395      	bics	r5, r2
 800656c:	1aea      	subs	r2, r5, r3
 800656e:	429d      	cmp	r5, r3
 8006570:	d0e5      	beq.n	800653e <_malloc_r+0x82>
 8006572:	1b5b      	subs	r3, r3, r5
 8006574:	50a3      	str	r3, [r4, r2]
 8006576:	e7e2      	b.n	800653e <_malloc_r+0x82>
 8006578:	605a      	str	r2, [r3, #4]
 800657a:	e7ec      	b.n	8006556 <_malloc_r+0x9a>
 800657c:	6862      	ldr	r2, [r4, #4]
 800657e:	42a3      	cmp	r3, r4
 8006580:	d101      	bne.n	8006586 <_malloc_r+0xca>
 8006582:	602a      	str	r2, [r5, #0]
 8006584:	e7ea      	b.n	800655c <_malloc_r+0xa0>
 8006586:	605a      	str	r2, [r3, #4]
 8006588:	e7e8      	b.n	800655c <_malloc_r+0xa0>
 800658a:	0023      	movs	r3, r4
 800658c:	6864      	ldr	r4, [r4, #4]
 800658e:	e7a7      	b.n	80064e0 <_malloc_r+0x24>
 8006590:	002c      	movs	r4, r5
 8006592:	686d      	ldr	r5, [r5, #4]
 8006594:	e7af      	b.n	80064f6 <_malloc_r+0x3a>
 8006596:	230c      	movs	r3, #12
 8006598:	0030      	movs	r0, r6
 800659a:	6033      	str	r3, [r6, #0]
 800659c:	f000 f84e 	bl	800663c <__malloc_unlock>
 80065a0:	e7cd      	b.n	800653e <_malloc_r+0x82>
 80065a2:	46c0      	nop			; (mov r8, r8)
 80065a4:	200001d8 	.word	0x200001d8

080065a8 <_realloc_r>:
 80065a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065aa:	0007      	movs	r7, r0
 80065ac:	000e      	movs	r6, r1
 80065ae:	0014      	movs	r4, r2
 80065b0:	2900      	cmp	r1, #0
 80065b2:	d105      	bne.n	80065c0 <_realloc_r+0x18>
 80065b4:	0011      	movs	r1, r2
 80065b6:	f7ff ff81 	bl	80064bc <_malloc_r>
 80065ba:	0005      	movs	r5, r0
 80065bc:	0028      	movs	r0, r5
 80065be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80065c0:	2a00      	cmp	r2, #0
 80065c2:	d103      	bne.n	80065cc <_realloc_r+0x24>
 80065c4:	f7ff ff0e 	bl	80063e4 <_free_r>
 80065c8:	0025      	movs	r5, r4
 80065ca:	e7f7      	b.n	80065bc <_realloc_r+0x14>
 80065cc:	f000 f83e 	bl	800664c <_malloc_usable_size_r>
 80065d0:	9001      	str	r0, [sp, #4]
 80065d2:	4284      	cmp	r4, r0
 80065d4:	d803      	bhi.n	80065de <_realloc_r+0x36>
 80065d6:	0035      	movs	r5, r6
 80065d8:	0843      	lsrs	r3, r0, #1
 80065da:	42a3      	cmp	r3, r4
 80065dc:	d3ee      	bcc.n	80065bc <_realloc_r+0x14>
 80065de:	0021      	movs	r1, r4
 80065e0:	0038      	movs	r0, r7
 80065e2:	f7ff ff6b 	bl	80064bc <_malloc_r>
 80065e6:	1e05      	subs	r5, r0, #0
 80065e8:	d0e8      	beq.n	80065bc <_realloc_r+0x14>
 80065ea:	9b01      	ldr	r3, [sp, #4]
 80065ec:	0022      	movs	r2, r4
 80065ee:	429c      	cmp	r4, r3
 80065f0:	d900      	bls.n	80065f4 <_realloc_r+0x4c>
 80065f2:	001a      	movs	r2, r3
 80065f4:	0031      	movs	r1, r6
 80065f6:	0028      	movs	r0, r5
 80065f8:	f7ff fbac 	bl	8005d54 <memcpy>
 80065fc:	0031      	movs	r1, r6
 80065fe:	0038      	movs	r0, r7
 8006600:	f7ff fef0 	bl	80063e4 <_free_r>
 8006604:	e7da      	b.n	80065bc <_realloc_r+0x14>
	...

08006608 <_sbrk_r>:
 8006608:	2300      	movs	r3, #0
 800660a:	b570      	push	{r4, r5, r6, lr}
 800660c:	4d06      	ldr	r5, [pc, #24]	; (8006628 <_sbrk_r+0x20>)
 800660e:	0004      	movs	r4, r0
 8006610:	0008      	movs	r0, r1
 8006612:	602b      	str	r3, [r5, #0]
 8006614:	f7fc f9d4 	bl	80029c0 <_sbrk>
 8006618:	1c43      	adds	r3, r0, #1
 800661a:	d103      	bne.n	8006624 <_sbrk_r+0x1c>
 800661c:	682b      	ldr	r3, [r5, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d000      	beq.n	8006624 <_sbrk_r+0x1c>
 8006622:	6023      	str	r3, [r4, #0]
 8006624:	bd70      	pop	{r4, r5, r6, pc}
 8006626:	46c0      	nop			; (mov r8, r8)
 8006628:	200001e0 	.word	0x200001e0

0800662c <__malloc_lock>:
 800662c:	b510      	push	{r4, lr}
 800662e:	4802      	ldr	r0, [pc, #8]	; (8006638 <__malloc_lock+0xc>)
 8006630:	f000 f814 	bl	800665c <__retarget_lock_acquire_recursive>
 8006634:	bd10      	pop	{r4, pc}
 8006636:	46c0      	nop			; (mov r8, r8)
 8006638:	200001e4 	.word	0x200001e4

0800663c <__malloc_unlock>:
 800663c:	b510      	push	{r4, lr}
 800663e:	4802      	ldr	r0, [pc, #8]	; (8006648 <__malloc_unlock+0xc>)
 8006640:	f000 f80d 	bl	800665e <__retarget_lock_release_recursive>
 8006644:	bd10      	pop	{r4, pc}
 8006646:	46c0      	nop			; (mov r8, r8)
 8006648:	200001e4 	.word	0x200001e4

0800664c <_malloc_usable_size_r>:
 800664c:	1f0b      	subs	r3, r1, #4
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	1f18      	subs	r0, r3, #4
 8006652:	2b00      	cmp	r3, #0
 8006654:	da01      	bge.n	800665a <_malloc_usable_size_r+0xe>
 8006656:	580b      	ldr	r3, [r1, r0]
 8006658:	18c0      	adds	r0, r0, r3
 800665a:	4770      	bx	lr

0800665c <__retarget_lock_acquire_recursive>:
 800665c:	4770      	bx	lr

0800665e <__retarget_lock_release_recursive>:
 800665e:	4770      	bx	lr

08006660 <_init>:
 8006660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006662:	46c0      	nop			; (mov r8, r8)
 8006664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006666:	bc08      	pop	{r3}
 8006668:	469e      	mov	lr, r3
 800666a:	4770      	bx	lr

0800666c <_fini>:
 800666c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800666e:	46c0      	nop			; (mov r8, r8)
 8006670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006672:	bc08      	pop	{r3}
 8006674:	469e      	mov	lr, r3
 8006676:	4770      	bx	lr
